%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%CreationDate: Sun May 26 16:48:33 2019
%%For:zyc zyc
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 3 2 480 128
%%HiResBoundingBox: 3.000023 2.790000 479.220314 127.601996
%%EndComments

%%BeginProlog
%%BeginPreview: 478 126 8 1512
% 11444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444441100000000000000000000
% 00000000000000000000000000000000116688888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888330000000000000000000000
% 00000000000000000000000000000000334444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbff4400000000000000000000
% 000000000000000000000000000022bbffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee77000000000000000000
% 00000000000000000000000000000000bbddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbccff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 0000000000000000000000000066eeee772200000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000001155aaffbb1100000000000000
% 00000000000000000000000000000000bb7700000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444440000ff4400000000000000000000
% 00000000000000000000000033ffbb11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000066ff8800000000000000
% 00000000000000000000000000000000bb7700224444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 444444444444444444444444330044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff4400000000000000000000
% 000000000000000000000000ccee1100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ff44000000000000
% 00000000000000000000000000000000bb770077ffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffbb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000022ff660000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000dd99000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000066ff110000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099dd000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 001100000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000119988779977
% 00001199888888bb4455eebb889988000000000055eebb8888bb8800000000000000000000000000
% 00ff11000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000cc66000000bb
% 7700cc77000000774400bb880011dd660000000000bb880000005500000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000bbbb88ff9999ee00000000000000
% 00000000000000000000001199888888bb4455ff0000000000000000000000000000000044ff0000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000055ff0000000066
% ee66ee00000000005500bb880000cc880000000000bb880000220000116611883300001155661100
% 005522116611883300002288660000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000660000ff44006600000000000000
% 0000000000440000000000cc77000000774400ff0000000000000000000000000000000000ff0000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000055ddcc330066ffaa22000000000000000000000000000044ee00
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000088bb0000000044
% ffaebb00000000000000bb883388cc110000000000bbbb888888000044ff6655ee0000bb0077bb22
% 33ff4444ff6655ee00227700aa8800000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000110000ff44001100228866001144
% 2222330066cc4400000066ee00000000005500ff2288330022330022440011661188330000ff0011
% 441100335533000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000000bb88000000ff4400000000000000000000000000000000ff00
% 00000000000000000000000000440000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000088bb0000000044
% ffc1bb00000000000000bb99bbbb00000000000000bb88001177000000ff0000ff0044cc0011bb00
% 00bb4400ff0000ff00889988998800000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000ff440000227700aa8800bb
% 6666330044bb0000000099bb00000000000000ff6655ee0044bb0000ff0044ff6655ee0000ff0077
% 330044770088000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000000bb88000000ff4400004444660011661188330000115555ff00
% 00225577110022330022440066cc4400000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000066ee0000000055
% ee77ee00000000000000bb8811ee66000000000000bb88000011000000ff0000ff0000cc55556600
% 00bb4400ff0000ff00bb4400000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000ff44000088998899880022
% dd77000044bb00000000aabb00000000000000ff0000ff0044bb0000ff0000ff0000ff0000ff8811
% 000044cc4411000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000000bb99444444ff440033bb00993344ff6655ee0011aa0033ff00
% 22aa0033dd2244bb0000ff0044bb0000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000011dd44000000aa
% 8811ee77000000113300bb880044ff440000000000bb88000000880000ff0000ff00007744220000
% 00bb4400ff0000ff0088aa00005500000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000ff440000bb440000000000
% bbaa000044bb0000000077ee00000000000000ff0000ff0044bb0000ff0000ff0000ff0000ff9988
% 00000066ee88000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000000bb99444444ff4400112222998800ff0000ff0088660000ff00
% 88880000998844bb0000ff0044bb0000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff00000000000000000000000000000000000000000022aa77449988
% 000033bb996688770033ddaa220077ee4400000044eebb888899aa0044ff3344ff4400ddbbbb9911
% 33ff7744ff3344ff4411ccccaa3300000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000ff44000088aa0000550066
% 22cc550044bb0000000011ee77000000113300ff0000ff0044cc0011ff0000ff0000ff0000ff11dd
% 4400220011dd220000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000000bb88000000ff4400118844888800ff0000ff00bb660000ff00
% aa880000888844bb0000ff0044bb0000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000011330000
% 00000000114400000000000000000000000000000000000000000000000000000000336622444466
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000055ff88220011ccccaa334499
% 0077ee4411ee881100000033bb996688770077ff3333ff5500cc9988ee3344ff3344ff4455ff4455
% ee5544774499000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000000bb88000000ff4400778800888800ff0000ff0088990000ff00
% 77aa0000886644cc0011ff0044bb0000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000998811226633
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000114400000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000000033ddaa220055ff992255ee8888bb5dff3344ff4411cc9988ee55
% 00997755880000cc9988ee3311ee8811000000000000000000ff0000ff4400000000000000000000
% 000000000000663300000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000117788771100
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000007722000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff7644444444444444444444
% 444444444444c4ffdd772288ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff444444444444
% 4444444444444444444444ffffbb6611bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444411000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ffffffffffffffffffffffff
% ffffffffffffdfffffffffbfff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ffffffffffffff
% ffffffffffffffffffffffffffffffeecd7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff7644444444444444444444
% 444444444444c4ffcc771188ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff444444444444
% 4444444444444444444444ffffaa6600bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444444444477ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000552200000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000006611000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000001100000000110000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000055eebb8899660055eebb888899220055eebb8888bb8800000055ee
% bb8888bb88ff110033dd440000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff8844bbbb88ff9999ee000000000000000000000000000000000000000000000000000000000000
% 00000000000000004488ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000000bb880011ff4400bb88000033ee5500bb880000005500000000bb
% 880000005500000000bb440000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000660000ff440066000000000000000000000000000000000000000000000000000000000000
% 00000000004400000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000044333344444411003344444411000000
% 00000000000000000000000000556633110000000000000000000000000000000000000000000000
% 000000000000003344000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000000bb880000cc7700bb8800000088dd00bb880000330000000000bb
% 880000330055220000bb440022886600000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000110000ff440011002288660000335533000033553300002288660000663377004444660000
% 1166771166cc44000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb77007788000044660055dd8888cc1155dd8888cc110000
% 000000000000000000000000998866ee440000000000000000000000000000000000000000000000
% 000000000000000066330044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044a0dfa0440000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000000bb880044ee2200bb8800000044ff22bbbb8888aa0000000000bb
% bb8888aa33ff440000bb44227700aa88000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000000000ff440000227700aa8844770088004477008800227700aa8855ff669933bb00993322
% 990077aa44bb00000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000bb000000bb0000886600bb000088660000
% 33330000114422224411003399000099441144110044110000333300002233002233002233114400
% 000000444422000000bb0044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000033ffffff330000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000000bbbb8877110000bb8800000044ff33bb880022880000000000bb
% 8800228800bb440000bb448899889988000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000000000ff440000889988998844cc44110044cc441100889988998800ff0000112222998888
% 4400112244bb00000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880044bb000000cc4444bb2200cc4444bb220088
% 9988990044cc8877cc44008855000022114499aabb889900889988990066dd0066dd0066ddbb88bb
% 1100bb8888ff000000bb3344bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ddffdd000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000000bb880000000000bb8800000066dd00bb880000110000000000bb
% 8800001100bb440000bb44bb44000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000000000ff440000bb440000000066ee88000066ee8800bb4400000000ff00001188448888bb
% 4400000044bb00000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb77007788007788000000dd8888991100dd888899112299
% 000088550011aaaa1100008844002244330044dd11000022990000885500bb0000bb0000bb110055
% 8822aa330066000000aa6644bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ff77000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000000bb880000000000bb88000011dd5500bb880000000000000000bb
% 8800000000bb440000bb4488aa000055000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000000000ff44000088aa000055220011dd22220011dd2288aa00005500ff0000778800888888
% aa00004444bb00000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb77007788007788000000bb0000558800bb000055884488
% 000055880000888800000077660044bb8800448800000044880000558800bb0000bb0000bb000011
% bb002288aa99110000aa6644bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022ff22000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000033eeaa2200000033ddbb888899440033eeaa2200000000000033ee
% aa22000033ff770033dd7711ccccaa33000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff0000000055ff88220011ccccaa334477449900447744990011ccccaa3355ff550055ee8888bb31
% ccddaa3311ee88110000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880044bb000000bb0000558800bb0000558822bb
% 0000aa330033888844000022bb0000cc4400448800000022bb0000aa3300bb0000dd0000bb220077
% 7744bb000066440000bb3344bb0044ff000000000000000000000000000000000000000000000000
% 0000002244444444444444444444444444444444444444444444444444444444b444444444444444
% 44444444444444444444444444444444444444444422000000000000000000000000000000000000
% 00000000000000000044444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444444444444444444444411
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% ff000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000ff00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000bb000077eebbbbaa1177eebbbbaa110066
% bbcc880077ee7755ee88000066bbaacc4466ccddbb33000066bbcc88000088bbbbeeaa00bbaabbbb
% 1144ccccbbaa110000cc0044bb0044ff000000000000000000000000000000000000000000000000
% 0044ddffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffdd4400000000000000000000000000000000
% 000000000000000000ffccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbee44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% bb442200000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000002244bb00000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800004444000000000000000000000000000000
% 000000000000000000000000001111000000000000000000000000000000000000000000bb000000
% 000000000000000066440044bb0044ff000000000000000000000000000000000000000000000000
% 88ffcc66444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444466ccff88000000000000000000000000000000
% 000000000000000000ff440000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000055330000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000bb000000
% 000000000000002255000044bb0044ff000000000000000000000000000000000000000000000055
% ff990000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000001199ff550000000000000000000000000000
% 000000000000000000ff440033444444444444444444444444444444444444444444444444444444
% 444444444444444444444444444444444444444444444444444444444444444444441100bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000088bb880000
% 000000000000000000000044bb0044ff0000000000000000000000000000000000000000000011ee
% bb000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000bbee1100000000000000000000000000
% 000000000000000000ff4400bbffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff0000000000000000000000000000000000000000000066ff
% 22000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000022ff6600000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000066ff220000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099dd000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff0000000000000000000000000000000000000000000099dd
% 00000000000000000000000000000000000011001100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000dd9900000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000110000110000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000022ff660000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ee88000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000022990000000033dd4400ff11000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000000000229900000033dd440000ff1100000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 44ff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff4400000000000000000000
% 000000000000000000000000bbee1100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ff44000000000000
% 00000000000000000000000000000000bb770077ffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffbb0044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000077ff1100000000bb44000000000000000000000000000000000000000000
% 00000000000000000000000000000000440000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000077ff11000000bb440000000000000000000000
% 000000000000000000000000000000000000000000000000000000440000000000ff4400bb44
% 44ff0000444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444440000ff4400000000000000000000
% 00000000000000000000000022eecc22000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000077ff8800000000000000
% 00000000000000000000000000000000bb7700224444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 444444444444444444444444330044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000088aa8800000000bb44005522001155661100116611883300116611775511
% 66660000002288660011661188330066cc4400000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000088aa88000000bb440000552200115566110011
% 661188330011661177551166660000228866000011661188330066cc4400000000ff4400bb44
% 44ff0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 0000000000000000000000000066eeee884444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444466bbffaa1100000000000000
% 00000000000000000000000000000000bb7700000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ff00000000000000000000000000000000000000000000bbbb
% 000000000000000000663344dd00000000bb4433ff4400bb0077bb2244ff6655ee0033ff5544ee77
% 44bb3300227700aa8844ff6655ee0044bb0000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000000663344dd000000bb440033ff4400bb0077bb2244
% ff6655ee0033ff5544ee7744bb33227700aa880044ff6655ee0044bb0000000000ff4400bb44
% 44ffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbff4400000000000000000000
% 000000000000000000000000000022aaffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd55000000000000000000
% 00000000000000000000000000000000bbddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbccff00000000000000000000000000000000000000000000bbbb
% 000000000000000000880000dd66000000bb4400bb4444cc0011bb0000ff0000ff0000ff0000bb44
% 00888800889988998800ff0000ff0044bb0000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000000880000dd660000bb440000bb4444cc0011bb0000
% ff0000ff0000ff0000bb4400888888998899880000ff0000ff0044bb0000000000ff4400bb44
% 11444444444444444444444444444444444444504444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444441100000000000000000000
% 00000000000000000000000000000000004444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444220000000000000000000000
% 00000000000000000000000000000000334444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444400000000000000000000000000000000000000000000bbbb
% 000000000000000033998888aacc000000bb4400bb4400cc5555660000ff0000ff0000ff0000bb44
% 00888800bb4400000000ff0000ff0044bb0000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000033998888aacc0000bb440000bb4400cc5555660000
% ff0000ff0000ff0000bb44008888bb440000000000ff0000ff0044bb0000000000ff4400bb44
% 00000000000000000000000000000000443300ff1100000000000000000000000000000000000000
% 00000000000000119988000033440000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000008800000011ff440000bb4400bb4400774422000000ff0000ff0000ff0000bb44
% 0088880088aa00005500ff0000ff0044bb0000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000008800000011ff4400bb440000bb4400774422000000
% ff0000ff0000ff0000bb4400888888aa0000550000ff0000ff0044bb0000000000ff4400bb44
% 00000000000000000000000000000044660000000000000000000000000000000000000000000000
% 44000000000000118888000000663300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 0000000000000044dd22000022ddcc2233dd7733ff7700ddbbbb991144ff3344ff4444ff4422dd88
% 11aa991111ccccaa3344ff3344ff4411ee8811000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000044dd22000022ddcc4edd770033ff7700ddbbbb991144
% ff3344ff4444ff4422dd8811aa9921ccccaa330044ff3344ff4411ee8811000000ff4400bb44
% 000000000000000000000000000000bb000000552211661188330011662288440022330022440066
% cc44000000000000888800000000bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000336622444466000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000033662244446600
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 000000000000000000000000000044bb000033ff4444ff6655ee0066ff5555ee4444bb0000ff0044
% bb00000000000000888800000000bb33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000998811226633000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000099881122663300
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 00000000000000000000000000007788000000bb4400ff0000ff0000ff0000888844bb0000ff0044
% bb00000000000000888800000000aa66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000117788771100000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000011778877110000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 00000000000000000000000000007788000000bb4400ff0000ff0000ff0000888844bb0000ff0044
% bb00000000000000888800000000aa66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000110000000000000000000000000000000000ff4400bb44
% 000000000000000000000000000044bb000000bb4400ff0000ff0000ff0000885544cc0011ff0044
% bb00000000000000888800000000bb33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000011000000000000000000000000000000000011000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000000000000000000000000055eebb8899880000000000
% 0000000000000000000000000033dd440000000000000000000000000000000000ff4400bb44
% 000000000000000000000000000000bb000033ff7744ff3344ff4400ff6666880000cc9988ee3311
% ee88110000000022aaaa33000000cc00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 0000000000000000000000229900000033dd440000000000000000000000000000000000ff110000
% 000055ff000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000000000000000000000000000bb880011dd6600000000
% 0000000000000000000000000000bb440044000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000044440000000000000000000000ff0000000000000000000000
% 00000000000000000000000000664400000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 000000000000000000000077ff11000000bb44000000000000000000000000000000000000000000
% 440000ff000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000226611000000ff4400bb4400000000000000000000000000000000bb880000cc8800002288
% 6600003355330022330022440000bb4466cc440000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000553300000000000000000011ff0000000000000000000000
% 00000000000000000000000022550000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 000000000000000000000088aa88000000bb44000011556611000022557711000066337755220066
% cc4400ff228833001166117755116666000000000000000000bbc444444444444444444444444444
% 44444476ffee995500ff4400bb4400000000000000000000000000000000bb883388cc1100227700
% aa88447700880044bb0000ff0000bb4444bb000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000044884400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000663344dd000000bb440000bb0077bb2222aa0033dd2255ff66adff440044
% bb0000ff6655ee0033ff5544ee7744bb330000000000000000bbdfffffffffffffffffffffffffff
% ffffffffffffffffccff4400bb4400000000000000000000000000000000bb99bbbb000000889988
% 998844cc44110044bb0000ff0000bb4444bb000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000880000dd660000bb440044cc0011bb0088880000998800ff0000bb440044
% bb0000ff0000ff0000ff0000bb440088880000000000000000bbc444444444444444444444444444
% 44444476ffee995500ff4400bb4400000000000000000000000000000000bb8811ee660000bb4400
% 00000066ee880044bb0000ff0000bb4444bb000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000033998888aacc0000bb440000cc55556600aa880000888800ff0000bb440044
% bb0000ff0000ff0000ff0000bb440088880000000000000000bbbb00000000000000000000000000
% 000000226600000000ff4400bb4400000000000000000000000000000000bb880044ff440088aa00
% 0055220011dd2244cc0011ff0000bb4444bb000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 0000000000000000008800000011ff4400bb440000774422000077aa0000886600ff0000bb440044
% bb0000ff0000ff0000ff0000bb440088880000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000000000000000000000000033ddaa220077ee4411cccc
% aa33447744990000cc9988ee3333dd7711ee881100000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 000000000000000044dd22000022ddcc4edd770000ddbbbb991100997755880055ff5533ff770011
% ee8880ff3333ff5544ff4422dd8811aa991100000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000003366224444660000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000009988112266330000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000001177887711000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000044333333000033440000000000000000000000
% 000000000000003333000000000000000000000000000000000033440000000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000000044660077ff1100dd880000000000000022440000
% 0000000000000055dd000000000000000000000000000000000000663300000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000000bb000044cc665599440022442200002277994433
% 0000001144330000bb00440000000022440000000044442200000000bb00000000ff4400bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000bbbb
% 00000000000000000000000000000000000000000000000000000000000000000011000000002200
% 00002200000000000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000044bb000044889988554400dd88aa88006699bb8888
% 000066bb88cc3300bbbb88bb0000889988bb0000bb8888ff00000000bb33000000ff4400bb44
% 11444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444441100000000000000000000
% 00000000000000000000000000000000114444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444330000000000000000000000
% 00000000000000000000000000000000334444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444400000000000000000000000000000000000000000000bbbb
% 0000000000000000000000000000000000000000000000ff884400000044ee0000ff110033779977
% 3377999b88ff00000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000007788000044889999444400001144cc000044880000
% 0000cc0000000000bb1100bb0033990000775522aa33006600000000aa66000000ff4400bb44
% 44ffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbff4400000000000000000000
% 000000000000000000000000000022aaffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd77000000000000000000
% 00000000000000000000000000000000bbddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbccff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000000000000000000000000000000ff000000000000ff0000000000aa440000
% aa44000000ff00000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb4400000000007788000044883344444411aa9988dd000044880000
% 0000bb0000000000bb0000bb0044ddbbbbbb55002288aa9911000000aa66000000ff4400bb44
% 44ff0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 0000000000000000000000000066eeee774444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444455bbffaa1100000000000000
% 00000000000000000000000000000000bb7700000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000000000000000000000000000000ff000000115555ff0000552233cc773333
% cc77330000ff00000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000044bb000044880000444444880000cc000044880088
% 4400cc1100334400bb0000bb0022bb0000335544bb00006644000000bb33000000ff4400bb44
% 44ff0000444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444440000ff4400000000000000000000
% 00000000000000000000000022eecc11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000077ff8800000000000000
% 00000000000000000000000000000000bb7700224444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 444444444444444444444444330044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000000000000000000000000000000ff000011aa0033ff0033ff4400bb440000
% bb44000000ff00000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb44000000000000bb000099dd0000bbaa11bbbbbbccbb1100bbbbaa
% 000033ccbbbb1188ee9988eeaa0066ccbbbb1144ccccbbaa11000000cc00000000ff4400bb44
% 44ff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff4400000000000000000000
% 000000000000000000000000bbee1100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ff44000000000000
% 00000000000000000000000000000000bb770077ffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffbb0044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000000000000000000000000000000ff000088660000ff0000bb4400bb440000
% bb44000000ff00000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000004444000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000664400000000ff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000022ff660000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000dd88000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff00000000000000000000000000000000000000000000bbbb
% 0000000000000000000000000000000000000000000000ff0000bb660000ff0000bb4400bb440000
% bb44000000ff00000000000000000000000000000000000000bbbb00000000000000000000000000
% 000000000000000000ff4400bb440000000000000055330000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000022550000000000ff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000066ff220000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099dd000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff0000000000000000000000000000000000000000000099dd
% 0000000000000000000000000000000000000000000000ff000088990000ff0000bb4400bb440000
% bb44000000ff00000000000000000000000000000000000000dd9900000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff0000000000000000000000000000000000000000000066ff
% 2200000000000000000000000000000000000000000000ff000011cc9988ee5533ff7733dd881133
% dd88110000ff00000000000000000000000000000000000022ff6600000000000000000000000000
% 000000000000000000ff4400bb440000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff0000000000000000000000000000000000000000000011ee
% bb00000000000000000000000000000000000000000000ff00000000000000000000000000000000
% 0000000000ff000000000000000000000000000000000000bbee1100000000000000000000000000
% 000000000000000000ff4400bbffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff4400bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000055
% ff99110000000000000000000000000000000000000000bb44220000000000000000000000000000
% 0000002244bb000000000000000000000000000000001199ff550000000000000000000000000000
% 000000000000000000ff440033444444444444444444444444444444444444444444444444444444
% 444444444444444444444444444444444444444444444444444444444444444444441100bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000110000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 88ffdd66444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444466ddff88000000000000000000000000000000
% 000000000000000000ff440000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000bb44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000889988aa660000000000000000000000000000000000
% 00000000000055ff0000000000000055eebb88998800000000000000000000000000000000000000
% 000000000000000000000000ff1100000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000001100000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0044ccffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffcc4400000000000000000000000000000000
% 000000000000000000ffccbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbee44
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000022ff000033880000000000000000000000000000000000
% 00000000000000ff0000000000000000bb880011dd66000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000bbbb88ff9999ee00
% 0000000000000000000000000000000000000000000000000000000000ff11000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000002244444444444444444444444444444444444444444444444444444444b444444444444444
% 44444444444444444444444444444444444444444422000000000000000000000000000000000000
% 00000000000000000044444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444444444444444444444411
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000011ff660000220011662288440000228866000022886600
% 00001166771100ff2288330000000000bb880000cc88000022886600001166771100225577110000
% 115566110011661188330000552200003355330022886600000066337700000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000660000ff44006600
% 00000000000000000000000000000000000000000000000000000000000000000000000000004400
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022ff22000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000443300000000000000000000
% 0000000000000000000000000000000000000000334400000000000000000000000000000000
% 44ff0000ff000000000000000000000055eebb220000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000066ffaa22000066ff5555ee44227700aa88227700aa88
% 0022990077aa00ff6655ee0000000000bb883388cc1100227700aa8822990077aa22aa0033dd2200
% bb0077bb2244ff6655ee0033ff440044770088227700aa880055ff669900000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000110000ff44001100
% 6633770044446600116611883300003355330000116677110066337700552211662288440066cc44
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ff88000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044660000000000000000000000
% 0000004400000000000000000000000000004400006633000000000000000000000000000000
% 44ff0000ff000000000000000000000000bb88000000000000000000000000000000004400000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff00000000000033bbee330000ff0000888888998899888899889988
% 00884400112200ff0000ff0000000000bb99bbbb0000008899889988884400112288880000998844
% cc0011bb0000ff0000ff0000bb440044cc441188998899880000ff000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000000000ff44000055
% ff669933bb00993344ff6655ee00447700880022990077aa55ff669933ff4466ff5555ee4444bb00
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ddffdd000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000bb000000225577110022330022
% 440066cc4411662288440022330022440066cc440000bb000000000000000000000000000000
% 44ff0000ff000000000000000000000000bb8800000000000022886600001166771166cc44002233
% 00224400006633772288660000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000033000000aabb0000ff00008888bb44000000bb44000000
% 00bb4400000000ff0000ff0000000000bb8811ee660000bb44000000bb44000000aa880000888800
% cc5555660000ff0000ff0000bb44000066ee88bb440000000000ff000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000000000ff44000000
% ff0000112222998800ff0000ff0044cc441100884400112200ff000000bb4400ff0000888844bb00
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000033ffffff330000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000044bb000022aa0033dd2244bb0000
% ff0044bb0066ff5555ee4444bb0000ff0044bb000000bb330000000000000000000000000000
% 44ff0000ff000000000000000000000000bb880000000000227700aa8822990077aa44bb000044bb
% 0000ff0055ff66a77700aa8800000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000006644000055bb0000ff0000885588aa00005588aa000055
% 0088aa00004400ff0000ff0000000000bb880044ff440088aa00005588aa00004477aa0000886600
% 774422000000ff0000ff0000bb4400220011dd98aa0000550000ff000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000000000ff44000000
% ff0000118844888800ff0000ff000066ee8800bb4400000000ff000000bb4400ff0000888844bb00
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044a0dfa0440000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000007788000088880000998844bb0000
% ff0044bb0000ff0000888844bb0000ff0044bb000000aa660000000000000000000000000000
% 44ff0000ff000000000000000000000000bb8800000000008899889988884400112244bb000044bb
% 0000ff0000ff00889988998800000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000044bb6655bb330000ff6666880011ccccaa3311ccccaa33
% 0011ccddaa3377ff3333ff5500000033ddaa220077ee4411ccccaa3311ccddaa3300997755880000
% ddbbbb991144ff3344ff4433ff77004477449911ccccaa330055ff550000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000000000ff44000000
% ff0000778800888800ff0000ff00220011dd2288aa00004400ff000000bb4400ff0000885544bb00
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000077880000aa880000888844bb0000
% ff0044bb0000ff0000888844bb0000ff0044bb000000aa660000000000000000000000000000
% 44ff0000ff000000000000000000000000bb880000000000bb44000000bb4400000044bb000044bb
% 0000ff0000ff00bb4400000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000001111004400000000ff0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000033
% 662244446600000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000000055ff88220055
% ff550055ee8888bb5dff3344ff44447744990011ccddaa3355ff550033ff7700ff6666880011ee88
% 110000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000044bb000077aa0000886644cc0011
% ff0044bb0000ff0000885544cc0011ff0044bb000000bb330000000000000000000000000000
% 44ff0000ff000000000000000000000000bb88000000770088aa00005588aa00004444bb000044cc
% 0011ff0000ff0088aa00005500000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000011ff0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000099
% 881122663300000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ff00000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000bb000000997755880000cc9988
% ee3311ee8811ff6666880000cc9988ee3311ee881100cc000000000000000000000000000000
% 44ff0000ff000000000000000000000044eebb888899aa0011ccccaa3311ccddaa3311ee881100cc
% 9988ee3355ff5511ccccaa3300000000000000000000000000ff0000ff4400000000000000000000
% 000000000000662200000088ff000000000000000000000044884400000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000011
% 778877110000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000007711000000bb7700778800000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ff00000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044440000000000000000000000
% 000000000000ff00000000000000000000000000006644000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff7644444444444444444444
% 444444444444c4ffcc772288ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff444444444444
% 4444444444444444444444ffffaa6611bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000448844000000000000
% 000000000000000000000044bb0044ff444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444444444477ff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000553300000000000000000000
% 000000000011ff00000000000000000000000000225500000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ffffffffffffffffffffffff
% ffffffffffffdfffffffffbfff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ffffffffffffff
% ffffffffffffffffffffffffffffffeecd7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff44000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000448844000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff7644444444444444444444
% 444444444444c4ffcc772288ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff444444444444
% 4444444444444444444444ffffaa6611bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444411000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000663300000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000007722000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000110000000000000000
% 00000000000000000000110000001100000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000110000000000000000000000000000000000000011
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000229900000000000000000000000044ee0000ff1100000000000000
% 000055eebb8888bb8800ff1133dd4400000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff8844001199998888aa880000
% 000000000000000000000000000000000033dd44000000000000000000001199888888bb4433dd44
% 00000000000000000000000000000044ee004488ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000077ff11000000000000000000000000ff0000000000000000000000
% 000000bb880000005500000000bb4400000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000000bb8800000044880000
% 000000000000000000000000000000000000bb4400000000000000000000cc77000000774400bb44
% 00000000000000000000000000000000ff000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000044333344000033
% 44001177553311000000000000000000000000000000000000000000000000000000000000003344
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000000000088aa88000022330022440000115555ff0000552200225577110000
% 000000bb880000330000552200bb4400002288660000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000055ee0000000000330000
% 225577110000225577110000115566110000bb4400228866000000000066ee00000000005500bb44
% 00225577110022330022440000115555ff000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000004466008888000077
% aa22bb5577ff44002244000000000000000000000000000000000000000000000000000000000066
% 330000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000663344dd000044bb0000ff0011aa0033ff0033ff4422aa0033dd2200
% 000000bbbb8888aa0033ff4400bb4400227700aa8800000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000088bb0000002244442222
% aa0033dd2222aa0033dd2200bb0077bb2200bb44227700aa880000000099bb00000000000000bb44
% 22aa0033dd2244bb0000ff0011aa0033ff000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000bb00004466000044
% 77666600009944227799443300002244220000003311330033002233114400000000444422000000
% bb0000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000000880000dd660044bb0000ff0088660000ff0000bb4488880000998800
% 000000bb880022880000bb4400bb4400889988998800000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000088bb0000000099aa0088
% 880000998888880000998844cc0011bb0000bb44889988998800000000aabb00000000000000bb44
% 88880000998844bb0000ff0088660000ff000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000044bb00003388222266
% 4422bb551111006699bb88880000dd88aa88000099bbaaccaa3366ddbb88bb1100bb8888ff000000
% bb3300000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff00000000000033998888aacc0044bb0000ff00bb660000ff0000bb44aa880000888800
% 000000bb880000110000bb4400bb4400bb4400000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000077ee00000000888800aa
% 8800008888aa880000888800cc5555660000bb44bb440000000000000077ee00000000000000bb44
% aa880000888844bb0000ff00bb660000ff000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000077880000009988aa88
% 22002288bbbb1100448800000000001144cc000044664477448800bb1100558822aa330066000000
% aa6600000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000008800000011ff4444cc0011ff0088990000ff0000bb4477aa0000886600
% 000000bb880000000000bb4400bb440088aa00005500000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000011dd7700000088880077
% aa0000886677aa0000886600774422000000bb4488aa0000550000000011ee77000000113300bb44
% 77aa0000886644cc0011ff0088990000ff000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000778800000099999999
% 0033220000667700448800000011aa9988dd000044444444448800bb000011bb002288aa99110000
% aa6600000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff000000000044dd22000022ddcc22cc9988ee3311cc9988ee5533ff7700997755880000
% 000033eeaa2200000033ff7733dd770011ccccaa3300000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff00000011aa995566aa440000
% 997755880000997755880000ddbbbb991133dd7711ccccaa33000000000033bb996688770033dd77
% 00997755880000cc9988ee3311cc9988ee550000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000044bb00000099aa88aa
% 0088880000557700448800884444880000cc000044444444448800bb2200777744bb000066440000
% bb3300000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000ff000000000000441100000000
% 00000000000000000000003366224444660000000000000000000000000000001144000000000000
% 0000000000000000000000000000000000000000ff000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb770077880000000000000000000000bb000000887755bb
% 0088bbaa88bb110000bbbbaa0011bbbbbbccbb11bbaa99bb99dd00bbaabbbb1144ccccbbaa110000
% cc0000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff0000000000000000000000000000bb442200000000000000000000
% 00000000000000000000009988112266330000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000002244bb000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000004444000000000000
% 001100002200000000000000000000000000000000000000000000bb000000000000000000000066
% 440000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000001177887711000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000055330000000000
% 000000000000000000000000000000000000000000000000000000bb000000000000000000002255
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000088bb880000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000066ff110000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000099dd000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ff0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000ff0000ff4400000000000000000000
% 000000000000000000000022ff660000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000dd88000000000000
% 00000000000000000000000000000000bb7700778800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000044bb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffff0000ff4400000000000000000000
% 000000000000000000000000ccee1100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ff44000000000000
% 00000000000000000000000000000000bb770077ffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffbb0044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444440000ff4400000000000000000000
% 00000000000000000000000022eebb11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000077ff8800000000000000
% 00000000000000000000000000000000bb7700224444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 444444444444444444444444330044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ff4400000000000000000000
% 0000000000000000000000000066eeee774444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 4444444444444444444444444444444444444444444444444444444455bbffbb1100000000000000
% 00000000000000000000000000000000bb7700000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044ff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ffbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbff4400000000000000000000
% 000000000000000000000000000022bbffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdd77000000000000000000
% 00000000000000000000000000000000bbddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbccff000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 11444444444444444444444444444444444444504444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444441100000000000000000000
% 00000000000000000000000000000000114444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444330000000000000000000000
% 00000000000000000000000000000000334444444444444444444444444444444444444444444444
% 44444444444444444444444444444444444444444444444444444444444444444444444444444444
% 44444444444444444444444444444444000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000443300ff1100000000000000000000000000000000000000
% 0000000000000088ccee660033440000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000044660000000000000000000000000000000000000000000000
% 44000000000055330055ee0000663300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bb000000552211661188330011662288440022330022440066
% cc440000000011000000ff000000bb00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044bb000033ff4444ff6655ee0066ff5555ee4444bb0000ff0044
% bb00000000000000002299000000bb33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000007788000000bb4400ff0000ff0000ff0000888844bb0000ff0044
% bb00000000000000008811000000aa66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000007788000000bb4400ff0000ff0000ff0000888844bb0000ff0044
% bb00000000000000553300000000aa66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044bb000000bb4400ff0000ff0000ff0000885544cc0011ff0044
% bb00000000000055330000440000bb33000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000bb000033ff7744ff3344ff4400ff6666880000cc9988ee3311
% ee881100000066ffffffff330000cc00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000044440000000000000000000000ff0000000000000000000000
% 00000000000000000000000000664400000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000553300000000000000000011ff0000000000000000000000
% 00000000000000000000000022550000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000044884400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 17.000000002980233cm,4.600000002980233cm tmpPSFile -o
%+ /var/folders/45/rt15lwvs41s06_d6c5bjdr6h0000gn/T/latexdraw/latexdrawTmp155888931263436186/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.05.26:1748
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMTT12.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMTT12 known{/CMTT12 findfont dup/UniqueID known{dup
/UniqueID get 5000833 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMTT12 def
/FontBBox {-1 -234 524 695 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMTT12.) readonly def
/FullName (CMTT12) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch true def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 66 /B put
dup 71 /G put
dup 77 /M put
dup 83 /S put
dup 87 /W put
dup 97 /a put
dup 99 /c put
dup 101 /e put
dup 104 /h put
dup 109 /m put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 120 /x put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE32340DC6F28AF40857E4451976E7
5182433CF9F333A38BD841C0D4E68BF9E012EB32A8FFB76B5816306B5EDF7C99
8B3A16D9B4BC056662E32C7CD0123DFAEB734C7532E64BBFBF5A60336E646716
EFB852C877F440D329172C71F1E5D59CE9473C26B8AEF7AD68EF0727B6EC2E0C
02CE8D8B07183838330C0284BD419CBDAE42B141D3D4BE492473F240CEED931D
46E9F999C5CB3235E2C6DAAA2C0169E1991BEAEA0D704BF49CEA3E98E8C2361A
4B60D020D325E4C2450F3BCF59223103D20DB6943DE1B57D05DA0555DF933BB0
7B42D264831116C06C79335D519461E7B0E870A6715E3D74A08D1BCF86E3BCC3
A43FC6BAD1C68BD9D4AFCC06D845FD1F1E70D7A47F0BBCAECE8396E04591E5E3
4797F646AFEEB7DB548183F0B74C9BB6BA2AA04E7F5950EC8AE97C741D4B2C5C
A8E7A8DF5A36A30B5A7592D95E1DBC63EF33C92FE459792CED29E2B8B6919251
75EF62089BD7D44A6E1F9B62EC802FBE62B821DA1C3B2DDED45D27964AD29ED0
9FB7868F3A8FEADA87A8E42D52C1EB7229D7C79B60BDA263F2BDB025AE14A507
098FA274206BACFB4A0A7257D5998EE8F0FDCA79CB61DD1FC59DADD11E16BF02
ECDFD706CDA1E72054D4EB55AF7BA9F19955886BC0BD6E0E3FE3769C94AF3581
DFB2BCD67FE2892AF07E858A01280194D8DD7332B3D0A585C87FAB056C2EAA9B
5AD48D1C9F00CEF8EF0D1408DBE1C03D04B231D7B8D5D998FE0CD7EE19828EF2
F988EBF6DDBFEE00F04A4A1F4E1A55DED7EF3AACEAB5005F1962C724A017C914
2936E2E0DF26A55ACD7DD836C6035CBF07981C1BCE3615064F0540A1034C69B4
E3908E76EF8925D486DF0B4A8E1F02D8AA99585A7C31847AB9382F83880C1C21
C496AB2DF8E7BD4643B28B704B5F6B53429D3EE940A79135F5BF0396E5B46F23
42AF406C26D12BEA7A41F332AEB75DF43C15334CF4651A99F602036946B1B91D
4BB0D2E51C20216D892C8173241AC8FD15A37C3CDD8AB4FB67D8565AFA61C068
95E3D6E46D7C09BBD09428207D506AD43C693F3C3D787F6A5C39084AE45E81C9
830900DB50DAD10A17E118FB5E9680B5194716A788FF7514A1167DD1A305FBE3
FC1F39A39F5613D50934419B95A4A2FE1B6C18912CECB86726926F6B77B5C3AF
F38F85F974A2D2145BE010EBB4A390B842BC222AD4A0B7FDD882668C04C51F19
13FF91E7CFA0A0F4E99A1944B272E0291BBF3F9ADFCF3F625B87377AFEBD9F11
6385726E908BAB7D1357504048C0F5B26251A1FA52F08BAE1D64B9FC32A684AE
896F3DD0AAE9624050D4DFDA25E581FB2630E8840AC5322D38B92F3E77B55CE2
91ACB8321BE53A2C7D274D63CF0C68AC833BAF4B22B26EFC197D4A893A5AE492
660D995DA9294C16BED1113CBCC18AFCB5968175EE2FB374B1AA261F22CD75F6
6E7295A254FEFC41A669A86933F8B05B9236B04C3C0C757CA37AFCBF3B888D79
18C6D6AC4FB340CB49861F7EA05779AC00EC862AF354FC6CEB056DA1425749E4
65FAADFA4BF3FB3B89E6A2912282FAFEEBC0E4392B98B7E04EFCC1CB228E6250
CEC9F15D1C9D4D6ECC0B3931053C1A5E17B97B8C462CA04C6EC387C3BB9C84D5
6E5BD5D7BA19DE758666819C6E5D14FE5B6C7EFD8FF44DA7D8EEC356FD0D4DA9
484CC6C201DF87F071278E5CBAC766B6F3FD54E1039780E3C56D4978D17EEB82
9512C6CEEB19910946295C41D1D97E5BA6DA0441B9D6A69148FB24266CF1107B
0C393C5083E81BD17C6A14C51539723A4D2B84A47E7E0A76ED75036FEDB1478C
C47950D3C00E421D5DE42D4EF0A4112D3DB34212C4AC0801E0E025EC4BC64A26
C0A0495B977A054DCC9841CA5299D8C358202A7EF1C4FF05FCDDD8D04D8E7507
9EB16991D431CFAB930D8CC9EC66930E5588460136D286797857FFCE854F9003
194107A4C5B567E301C427F3DCA7CF09B283016DECC18D83201B17D23F6F6517
3CEB34E57826775825508F5CFB7BD1338F15E0A5F667EB8AD599A65FE5B94534
A709FAD99B5B4A5B4AABC9F5E843F762B48DD56963C3D9873D8D093AEA6CDAC0
34175D78198B94DE273A2351CDE421573826465D0903AFB6EDB267F9A530EA33
A4CA9FD654F21366B6E9619F222E14B22E09AFB312986143729BED3B3464DAC3
32D537AC72E5B74290DE5615C9947DC66C75D5C62E716B53E185045E7CB13283
360962C1CC2B1214A7B7CCA67E71C8A9ECBA90C8BD6DA92645B9EDFB1651B87B
49435DAF9EDC6A6AFE26624435505422203E58869D8B0D93715BD5486C1F5DE2
7658FAFDB524B6968B2172456F9852F5492B653FEE0D83143AE233E6FAAD3FD1
5CDD7E507ADC0AA2B0E9028A6379E2A4B4F511522241DD4C3C046869C40CA5BB
AAF53CBD88D316A19F8F8E79CC382830E4F2AC7BC9A05199450527D7DAFF3F42
331B6848D61BC1E0D8DF29FB995FD983DB5368F925BDDD8128B34F63B48D710E
F5DE17320F7018FA19F2DBFB0A56629DBB77FBA425313BAD34DD6C03630803E4
0DA302565CDE44754768A5B4943F7342BBEDB4F9205364E290C168F1E4490D53
1F840A3D2076640C25D2E440C7A524A54BC2F2ABDEBB84744BEB1AE1AB666320
66A89CD5A66491FD2E99F5DB7DBB413CBC76F2CD444A68B2862252AC65950C7E
A67441A95473B2D7E0C0869EBA5F55278B02E8CDC75FD8BBDA154BFC93483B65
E22CE1E01CC5AC7E67495CB4AB5C66B586A32FF46CCF6070FE061F706AE4169A
15F4FCDE2880C4EFDED5BDBD1AD132511D8151DDD898246B073F36DE6A4F3072
591970F18D749724E3EC8491CF14050AB16F014DB6F0FD864DBDB4CAEA57275A
3161FD9FE8722755C627AAEC2515CF2D38689A3D3CC00DB96275D63A46100632
8549D801D24809165CD0B96498509A73C24BF5E876F1FEE5ADE98258F19AE58B
6435EE533768A51B56C43C75ACADA0EA6BFD236842D60CE1CECA9E6C93F62E5E
348AFFE9A4A2A29D7DC90913F79B947C1770B940F3418D9E73EC17C04C322097
0788132CEC07CB442E30D744D1B9238F930988756CE3402AEBE70697EC75E98A
1EAE984B6BC926DF033B5AE872F58485B9B2F9029754ECE91B5E725294466463
1CE9420FDF38D68780F4B90DE3FC3C4067B30F48906343960D6A5DDDABE60E62
228D182573E71C9C996883E67AF338578C6BB533651706CFFECBFF2E6ABDD4ED
F2E8B07CCB055EE1A648133B2F166FDA22E38A9A5E2601D170BA9CAC25ACE93A
A4FC35563465CD30AA49F5DB3C5784D0F039F446E92CAC77DDFF52C1E6F232D8
B3066E6848FEFA9B720E311076BCD94BBE4769E99EF964C821B199B3141912DF
F16D39B2F57ADB16658FE06497494EA3FD7111A9FB0486E25FEA7F08EF3BC063
E38A31A391D1DF813456631FCDBBBB70F9E3D14ED457595DE4273E118CC378B5
9B23A581AB884DE56FE0E2D8E81F6C96173A442778041A6E05176EB93FDB0EBF
5DD2A670BA1A8E2D223F19D0415263593A893DCCDC0C66AF2B740CBD5995FB9D
6252309180CE2C40809041C06661D06FEBA7407B1CF68A614217BA32A8C66E99
F4A05B759732B0AA259C593B2E5BF88E2DCA1333897F1C7242FE5C6E93E4CB24
4C09F255A6BD50257541FA3B03943E798E9AE359D5DC883B9320716757276A62
5C9E71E8DF4EC96EE66980AB6CF39FBFEFAD33CD8E77649A9EFDEDC55F266842
ECDCB89915B4155CAE744D94081C78159DC1AECB3F967DA81B31E770EA595F01
974AD77340216F645E56964FFC74946B55F3D7F6D1706473FDEAC1FC089EACDB
88F80734E7787D06869A97F24EBA5DF77B160AFAC9E55F8AE312322F5712E48C
D8FBDA31D06E015BD0DDAFC2374548235F525D793E6FF606190DB49B0B0512B6
6757A1DFE3E0E54F41017FD71D78B0121D976AAFEE9955C7E11113BA363DF34F
3296F48423A78B534426252C7118027FC9483F3BE40FEE8D2557DB4B70124113
516883C1BE4E486B50A0617E70C8B0658B6FC285F5B606C2DD35E5FE9DE47873
F6FAC9026219F0AE2BDDD8C011714825FA6E67942CEEB62EDBD6BBD718746CFE
AF186B9198629B4B66D05CD0D02FAD74E53A82079A6CD31722153C6853B28658
6DB790C77D8280DD16E954B81D55D92B8EEAB6862A4233DABD672A7EFB9A7A02
71AEC3925CB5BE7BF7258ED5EAE2F6FC5AC6D0368283E03EF4B04116FA41ACD2
30B1E0CEE763D2A728717F8F70CBC2B47B734E69A86AC94A37D1CF395E18C460
0F9EDD67DB65CEEB9503AF436533F688DED855C1CE6FE0FCE96155F49EA22A83
297768A79AF60626FAFE34642BF9840577CE4D4B22ECB40E2C9F852D9C2348DB
62871A42B86AB2100EC120C0A579B0DB6B0AC1C7EFDEC738A442E4A25F9A3D74
162C8529447C926657F61B85EE80E9C25F3C6083D9A498AE12EA897785DAD392
67DD4024A160D76A7DF557541AFC518E88B943B2AA9B30B3C5F061C51FFAF714
F1ACAE8ABB2C92A55AC8303CEC34B4108041422146AFD2589CEF69C9D040E031
74BB2CE67C51B6B366A70E44D59CBD2EAE552FC79EBCDD180CE5815B756B4CD9
096F80B49CA3444C2861710C8075AAC3712829E4A4C252A4824CC1DD5C5BB7FF
8ECE5CAA35B361B6DB3F9EBBDB17D8A450B17C151ED0C623F66CFFCCDDAA0FC4
D512990F4B504231024F11D28A5B090C9CC3D7FDDF41030834AC53CC949F6E13
32C89AC35DBD395244264AAB6B8A344D6F52F105924F2C1BF872487266D5B6C9
CB2F8B5AE583F8303DB501CBC80766DDC6347D4D7DBF99DB8E58C4EE820DC37A
1D6E030E9033BFC21978EEF87AD50F571C0E1DE21AF12C1240C5DADE34C8AB2B
848A37E4D9A574DB32CA853F86841D0672C302FBAD43A5351F9C691DBC4BA882
58C861F3F400055B743914E8ECE813EA75DD6EB507C6EF92367D9EB08E0EB5D5
5D406C8E34A398136620F92E13A028908FAAAE2275DA40238BD1BF86BF96775A
5ED20647CB48E15DA2C4479BD8B2CF470A3CCD272E8A5BC5FE4533CC5AF68652
E03618F90BC44A1B746DBA27FB47C8779892BF9F100690B9405C63AC10D7BBF2
F7AB2EF9A5D68CC1BE88656A355248D42844D8080F15EE10AAD25FD9D9C38176
CC221019684955145A51FE4644436853B2922BE739A39C037CAB49602AE32588
EBD94DF91A43CB43B756C3FBA57B7930D6CE2360FD966BDC27555760D725DADF
9EF9B62E6C0A8C6469F42152271457AEDBF2FCCC95DC3ABEB1EF8C47AB7835E6
343872FBFC985B0879481D8CC0D048E53C93EA597020205F11D13D2CDEEC0EDE
F6E9D2E4DF657F17134A3511FD9309D2B6AABF345D2B6B421A3C81D723FF29DE
63B6EBBF0B1B9E77E2D4BADD1622E2272ADB7B14681A7B04C71C84381C6072EE
FB278831D5AB82128FB9EC6FA7403EB356CF7346B8336323E92A905543EA8CF2
2C647C9A5EF2F3C015FD07F901BF5F64F24C72A2A2946B9C23D458C928A81E77
FAFEFD251B8C621DC215C3EC0D441815C8008E9EA8E10FCE4919CC92C142CC33
8CA94B6491803D3F0A28CE16
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE5BEEAF327694DCBD37D0F25A4455
CA1483842C7EC50271156B4EF9FCABBAB77FC44F0A45292B2CB9C7874C114F57
A185C8563C2D5E37C2128C874FB154C50F3E6E2CA996865878EBEEEAE799E3F0
B9CEB22C9CF2337EAB4F702119EA2B28A2CC54B4C09D2633BE30E90ECFCE19F9
E8165A27B9001E6ADAAB863ABBCD2BE8B830208B9482EB668E707C52E55E9A4E
F17162822348ABED2AFCA2E758C58603B7CCC9E4C9C9CEE1C2543A0B3576F854
8980A7B213CC2602E7B133FD91691C91FEB76E96D4083A6185D3295645CBD141
7913FE8919DF0263DAC834577ACD7E67742EA956E85DB94B0F94E41C9EE94B2C
E2D3433AF6815B48351874AA23197A4B6177A0DEC633BC444468AE738011EF30
BF68A18BE9EB710C0C4158958CD6707E3DE6C99E7B22C9B86EBD507826AE3C49
3B467D4C182EDC43B7551405091A434A3A19CAC124561650FCC4B0F0FE41F2D8
847358A6856E3D6F3B11C1F343EA1AB3E596E20D63DA5312AE94EF917D9DB156
96E17035899FDB03EE0641A82F21FB94C2D83DB8D42A9E6C43BF0B5B58DF7D79
4E0557D90085D8AFC0EC6F43B313FD8B3F70D60A142980C851690AAEAF4A1EA9
649BB287AC03A02AD94BD1282D0003D149F5A121965CFC7B2CB60EAD24607F5C
5BAEAD71201EDC8950A211471C6735F2E4903C3D9E96E3E09612F99B100345D5
3EDC134D23DCAC11C9CC925E6B4450D61534122A2BAFE84F9E953A94B2BAF47B
290A01263D432868618263B265E238F5DC64BA853136039B860E4D93545F2D0B
99109EC2F485B5A85B7AEBD47B97E254311609CD137751CE86D4E2DB76077949
3281EE8CBA131374CD581E9B89686B7A0422580B42D2B27B8E85E65455814D5D
BD5EE1D3FB6D4EA9DAD431B6351CD49083ECE95261DAAC6086A59517A44FBB8C
26086186A053A4F0F75579ECE1936FEB3C46149D516BE13FF76CE012AB7F34EA
9F6DC33204C952B194E04005000072C1658B6FF324C0FA36617CA186D413D7FB
DE7A1DE16C177B128893D0DE2309C3452EFA11B131B70FD5D05D190CF071930D
475B10F5690FB31AFB3808A455B2D5EBF705993EA37E0CA259E8CE9CC17B9EEA
FF066BB99D11835C3A1BFE32AA1E5306A19979C332DB99C17A6E747DF03F72AC
81247E41F0CCA86C0A28DED6A482790976E4736CFB0F9AF5A1E173349FA81237
B6FAA904C7D7AE64BD7BF0F1F98B05E335BAED5FF413EDF25A885AA83D4449A1
5293BBBF5E9AA49635781F71944DC651CF22D9BE6B1B853E29539A0719C4BC7C
914CEDB6066B412F0FE8FA5DE3C26AE3AD05EB0BE336707CDBFDB3C6668F3552
58EFD368AA41728F9012B707F5B801D0AD1423D2CFF6FC703298F550FA314ACA
8595F80F4CE06800EBB56822516CE2A2AD590AE132F91E1E18C6A4CFAFE25167
3CDFF3EED771F7176073EF95A5D247A11BBEBAF39C4BA3E4C6BAB61F4A6D29D1
46DD24BFB42BB7DDD62CD3D8205C45488D0B1F7C9F35F565FF0CAF60320BFB71
A889E9D3E6301F8D9DAEDDE055A30DCB0AF7C988ABA588770638D3F10737BE8A
F5BF97FD1900593B9168B6CAC4E3CD2D3831B0C8BC5A8612269C343D6FBC7D5D
5D09AEC987234CF8E41132757808568998057B351C6FA997F1295DECE27656A6
906C8B5C66FD5D5AFBE2E98343CAC6756EB9DE80A7FB2D508FB6F7B9C99ABD14
229760B11060926A3A29E96FB9F5A800B4C96B22CE70A4DC0067FA56CBEF8CB4
B4DC5219EFD387CB647AE6504ECA7DD3756E1428B50AB2F33D65E7E7286732C8
3CD2D68EC6563CA73B0BF0D53BC5CC5DE889C15C8E1887C8317DDCF3E6A1999B
444C14629A22823CB41AD036956FDD15ADA416658F341EFDD439C03A1617B564
19668EAD90E43E382AA3BBE0CD0C2BA6A6778581AA72EC3A0092EDBBBCD464F0
19782C375A163F1596AD20F45944FC9D58D4869DB8F4586EEB746E6844353265
05652F8ED3E1A07479CAB21BC93B2109E15AA5AF51667E7EEC450B98D58E458E
3A8ACCFD08D36C71825AA47137DC71DDB000A203DB203C3191D644CA95E7A498
0D82E503891BABF5EB5BDA15507DDDD85DA4ECFFB9B9ECDF4A55D5E3A22AA212
BE036E98B256E2293299833229CB814E449D98B39F000F922BCE8C297E4E0ADA
AB69A49F4499066BCDDBD6A90DADFDC11833C93331350147C2A6074B263DFB6F
E58624564DABAC8AEF9BAD4E14D9CBAADF8EF93A933795C0CBFB7204DC67246B
62E07D5926E15A353FC43677F1C40123665274A7B8E0B769053BED7A98D94AFA
8EB20A52DABAF7035C052C692FFDDECAAC1867B6EA2F20064F09F1E98119F306
CC5F26233F411368B5F33484449842FE797BA2E00DC9CCDAF17C6D2EB1B8D654
DBF2EBC0A69F718EDC68656DACFCC0D189005303C5707482885E9BFAEF383D70
99ACFBA0B490F71EAD262369A898CD4139CEA7268AF9BF9A9A48354673B9ADA0
CBD151A4C10B7F36AB6D11677DF952C2D476DE76A585CC2F1E1BBA7B64E68CD0
F58CE1D60E5891AB5BA93B1B72117A684570CF6C8FDB960B9CC6E9435D6577D1
CFB71B518367724E6A7662499EA3FCC278B616531C0CB5BAD0F5FEE75FE714FF
F3D54D09C9747ACA01CEFD260C27C979F5CFB9371D3FF527C5B59A59FE5C3360
A0CEF5A6B7BA4694F804EC6DC2182FDE51196F72328E5CA1B2CA63B0552D00C4
D311497E9C69675C762BE021D92F6364B3989FE9F67AED016A73BA0F922A7A8D
AE7875CCA19E45CF37D1AF3C701485F5A7186D5E3EF8271C8E0FBED141A005B4
6167A882367996E682923E24A5FDB684E13F71B6361ABCCF647A6F54CA96BCA1
619E363D1A051B0F3F0B2284165491492B01EDD3CC75B6504F372F65403B006E
0D63E9E9C148A6D9B144866F2FBD2DE4498459F36F0E21BF32E0B41957950ED9
ADA8C302445B27D8FE5FE873E98EEF621E059DF969C14E19E1CC7D24A16A39E5
8816C7A8483940BC8B05639AF860B0F399FC205E2CBFE98D32C976F944813985
249C9867C5F0970BAAFBB2C89B7439DCD3EB5EB435810E20C4E9693CDCA2BDBD
BB7D433C6F1ED82DDFA79D31F0B452FAF153FD4CCC1688220F5238A2193FA6D6
C34422C6CB4044D62D048B943D50B00875739B88A7D5F12B0707FC5AF167C4B2
41FDCE74B6BBDA619DDDFF7BA97CA61FB3AD85A822A0198E7CA2B9E222A2B3AF
D3EA56BE33BEC51EC68FBB91CBD4B81EF230BE31DC6E311ED91C6877C14D9696
6B41732F588CE0C01A14747C35D620E54B323D8A65A043C79C3BC76A90518F91
E1744AB85B990C3444DBFE7EFAB6E162491DCD9236472D6B63E10786B4C19754
DFBE0592D8C453C81E31DC424E008DC4830AA70034DA5C6455C08F0B2A72C9C8
C70821465DBA90BE661AD52A63710E39E25E36AD195CA8334B11A5B117B68D68
E96228E2CB783C1CB9BDAB6FDC5B1D1F36B5A72DB70B952CCBE0932BE0E31855
855865BCFD0A8CB4F0EE38C970B22B6E519D70DC24EF7022BE35AE0217C49385
999BF8DA87335280B2D0F83825B7F42EECD3D54BB715298618E070B4C1F346FB
77C0F9A7A9F49D86E379DC76E7C36A52A0998C4B2BA7ADB528460E21EF985D28
F16FEFC6007FE0002FBA6E0B7542F913AB460B0928946FB0B7110FFE5CB4A8EB
5B83BFDFE562DB6C7614A6DA31A19C0EA9464F3A34C873442C78C4E02FD654B5
AD74BC4A15AF127B9B661458E00D26F38DF12C57EC802EA27BD19EEB53F010EF
779935F24E4FE703F73E0D3BC72C72B9686958B177BCFF26BB519D8426CB0441
C6CD4FEA8E1A5F794A4DC92BF186068C71B851A7F85B6333C19C96D449C80173
86EB0C9E4399A7AFD8703D384864AF4B55F718A0AD08E1E3019BFD5218EBE795
78A0724621145BD32E407C0089818E3F827A82BFB021038E80C2D19D3683D4F5
6FDBB0B23C42D8D2624DBAB90FC92048A056AD709E1B99FA007A3FE1D373157B
6BB20FFC6835809F0A085586FED3FFF650218AAA6E6049B58ABC8918FC7C67E1
24A042844A08A7F989178CDDE926F2940F9DBE2F3BF63F0689C9203A5342F4A0
C6AC4E4E15345A4CDCD565D40CF21F90DD74D635520606A6BC978B65CCB6E8BC
FD8FDC542F20D5864807AE86831051F55FD1C3B0A09767B43E176BD7200979D9
9132FDD9A2C5D5A5C90863C06BA8B1BF9D0592E3EDD486DB3E31405AC422487A
8E9D29A06DB14CA1F713A8EA6A54D4D4D8A18B49B70483C37E1B2EDE3B4418CD
44C3FC0CA87635FF92F1140DDC78B8619DA47DA7550ECAAA8F63C6C2A74A199E
3D96128220F5E734EA2DE6F8CD4225EB94D4436925D9CD381E09AB94F1A92249
22B4A5C23593F8765E8127CA692702C7DA4FC76A3C64840ED949509C5BA8971A
8DDABD285F4BA6FD649BE24C9024E5A1348DC7B8A9D270F2E2D71D2B5EE0C3F0
3A603A161713216AF971E16AFDF885AFF1AB405004CA87B04A4E4465DAAD5E09
C3FB2954B19CB5EABD5C6FBB36FD7277D9ECB58F8095D33B831CB2F6B26209C2
EC2FE2F6DC233902D54DA50943D74F8CE27B8C4B6E8B4F05E23A510C26B3FE78
B565394E4BA5BA08543D8B5BF8C6D262FE5B24916FFEE9B0F2D1A3841EC520FC
9844B350CE6F8424DD8096F1971E274CE1CD02D148724B5412DEAE0EECA6DCA1
34C1DD2C21BF0E7CFE21A78632B55ADB08D45443A0FFF1B8AB391D6C0D91AADE
47999D31D9382AC9DF19BBB24F21BEC8E763FD74011FE46997BB461980E06965
E027B7007A06476AABC1FB3B68190DC902664D46B079B57C2940DF4E3299681C
63D41D8646048BCDF858FA68C606B0081117106FF5F62E92C3AED6DD500DD61E
99C04F85A6E6632BE26DEAE2BD37D24F2DE37D0E27C357934F2EE948B3C16580
17A0928BC883B8E76067314983D415861028AADD851711FBFACD0470F350D33A
C694DA7DCA8F8DACF03CB8AAF73775122C66EC72A73774870E99EED3D74C0EDC
41BDA6D8EB06A20E36C7E72EADA68F6A0DDC1BF80268E5088BDBE5E056B1EB34
6C615F5E30A79F2EF46AF98FF43B1D23ED27C5CA9C8FC97FAD356E02CC507E81
CADD7262FA3D6C437FE704F4293D1D7D5BD0405A163AC9894C524D7AB078DCC5
357E6ADF9AD8C35E6A43B6823C4E3D2E01A82E3A50C3275885620061EB2DF447
21229481673694A672BC6AE0FCA66760484CFF4BA51454712FDB810EA9C1CB25
B5CE6CF8F99399960F1808B44418CBEF101D95896B8F275D9423DBE3730633BB
053B59020B7278304CA777D89A005F17863E572A3411D94F83A0CDD93A92F67E
852DB3FA36EEA39B8FF07CEC6D1BB1410A5D47C251858AC5E400BC65AA6245C5
6915536946E4CDD77AC775F945CF1F96E80E3B5528D4D09E1B5E7C8F0837FE13
65B3985DC2DA7D7E68619337185BDEC00A6123692BC26D1DD0760142E4D55CE6
500A60AAD8F7A4CE95CDECDA92FFFCF7B2D6744C85DAE01A621E7007BC960EEF
1676C30FA433DECA6A99BFDA2796D62FD8134707B248D8E87419D0F801FC5BC8
3DDCD9BEE4B72C0E19461A79ADA32346C72FEEE1F4009F558902A2BB54E807F2
A23F7136C58EFB651FFFE551C2C6FBC48EEBD23F5FF3836048DDD07FABD96F2E
990EF52DE549A0A85025DE74A79BFC56286FBD511C388D8E5A1679DE7B5B440C
24318B26A2D182F72F8BAFF44F6397A65272902A535CC136845AD20B4BCB3B09
162E8A4FC6CD47CB3C36762702AF2150FD5F3EF53DE41F97F36F5C5432DBA9D9
E35C140B01DD01EC033C9F923DBBAAAB7B92BC284FE598660738E10E69FD09A5
8B6C80E2213F4DCD83CC0FCB4C3A73FCD8C44A4F9E5923183F4859341FBE5BFC
C7DAABFBA613A76F7C3E1FD80612BC54BB91C3927B0EA375BDF9A024769E09F5
63E92544DFDCAD08F2433ECD49F5F78BA9FB3DAA2FEBEDF72B621A736DA048B8
FFB78CB53BAC23802A8039FB55AC665A846823D2E41417CB5659F4A3CFC8C97F
BB17028902BCD28BE99FC267519C0658909F89D820F68648E9A61CC57BDE0D38
5104C7C0F9B173B0B929393A99BAC725782B325A0B3CF637628A56D5C13A5021
D490B3C7068CEAE3D211CCBC87B1F7CCF758448B1AB3BA2D237E090FA20BC3D5
93E251B972621B3F30A40B797BD903AABC84916F6DEDCC0641B5E5BE6D3131FD
DD841C2407045E885D99FCB0A7F07A980F4E6E278465E611E06798A57AD5E9DE
42E2782FED4E13244F3794A28699B8E8E73CB2BF656EFE9D02470FA6C8867EF3
B6F6943A992E63C0D47F2DC6982181A69E1E5CB3116A98B3807042BC05FB1058
480636A84B62BE23F9275F027D92A0A875FAFB876D176FEBB9F0EE5CA71266BC
3CF200015A75EEEEE3CB77BB3F541BE4F06B23D8B1D2721C3CB6CE6483A86816
F4829AFBB9C82C540CEB1EB1C76AC43121BB731849015A26E3DD2ED9A8066D93
92E6B49DD23505BFB9F1EC3A485A93C088B8CA1957D04F95B46256E41E229AFF
B94C6393342290EA1E55F7F7C67DD3103275E9EFDD1C343BB7052829CC440737
084F95F0D310DBFA15F3A686D9F50B0431D27CB697FC8607612B4F94632625A8
29CD0D600E167C948264FA9ED59D05EB5E2911A2C42BF86EDB6265F8A0F84EC4
1CD664E34DEC20AF5909B60DC0AFDE428DE614837E29501C77CAFB421EECA107
58CF9F5CFB1B3156064CEEC693C16B0040EEC0AB82FBAB2A72B5C5839D67E26A
540DBDD8EE85274B6BF12F8A8BACD0154C4727E881704817CBC33E600C3FC6C0
617D64B43EAF4ACBACC8EE6BEB9C9C95EBA316F10AFE920DC509851F1990C4F1
9A0999B9404D3836FE6AC4D0A857A6FAB779BA686570F4A5D4F376C85256D9BE
02BEF1E53066AC80172D97A711B135CA658F708945FEE36223E3A7F1FC73B499
06DFB5DB1B5419DF7C66D0B692FE7C1C32BD589B8739734680631752CE4FD3FE
27522E90E143F7D780BCA539950BA2906B425FE41E3580AA80099DBA7F4E7CD2
895AAD33D08D4BAA94883747424904140C84CD76CB1024D79FADBD62E63E0416
0109BB2EE0FD6F649A62B962F2F9033E919A213851860E135CE6DEEFFE54B6F4
8EE71C440B04C53461E2300A2F9D7BB64F8D94EE3B03EB31367B6829E2EFCFDF
11D52E890DBDAF96B33AB63819BF6541E7BDDAABFC9E167D6AF992514B2D92A0
68BEE119F677563347940F519AFEA6D64E1FC582E78FC3A13601FBF563D6E285
44A317849EC3BFD3456C5FAB741C957485D0EEBCC7EE7ED2CF29DB3BA3F9BD40
47BC69FD1BB39EF28AEBAF48B4BC0D39BFCC05FE6D571A26129AFA9DF18FF017
9C2B7EDCD5136921BB9116855F20B0DE9F99A9198495BEB0125267D929CE8BE7
11ED480CBB8B9E59E1BDFECCB47D7FC5A1A8A411A59733DE2B691795C2D09E5D
7E972258B161A800FDF831D31E3CD324949A252036B921E744CE829564299EDA
6468D21DA7260D2C6A285F0DBBC7702F4EB1359A0019D76409D1E6BB533BD13E
FF0469A93C420DE89E3F575703491DADA839AC6F60F9F985CD847836D01247B7
FC148FB1592270CD74CC55FD7418BB55705E96485E6D35BC22D36EA108F4740C
FD75F6A53A5697708E30CFFDE97EF8614356135DC53DFACA07F0D9E087C913B8
7939EFD9DF314E1C090302FA757884B131FB07C8492CF4CB9C39E511C3124909
F2E9F4E403A22EA36E86FF06253F65069E57FE3D23ABF50BCFF5131713CEEF95
9481DAD7535552445416F7E211501B8BD249CAF9E4A9B179F2BEFCB1F65AF4CE
72BDBF790774CFB24429E459A0E4F76FF19C2ABCB560557D3ABE28597CFCF303
4913B57EE172FE6056EEC44877D3293F160D49B04CAAA7593CF9466284EC6650
F3C0D478A95115EC75B0EB7FE4F8542A460C40D40D35A3B225D2B061672DD432
C5EFF6754EE79D5D65DCD052201417D6FFD619F1A02962C530D3FCC7F1DA2746
A7A3D65B93173DE4809306EFAD85775D4ACE57BEDD92D3B2F4F84955AA0DA4FA
B835DE97A6D56C90EE30057A439A202FEA392AB9C5CF1A074DDFDCC3A498B8A3
6141E4095439D7BBF994D583A65FD84A4831020C52054F76ADC3DBFF65EE1901
6B50905C922ACF556B5C020ADCA1F99D1C5060337CFFCD39F92BCB71E95569D0
F27E87B2186D931D624120B81967E58ABF5540BBE83A478F2D9DB1F9B65E818E
39285BCDB6D0874E43F994B19E966F94B1F3FF879474E9EA34D55A9EEB4CD83B
46244F0115F1CFD27B102E3AB251EB9FD654EF76712C462BC86360DF3B3C7434
59AB088BEA49C5D06D6A7FBC4BF175C729960E1E1AFC71453FE8D513C09C7FDC
463158F6B705CA7C0B29FD61F5FD0E36871EF89008148EAC806C2BB65DF832D3
08BE9ADCDEFE7D586CB87E1F0CB44386BE7731007D7E0CF9B9C97D3519949133
520BDAB53EA668CFD479059718CA0E705F28A9780A815B50D869B1117334A445
1275FCDD54F7753A56B6B0050E58B55A8298AF43188B8F6F8AF53EE8E41302E5
973C0A987E2A0B147F801E4DA938715591232031F0CAFDC8EF5A819137A2680D
5BEE1AF35D6CBB167E71C435814F25EBE2EE6261A8FC963317BFCFB710B3976B
09D8DF54D5EEFC5684B0972A84E73A7F1D29B30E0BD6DB79367004897CE15CA8
1D6A701A5C00956F5B078D335DDEF1302797526C765433E27A372AF4CE5A66C4
8D7A876FBF9406F5FEECC4C7AB6DF2C527283E786E86451F949C17FC99EB384D
C7963F4C8B22DB6903CBA6BADF819DA9EE1F6F67A0D65D35E3D0EF63274B611B
262113B6009EAE101A774CB61844FEB21466DEA111589F182C8B5250B6CDC97E
1CC04D26CAF6C8D86BB0C9C4E4BAFED4DF0C3F7F289A4F90A1B42DD4A94732BE
0FCB9BFF904E27A4AD634541FF723009620E90B458CB4271325BCAFE62D9AF69
A47DF33A781576A333874B54916114215BF09FAF5C0BEEA7BA63707DBB40A203
1B372029D1987CB3687159207539AEC9CA56C55E2AFF9E1DD9AB7AE0E452E921
E77221D1A1842CBC117FEAC844598865B84F27568C2D42B75420A7771C74ED04
59E5AB473675F8DB259EE53F676D1B81AF6B02544DF6F0C959606E56C7179647
5ACB20701CAFF259ABC8394FAFE6764991B90FADBDBA6C52368E41F4DD4AA950
AEE34D3E6FFA3B3E256039BFC50825BF8178DBCD4F761C7147E478B31AB28B2A
E4777935528CBF521F99086F3D64413CC890B162060C6D885B10BDD680400080
6EF9E8C76E45EF546CAE548825A0BCA6BF93B0B1373AF60EBB291933374888A6
584744692F87A67A218BFBCC8B38EA4AF1A70B1DBD9977A5F4C7F1737F017919
5E66BCAD91291315752D5A8AC3AF560E7170A8D1CFF3BFEAA81F5D828F420011
D3252FF3E89C03CE77AD52542EBA7966A70FB8E9ED1AA86A96E36DE1EF22EA9C
AC8B9D5861BB33939B7C2DAD00461590CB05A40DDD233128D5E451389F4D04AB
7C07F64238EB18AEF051195B7183B4CC188A1E217F6604B425262B79B84A8EA2
0EC89F21C153BE77E40318D6A5087F7EFFCC49BB586570A49AAFDE183F0F85F1
1A33B317600246FF6146B2656704C4570D69963A14C4AE3B287732A43C1501E6
A9828BFF34CE9E8D50A09530D29617D1737F232813784DD90A5C4E41D608F894
BE066CAA01A20DC347F079C3272383D7526CEE1C178B1C6988F963BB0D7534D2
81C0486C57E52DD412FB66F40610C2299F6C60070C2D271301D7391127468DD2
C98E410268717EA1D47C0F095A4B7704DF0394656DF75B0DAFAB5A00545DAA9C
FBE8C60AA2C2AD169FF34266D8A72C91C24108FC0F3F775D30E50BEE73E6D0A4
8998527FAEA033B10548BDAAB76E31BA7DA2BAD9955F9061A59C954D39C68834
19923C2C7BC5198F13F6752484F5267DF6BBC18AA3D72FE340B51C9A222C6861
BDBCCBF5B17AA9F218A80D732FA2B1C20F1A5B6C282CD2B7284B83AFD2E33DEA
0218424B2D3D6CF5E6C128A31DBF93F0566A59DF25AD24664C9E7A06B4398224
D50B111990D1F4436C860DA78F1A51CEBA5CAEEC690CF237B5C9AA6C81744861
352351811FFE5104DFB2F944CC07F6E33B9528DDAFCCA9D3BB807F787BA2FD1E
D7E19DFD88B3993CABD8DEC13AF8F9DAB7013571731E477F85C9F339E8DE7FEF
46D1A6BA11FA32317445B8B172D87BB306AD19BAFDBB12D4EC4FB61477C69F92
676D92FBF0BAC236C12944654351CE8F69FF6C600F06E7805A7FF1C7DF83846C
EBA6A0F6B8721DCBDF10EF58FAE6C7AC7ADB2BA6B75F4F038FF6AE864A217029
655700F8028E596DC52D6B9FEFF8374589940C6CF164F5A3738FE62CC1914373
2487FB28A99C314DD32EC80211563438E38676AFCDE9AD568319DC6F85E6AF68
ED699017B8B118450F9F9C13AF26147A6F94636839CF1075286B33634A369986
740FF81ECD6153D837C098342260C68F88360D69D0102F4ACA897F0502C545F9
2404F6B14FDFA49FBDB8D9EB3BA37CB97F6454E1E4F307C058B82D956411B43D
85601ED4EFFB48E83B9BABAFFDF4A509041369FC9C322336A2B09FF81FCFFF0C
08B845AB92F0C600534B6B26741DC8FF8BCA6575A33B49AF351024586088157F
6C7A104D3408735BB8ABADFD4F58075F2E4A7405848F3448CE51DAE8EC6477EF
ECB267D97378E31F9A083BBC13B0037C927F524EE70A52938C3CB84EBA64E0DE
E4D6100919EED573FA44CAC5F1C047BDAD0009B2B41F03066CDE17ED245D82EB
D6D8A0E6E05435970BD78A0F516E86F14C816643B4E0E02FC291D10670829FA4
E50A0386907A14A806EAFB65C5D54039982ED5E56649B9DD204873C9B80E1317
5ECD5B9156A175A1A602651D986809F93F1CC2A9A49193E3A47EC83961824A66
C3AE347EC25FC4B90605BCFB63BE4CECCD332390AB2ECF8F06D76A33903A296C
641CC8AA80C464FE72D715077316F221B08D781F78EDFDA0BBD5E0735B99A6E9
E2EAB8D8F7DE8EC7F5A57CC2D87E7A30DDA0EC1001A8BA9E78D9E4275F0472E0
E85D55D054DFB0E4F67CF02FF6C6AA2B5ABE8D3BE21FD28CDDB4DFDA23FDE342
DD6F548EBAF3A30EC879FE99E2E9C9FFE74DB7465B022FAA7CD20141B1307A31
DB32740193BDD6EDF7E00756E484E4AB5B6BB90154FC4F84A39123A40F0DB05E
03F7E703A1372C940EB02F387EBAAD11C6CF09C4BCE120FE89661BB1FD4EDDEB
2E8A11DEE13A3CA82D4456781B3AAA5028DBCA56CF706C15265BEFDCB64C4655
97F67BAA73F08A5D0803B2FFE804262F4614E389AFA8403A6B84F016B1FEABC1
07855E50FD7EB2254A09F857C28BECEF627223604914505B673BBEE1AFA053BF
C361AA9E246A62D98596AACC4EBD6D7084B15670FB8FCB42434C39C5BA79864D
EFBA8254D8F6CAF0C945FF2E6A12FB8ACA473C506968E606806CCBC578E66B78
C44DBD419DCF940B0F1699816B0E859C209BA35D2ABF7AF46F8280A708277357
B5ACF77949B13E83C7F4942946CC64635DCEBFFEC7FC17C3A8B3627838F7543A
3663808BA68F1FA9825F54B22BEBC9C7E735A3ACCB6B407E28A106E27B837922
E4D8B64DEA74CE18ECB4FA9CAD0BADCC3DC3ED403019069FAF1C1FC8E909A783
E37B7EE33E6223D371201F71B84CD7CC7795A8F17758C9413F9B902A094734CE
C367EE901801754E299F1A4AE56227A6B2F68576837F01FF69EE0E79DA3195DD
4BED02186858464EC2E57ED15EEA78571935FED3544D1C9B378E002DCFE8531E
32F7B11B0C3070434CAEBA55DCE514865EC57BDCF7811ABF0CA192B006F426BC
DF946317EEF2D8292FE59439485940102ECB8816D178AE0D1E59557AA207602C
CB166F9E18AFF7F0392301BC5DB5474033C4BADAF9A79F785BA046E764DE5E83
D63BA62BD703ACA8D70A0ABD46A72802B02F2025D5A6A6847C48AE558A760223
B54DC4C47549D2BEF21AE3C1183FCA2C69767FA011C328DE85A009595FBFEC5B
28D33F5D251AFCF83EA09EC1FE6DF6A37EA19899DCEB4CF4171AC0916C88BE9B
D779BE36312504D8F7F603D01D5D692F978EA3A7417FE592D2B2B62FD8379026
BC2A179C3F6B63AC72045FF84DED84F497E80EE4007670448968541084611A3B
681657DABB52148B9307EBBD644DAEDAEE2F28C343D9100944FCC173CC35001F
695455576CBFDB0E30500D102A81DB058C2BCBDA350036632B343112D08A032B
3CDA2B5CD81C5C92AE956408DB47F8FB7827BCDCEFDD4985B474BBA3745A76AA
132C83004A84E59A40516FA2E8674FFF0527BCA1BBDD6E9EEC24E6F69144F34C
4189D585B1944C4132719B69F1485C66C8503F2EE11B8A93439FD480E856F150
AD56000D2440FA6445384115A9B7723CE32521C1581B6414DCE313FBB255A74F
4E5D1F69A9FAD7B08CAEC16359584E08CADBE5C6E1B4F627AD49F3A2666D2B98
2F4C6BA4EEC47E10B5B745C0A5A5F13D2A31DF415A24BC16C06FAF6B2C842627
2BF72E9231663078FFFF3E32897CCD7FB24481E358498F13E0F235DA1404F5A3
A1B7BC71E6B8090C81719C585CB8726599F9728DE46F067EF6376368CD3DE54E
9774D9E524CDDCB4941A3E9E40FA3F4AE6DD8DD35AE3EAC0BE0EC4015A131F02
B52FD41C94D1A5A4ACD7C5D717312E29AE1CF81953A4A69640BA7ED6BA591624
A06618B8333E49A701571E7D5761A6450B607B3FE2C39ADD0C53BC563D529AF2
78BA3E42470C9158F9DCFBBED19CB7F6EF1C9400BED03B0A8419A0D815F8D5AB
6553B3A756D69B0E99DC511566E417D6C0F5A84B217BD0B7CFBCA882F7046D63
858D8892D439DFC481CD48FDE2F4783A9984EF36254D60E2119A8A4D42BD9D9C
0A6AC02F797BFE9F8BB82ED67E5651E32D9E7581D407EB7385EC00AED23334F0
3F2805CB112963B0C7B483C38C59EFB9A5E0DC505392715649EFBBE8CBC77C13
985931CBB2D4AA515AF8DE5F9A63FFE625C0DB0706F88C49D999383A70A38FA7
C0FBCE0D5FA81AD4CBEC324F0608CCA92F86D174D87E8DBEECD4179885D0A224
2164A5A0DCF2C9529D0A546269AFD28D159E8FE1B105BF56DF6F5480BD3946FC
B750D809879871125FACD563F947780644E5017E97FFBB6114C2B3CFF3F9E73F
12D4865E288F2B581C56058C56BD2F3E391082AE90CD57DE86829473CF27C844
ACFF17E976B3DE3B519AD4D87B0A56C26495DDF8C450996886703D51A9DF6B89
C99A848AAAF1BDB74D91644E637AEB36E4AF671CBA1E1472C9347E542939AF61
CA26247A2D23E10611AB3B282DA150F5BB9E5F8638441EE35E670077B8BBEFA1
140B1C0088FC6EBB4B2ADB1F3C30363D1195070153F7E66CF6500CC1947F72DE
538079C17F000ECAED460653A763ADFC56EDAFD4A62AA7EF3F5A79624B58D1DE
B87C2710E5E6DE48FE62768CF31733413B0ED75DA24CCB48C4033CF2543E84FB
7C075F25838787F9ADD23C56FDD7ABE543FB44A5E5416C1B7EB9843B1D68A785
C25B7D23ACB3D33E5D530951345E3E46D3289F65B8C2A887608C62FB5E619E86
37F7EBF5AF3262300D557878687953760F90FD9D96AFC9611915888963320CD6
B8E2C0F908B11268FAAE474756E32051BE50773FF3FA4754A608B29378005064
47A155567102C65D411E406BB59BA59D8EE0FB475721094BF2A879738C141804
D307DDBF52E27B75EFE7DC1C34CE3B5FCA1B6D5DDD1D94B6450CA382751C82C4
2FE57151692993A2E8C5472EA2DBB99F99E488201A41261CBBBD017F961B90C0
B2586C7441BB33FB2FDCDF09D2C49F337302A76C6F774A344E07EFFCE467CC29
5996167BFC12BB5A1DD2753E4E204363CD8C5020E19E26C0709725DAAAD5294C
C2DA9460834C6B988450F20E01377870B6061E3D9F16F07DD1B5D254C89EC13A
E7976C1A1766D27537D622CB8C331832B6B25B99FD884DD681F71BF2BF889A7C
B68AD1B5DC5BB282E64C0A6F54411C6B2FE61104D089DAA1272EEDBB5C9E90DC
41F28DC29E9EF4BA853AF4F416EB4E0B0C0C185CAFA468F287B9DEAA07E55635
DCAF3EE4EC28D12BFC8107FDFC85478DA8ECF6E08A1DBD2C4912BD099DDD953D
FD01CAEB07DD0927121C3D5D5DA6F682D8DD45285F24F78364E07415B1892CEC
AFAEB04712EFC2815A8F2B7955510806C61612CB026939DC985D5866C28838F6
6E7C01ED4D090781154D6BE28A4C0BE1AFC33876CC4C3BAEA8D5AC00922EA70B
322CB6FA9069DD83A185B27826980C4C0BEB1F66C93122A5EAA0C8F43F3651E7
3FCEFBC59179A107298FA1024699913B44A78B018D669409EB54299B6112965E
E81ED36FF6CE26298B705E16AEB86D5BDC74A462D51BABCE45D4BD6DBB989C04
3723B63E51B596DDE785CE66DE028B02AC5EA66025991CB643BF3DC5CB242FCC
DA3CD2A9C1931F1B9D813B5D9B913000F3A7012D5C08E1420A8A58319ACCC561
77DB9CD38604E9D38D98FECF5A95FBFACFFF1D30A0112EB42E2130BF5526E4E5
5FAA5A2BE2B50B152E7189A1F979EB62F8551DDF30C2508E8776933EE7EFCF7D
F5847A5E5407F3F9D1E0768F69FC629D65898DD9561DF5E8004AC6E5EA4B8A40
18387257AEAE3A67C25BAC985C7549D8203120AA5A362772F8450261DDB634C8
98606ABBA0216880DFD34637CE1BB294C09BB79B1555076F312278CB446E3984
4B74CCD9CE581F9052E1159FAF2419819BE08A0601DBF084E149AE73A3217BF8
33086AFA18515C03DFEB132EBA1E0D515DC4CAD8FC0F07808580451C06D3D5E8
1C4971DDD66EDB76FBDF41A7B34CE7C2D20B7A96A601A737F0325A572C773F59
BE5E1C0CE4C806A24B0BFDA79B8DCCC03323E3E985286EF8E2C82C3FFAA67A25
27A944584613082DA0B24C8C79CEF7AA54A87203C28692882C8C5800FFECD591
E46E5928C9CFA83B5B8434C8DA4286
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
TeXDict begin 31699560 8577528 1000 600 600 (tmpPSFile)
@start /Fa 135[51 2[51 51 51 51 1[51 51 1[51 4[51 2[51
1[51 1[51 9[51 3[51 5[51 5[51 4[51 66[{}17 99.6264 /CMTT12
rf /Fb 135[50 2[50 28 39 33 1[50 50 50 78 28 50 1[28
50 50 33 44 50 44 1[44 3[33 1[33 6[61 55 66 1[55 72 2[61
3[72 72 55 61 72 66 1[72 14[50 50 7[33 33 40[{
 TeXBase1Encoding ReEncodeFont }38 99.6264 /NimbusRomNo9L-Regu
rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 463 a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end

-595 463 a -575 -57 a
tx@Dict begin { 13.08844 41.54118 } PutCoor PutBegin  end
 -575 -57 a -1 x Fb(Handout)-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 11.95009 28.45274 } PutCoor PutBegin  end
 -575 -57 a -1 x Fb(PDF)26
b(File)-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 13.08844 5.69046 } PutCoor PutBegin  end
 -575 -57 a -21
x Fb(\(input)e(1\))-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.98291 SLW 0  setgray   0. true 68.2864 62.59595
0.0 17.07181 .5 Frame  gsave 3.98291 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 1.70709 SLW 1
 setgray  1. .setopacityalpha  stroke grestore  end
 
@endspecial -575 -57 a
tx@Dict begin { 15.36429 -26.74564 } PutCoor PutBegin  end
 -575 -57 a -1 x Fb(Lecture)-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 8.5359 -39.83366 } PutCoor PutBegin  end
 -575 -57 a -1 x Fb(Audio)g(File)-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.98291 SLW 0  setgray   0. true 68.2864 -5.69046
0.0 -51.21501 .5 Frame  gsave 3.98291 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 1.70709 SLW 1
 setgray  1. .setopacityalpha  stroke grestore  end
 
@endspecial
-575 -57 a
tx@Dict begin { 13.08844 -62.59595 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(\(input)g(2\))-575 -57
y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.98291 SLW 0  setgray   0. true 478.00616 28.45274
409.71933 -17.07181 .5 Frame  gsave 3.98291 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 1.70709 SLW 1
 setgray  1. .setopacityalpha  stroke grestore  end
 
@endspecial -575
-57 a
tx@Dict begin { 418.25523 11.38092 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(Alignment)-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57
a -575 -57 a
tx@Dict begin { 429.6366 1.70709 } PutCoor PutBegin  end
 -575 -57 a -1 x Fb(Result)-575 -57 y
tx@Dict begin  PutEnd  end
 -575
-57 a -575 -57 a
tx@Dict begin { 426.22197 -28.45274 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(\(output\))-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.27 true 193.47873
62.59595 91.04869 17.07181 .5 Frame  gsave 1.13791 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-575 -57 a
tx@Dict begin { 112.10387 41.54118 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(OCR)i(Engine)-575 -57
y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 118.93225 26.17647 } PutCoor PutBegin  end
 -575 -57 a -15 x Fb([T)-7 b(esseract])-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.27 true 193.47873
-5.69046 91.04869 -51.21501 .5 Frame  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
-575 -57 a
tx@Dict begin { 96.73915 -26.74564 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(Speech)26 b(Recogniser)-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 105.84424 -42.10992 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb([Google)f(Cloud])-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 225.91484 43.24829 } PutCoor PutBegin  end
 -575 -57 a -1 x Fb(T)-7 b(e)o(xt)24
b(Chunks)-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.98291 SLW 0  setgray   0. true 295.90836 62.59595
216.24101 17.07181 .5 Frame  gsave 3.98291 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 1.70709 SLW 1
 setgray  1. .setopacityalpha  stroke grestore  end


@endspecial -575 -57 a
tx@Dict begin { 231.6053 -27.88356 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(T)m(ranscript)-575
-57 y
tx@Dict begin  PutEnd  end
 -575 -57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  3.98291 SLW 0  setgray   0. true 295.90836 -5.69046
216.24101 -51.21501 .5 Frame  gsave 3.98291 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore gsave 1.70709 SLW 1
 setgray  1. .setopacityalpha  stroke grestore  end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.27 true 386.95747
28.45274 318.67064 -17.07181 .5 Frame  gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -575 -57 a
tx@Dict begin { 327.20654 11.38092 } PutCoor PutBegin  end
 -575
-57 a -21 x Fb(Alignment)-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57
a
tx@Dict begin { 342.00209 -14.22636 } PutCoor PutBegin  end
 -575 -57 a -15 x Fb([dif)n(f])-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a
-575 -57 a
tx@Dict begin { 327.77573 -1.13791 } PutCoor PutBegin  end
 -575 -57 a -21 x Fb(Algorithm)-575 -57 y
tx@Dict begin  PutEnd  end
 -575
-57 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 68.2864 39.83366 91.04869 39.83366   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 68.2864 -28.45274 91.04869 -28.45274   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 193.47873 39.83366 216.24101 39.83366   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch
0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2
ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 193.47873 -28.45274 216.24101 -28.45274   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch
0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2
ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 295.90836 39.83366 352.81384 39.83366 352.81384 28.45274
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul
add dup 1.4  mul exch 0.0 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 295.90836 -28.45274 352.81384 -28.45274 352.81384 -17.07181
  /Lineto /lineto load def 0  setlinejoin false  NArray n 0 eq not
{ n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.50565 2.0  CLW mul
add dup 1.4  mul exch 0.0 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 386.95747 5.69046 409.71933 5.69046   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch 0.0
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial -575 -57 a
tx@Dict begin { 221.93147 25.03854 } PutCoor PutBegin  end
 -575
-57 a -22 x Fb(\()p Fa(BBoxGroups)p Fb(\))-575 -57 y
tx@Dict begin  PutEnd  end

-575 -57 a -575 -57 a
tx@Dict begin { 231.03613 -43.24829 } PutCoor PutBegin  end
 -575 -57 a -22 x Fb(\()p Fa(WStamps)p
Fb(\))-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -575 -57 a
tx@Dict begin { 419.39359 -11.38092 } PutCoor PutBegin  end
 -575 -57 a -17
x Fb(\()p Fa(Matches)p Fb(\))-575 -57 y
tx@Dict begin  PutEnd  end
 -575 -57 a -595
463 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 463 a 0 TeXcolorgray 0 TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
