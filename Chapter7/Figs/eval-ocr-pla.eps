%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%CreationDate: Sun May 26 19:28:08 2019
%%For:zyc zyc
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 3 2 450 196
%%HiResBoundingBox: 3.000094 2.814328 449.531986 195.569713
%%EndComments

%%BeginProlog
%%BeginPreview: 447 194 8 2328
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f00000000000000000000000000000000000000000000334444
% 44444444444444444444444444444444444444441100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 98717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171717171717171717171717171717171717171717171717171717171
% 71717171717171717171717171719800000000000000000000000000000000000000000000bbffff
% ffffffffffffffffffffffffffffffffffffffff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbcc44
% 44444444444444444444444444444444444477ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff44000000000000000000001199998888aa880000
% 00000000000000000000000000000000000000000000000044ee00000000bbbb88ff9999ee000000
% 0000000000000000000055ff00000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000bb8800000044880000
% 00000000000000000000000000000000000000000000000000ff00000000660000ff440066000000
% 0000000000000000440000ff00000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000055ee0000000000330000
% 66337700225577110022330022440011661188330000115555ff00000000110000ff440011006633
% 7722330022440066cc4400ff22883300000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000088bb0000002244442255
% ff669922aa0033dd2244bb0000ff0044ff6655ee0011aa0033ff00000000000000ff44000055ff66
% 9944bb0000ff0044bb0000ff6655ee00000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e424d7cffffffffff4d4d7cffffffffff4d4d7cffffffffff7c4d4dffff
% ffffff7c4d4dffffffffff7c4d4dffffffffff7c4d4dffffffffffac4d4dd0ffffffffac4d4dd0ff
% ffffffac4d4dd0ffffffffac4d4dd0ffffffffd04d453e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ecdac4d4dd0ffffffff7c4d4dffffffffff4d4d
% 7cffffffffff4d4dacffffffffd04d4dacffffffffac4d4dd0ffffffffac4d4dffffffffff7c4d4d
% ffffffffff4d4d7cffffffffd04d4dacffffffffd04d4dacffffffffac4d59db713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000088bb0000000099aa0000
% ff000088880000998844bb0000ff0000ff0000ff0088660000ff00000000000000ff44000000ff00
% 0044bb0000ff0044bb0000ff0000ff00000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e709188bfbfbfbfbf767688bfbfbfbfbf767688bfbfbfbfbf887676bfbf
% bfbfbf887676bfbfbfbfbf887676bfbfbfbfbf887676bfbfbfbfbf9a7676adbfbfbfbf9a7676adbf
% bfbfbf9a7676adbfbfbfbf9a7676adbfbfbfbfad7f874b3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676adbfbfbfbf887676bfbfbfbfbf7676
% 88bfbfbfbfbf76769abfbfbfbfad76769abfbfbfbf9a7676adbfbfbfbf9a7676bfbfbfbfbf887676
% bfbfbfbfbf767688bfbfbfbfad76769abfbfbfbfad76769abfbfbfbf9a769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000077ee0000000088880000
% ff0000aa880000888844bb0000ff0000ff0000ff00bb660000ff00000000000000ff44000000ff00
% 0044bb0000ff0044bb0000ff0000ff00000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676769aff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000011dd7700000088880000
% ff000077aa0000886644cc0011ff0000ff0000ff0088990000ff00000000000000ff44000000ff00
% 0044cc0011ff0044bb0000ff0000ff00000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676769aff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff440000000000000000000011aa995566aa440055
% ff550000997755880000cc9988ee3344ff3344ff4411cc9988ee55000000000055ff88220055ff55
% 0000cc9988ee3311ee8880ff3333ff55000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676769aff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000441100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676769aff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e94ad7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767688b8583e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676769aff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d76767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676765c3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d76767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676765c3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767691d7643e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e7091767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767f874b3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676769aff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbeebb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbccff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676a7f5f5f5f5f5db
% dbe2f5f5f5f5eedbdbe9f5f5f5f5eedbdbe9f5f5f5f5eedbdbe9f5f5f5f5eedbdbe9f5f5f5f5e9db
% dbeef5f5f5f5e9dbdbeef5f5f5f5e9dbdbeef5f5f8ffe1cccccccccccccccccccccccccccccccccc
% cccccccccc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e710000000000000000000000000000000000000000000088bbbb
% bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb3300000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ffded3d3d359
% 597ad3d3d3d3b259599bd3d3d3d3b259599bd3d3d3d3b259599bd3d3d3d3b259599bd3d3d3d39b59
% 59b2d3d3d3d39b5959b2d3d3d3d39b5959b2d3d3deffe5dcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdc
% dcdcdceeff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767f8f4b3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676a1be6459595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959596492867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767f8f4b3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000332200
% 00224444444444110000444444444433000011441100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676767676a1be6459595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959596492867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbaa00
% 0088ffffffffff440000ffffffffffbb000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00224444444444110000444444444433000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676aee77a59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000666600
% 00000000000000000000000000000000000011441100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676673e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000119988779977000000
% 1199888888bb4455eebb889988000000000000119988779977000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676767676a7d66f59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959596492867d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e94ad7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767f8f4b3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000666600
% 00000000000000000000000000000000000033bb3300000000000000000000cc66000000bb770000
% cc77000000774400bb880011dd660000000000cc66000000bb770000000000000000440000000000
% 00000000000000000044000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000055ff0000000066ee0066
% ee00000000005500bb880000cc880000000055ff0000000066ee0022330022440066cc4411662288
% 440022330022440066cc440000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676769aff713e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000088bb0000000044ff3399
% bb00000000000000bb883388cc110000000088bb0000000044ff3344bb0000ff0044bb0066ff5555
% ee4444bb0000ff0044bb000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% fffffffffffffffffffffffffffffffffffffffffffcffffebd3d3f3fffffffff3d3d3ebffffffff
% f3d3d3dfffffffffffd3d3dfffffffffffdfd3d3ffffffffffdfd3d3f3ffffffffebd3d3f3ffffff
% fff3d3d3ebfffffffff3d3d3ebffffffffffd3d3dfffffffffffdfd3d3ffffffffffffffffffffff
% ffffffcc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000088bb0000000044ff44aa
% bb00000000000000bb99bbbb00000000000088bb0000000044ff4444bb0000ff0044bb0000ff0000
% 888844bb0000ff0044bb000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3c3e8e9b28559599bb2b2b2b29b595985b2b2b2b2
% 9b59596fb2b2b2b2b259596fb2b2b2b2b26f5959b2b2b2b2b26f59599bb2b2b2b28559599bb2b2b2
% b29b595985b2b2b2b29b595985b2b2b2b2b259596fb2b2b2b2b26f5959b2bdffd3c3c3c3c3c3c3c3
% c3c3eecc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000066ee0000000055ee0077
% ee00000000000000bb8811ee66000000000066ee0000000055ee0044bb0000ff0044bb0000ff0000
% 888844bb0000ff0044bb000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676aee77a59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959597ad7977d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000033bb3300000000000000000011dd44000000aa880011
% ee77000000113300bb880044ff440000000011dd44000000aa880044cc0011ff0044bb0000ff0000
% 885544cc0011ff0044bb000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dab9b5959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959596fb68e7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000333300
% 0000000000000000000000000000000000000000000000000000000000000022aa77449988000000
% 33bb996688770033ddaa220077ee440000000022aa77449988000000cc9988ee3311ee8811ff6666
% 880000cc9988ee3311ee881100000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000011330000000000
% 00001144000000000000000000000000000000000011330000000000000000000000000000ff0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676767676a7d66f59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959596fba8e7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000011441100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000011ff0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dab9b5959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959597ad6977d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000888800
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000044884400
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbbb00
% 00000000000000000000000000000000000044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676aee77a59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959597ad7977d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000bbee00
% 0000bbbbbbbbbb66000066bbbbbbbbbb330044ff4400000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dbeb25959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959597ad6977d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e710000000000000000000000000000000000000000000088bb00
% 0000bbbbbbbbbb66000066bbbbbbbbbb330000bb3300000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e70917676767676767676767676767676767676767676a7d66f59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959596fba8e7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7dab9b5959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959596fb68e7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e4d767676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676b5ff8559595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db7676767676767676767676767676767676767676aee77a59595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959597ad7977d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959597ad6977d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3ed0db76767676767676767676767676767676767676769aa65959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959596a7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e94ad88bfbfbfbfbf767688bfbfbfbfbf767676bfbfbfd6d6b2b2b29b59
% 5985b2b2b2b29b595985b2b2b2b29b595985b2b2b2b29b595985b2b2b2b28559599bb2b2b2b28559
% 599bb2b2b2b28559599bb2b2b2b28559599bb2b2b2ba8e7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e455c87ffffffffff5c5c87ffffffffff5c5c5cffffffffffffffffd76a
% 6abaffffffffd76a6abaffffffffd76a6abaffffffffd76a6abaffffffffba6a6ad7ffffffffba6a
% 6ad7ffffffffba6a6ad7ffffffffba6a6ad7ffffffffa07d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8f7a5959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595959595959595959595959648c867d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000002c5555
% 55555555555555555555555555555555555555551700000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000758585
% 85858585858585858585858585858585858585855500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959637d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000110000000000
% 00110000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d73595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595959595959595959595959648c867d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000bbbb88ff9999ee000000
% 0000000000000000000000000000000055eebb889966000000000000000000000000ff1100000000
% 00ff11000000000000000000000000000000004433bbbb88ff9999ee55eebb889966334400000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000660000ff440066000000
% 0000000000000000000000000000000000bb880011ff440000000000000000000000000000440000
% 000000000000000000000000000000000000446600660000ff44006600bb880011ff446633000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddad35959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595985ffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000110000ff440011006633
% 7722330022440000228866000000000000bb880000cc772255771100003355330000552266cc4400
% 005522224411003322002288660000000000bb0000110000ff44001100bb880000cc7700bb000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7ddbffffb66363b6ffffffffd66363b6ffffffff
% ff63638cffffffffff636363ffffffffff8c6363ffffffffffb66363d6ffffffffb66363b6ffffff
% ffd66363b6ffffffffff63638cffffffffff63638cffffffffff8c6363ffffffa07d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000000000ff44000055ff66
% 9944bb0000ff00227700aa880000000000bb880044ee3faa0033dd22447700880033ff4444bb0000
% 33ff4411ee22007711227700aa8800000044bb0000000000ff44000000bb880044ee2200bb330000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7db1c3c3a07d7da0c3c3c3c3b17d7da0c3c3c3c3
% c37d7d8ec3c3c3c3c37d7d7dc3c3c3c3c38e7d7dc3c3c3c3c3a07d7db1c3c3c3c3a07d7da0c3c3c3
% c3b17d7da0c3c3c3c3c37d7d8ec3c3c3c3c37d7d8ec3c3c3c3c38e7d7dc3c3c38e7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000000000ff44000000ff00
% 0044bb0000ff0088998899880000000000bbbb88771188880000998844cc44110000bb4444bb0000
% 00bb44008888008800889988998800000077880000000000ff44000000bbbb8877110000aa660000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000000000ff44000000ff00
% 0044bb0000ff00bb440000000000000000bb88000000aa88000088880066ee880000bb4444bb0000
% 00bb440022dd333300bb4400000000000077880000000000ff44000000bb880000000000aa660000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000000000ff44000000ff00
% 0044cc0011ff0088aa0000550000000000bb8800000077aa00008866220011dd2200bb4444bb0000
% 00bb440000bbaa000088aa00005500000044bb0000000000ff44000000bb880000000000bb330000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 595959595959595959595959595959595959595955000000000000000000000055ff88220055ff55
% 0000cc9988ee3311ccccaa330000000033eeaa220000009977558800447744990033ff7711ee8811
% 33ff7700005566000011ccccaa3300000000bb0000000055ff88220033eeaa2200000000cc000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000044440000000000000000000000000000006644000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000553300000000000000000000000000225500000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7dc3ff3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3ea5ff
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000675959
% 59595959595959595959595959595959595959595500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8ec3c3a07d7db1c3c3c3c3a07d
% 7da0c3c3c3c3b17d7da0c3c3c3c3c37d7d8ec3c3c3c3c37d7d7dc3c3c3c3c38e7d7dc3c3c3c3c3a0
% 7d7db1e3ff3e8ba5a5a5a5713e3e8ba5a5a5a5713e3e8ba5a5a5a5713e3e71a5a5a5a58b3e3ebdff
% a0c3c3c3c3b17d7db1c3c3c3c3a07d7db1c3c3c3c3a07d7dc3c3c3c3c38e7d7dc3c3c3c3c37d7d8e
% c3c3c3c3c37d7d8ec3c3c3c3b17d7da0c3c3c3c3b17d7da0c3c3c3c3a07d7db1c3c3c3c3a07d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000007ba7a7
% a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a7a75100000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ffffb25959d3ffffffffb259
% 59b2ffffffffd35959b2ffffffffff595985ffffffffff595959ffffffffff855959ffffffffffb2
% 5959d3ffff76dbffffffffbf7676dbffffffffbf7676dbffffffffbf7676bfffffffffdb7676e185
% b2ffffffffd35959d3ffffffffb25959d3ffffffffb25959ffffffffff855959ffffffffff595985
% ffffffffff595985ffffffffd35959b2ffffffffd35959b2ffffffffb25959d3ffffffffb2637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676c8a5
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595959595959595959595959595959595959648c867d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d97d77a59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595985eb767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8eba6f59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595985eb767676767676767676767676767676767676767676767676767676767676767676d9df
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676d0c6
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595959595959595959595959595959595959648c867d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000305b5b
% 5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b5b1800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d97d77a59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959599bf3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000007f9a9a
% 9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a9a5b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86926459595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595985eb767676767676767676767676767676767676767676767676767676767676767676d9df
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959597ad6977d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676d0c6
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959596fb68e7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000110000000000000000000000000000000000000000000000000000000000000000110000
% 00000011000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000055eebb8888bb88000000
% 000033dd440000000000000000000000000055eebb88996600000000000000000000000000ff1100
% 000000ff1100000000000000000000000000000000443355eebb8888bb8855eebb88996600334400
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000bb8800000055000000
% 000000bb440000000000000000000000000000bb880011ff44000000000000000000000000000000
% 440000000000000000000000000000000000000044660000bb880000005500bb880011ff44006633
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000bb8800003300004444
% 660000bb440033553300002288660000000000bb880000cc77002255771100003355330000552266
% cc44005522002244110033222288660000000000bb000000bb880000330000bb880000cc770000bb
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000bbbb8888aa0033bb00
% 993300bb444477008800227700aa8800000000bb880044ee2222aa0033dd22447700880033ff4444
% bb0033ff440011ee220077317700aa8800000044bb000000bbbb8888aa0000bb880044ee220000bb
% 33000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86926459595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959596fdf767676767676767676767676767676767676767676767676767676767676767676d0c6
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959597ad6977d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000bb8800228800112222
% 998800bb4444cc441100889988998800000000bbbb8877110088880000998844cc44110000bb4444
% bb0000bb4400008888008888998899880000007788000000bb880022880000bbbb887711000000aa
% 66000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000bb8800001100118844
% 888800bb440066ee8800bb4400000000000000bb8800000000aa88000088880066ee880000bb4444
% bb0000bb44000022dd3333bb440000000000007788000000bb880000110000bb88000000000000aa
% 66000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000bb8800000000778800
% 888800bb44220011dd2288aa00005500000000bb880000000077aa00008866220011dd2200bb4444
% bb0000bb44000000bbaa0088aa00005500000044bb000000bb880000000000bb88000000000000bb
% 33000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676d9df
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959596fb68e7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000033eeaa2200000055ee88
% 88bb4edd77447744990011ccccaa3300000033eeaa22000000009977558800447744990033ff7711
% ee8840ff7700000055660011ccccaa3300000000bb000033eeaa2200000033eeaa220000000000cc
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000004444000000000000000000000000000000006644
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000055330000000000000000000000000000225500
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86926459595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959596fdf767676767676767676767676767676767676767676767676767676767676767676d0c6
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959596fb68e7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000727676
% 76767676767676767676767676767676767676765b00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676d9df
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959597ad6977d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e710000000000000000000000000000000000000000000082b1b1
% b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b15500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d86926459595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959596fdf767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676c8a5
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959595959595959595959595959595959595959595959595959595959595959595959596fb68e7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8eba6f59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595985eb767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000315c5c
% 5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c5c1800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e710000000000000000000000000000000000000000000081a0a0
% a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a0a05c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676c8a5
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595959595959595959595959595959595959648c867d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d97d77a59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959599bf3767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959637d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000110000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000001100000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000055eebb8888bb88000000
% 000033dd440000000000000000000000000055ee88000011aabb3300000000000000000000000000
% 0000000000000000ff1100000000000000000000000000000000443355eebb8888bbb0ee88000011
% aabb3333440000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d97d77a59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595985eb767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000bb8800000055000000
% 000000bb440000000000000000000000000000aaff55000044440000000000000000000000000000
% 0000000000440000000000000000000000000000000000000044660000bb8800000055aaff550000
% 44440000663300
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676e1ff
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595985ffa07d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000bb8800003300004444
% 660000bb4400335533000022886600000000008877ee330044440000228866000011556611000044
% 4466000066cc44005522224411003322002288660000000000bb000000bb88000033008877ee3300
% 4444000000bb00
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d3767676767676767676767676767676767676767676767676767676767676767676bf85
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959595959595959595959595959595959595959595959595959595959595959595959648c867d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d
% 7d7ddccc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000bbbb8888aa0033bb00
% 993300bb444477008800227700aa8800000000880099cc11444400227700aa8800bb0077bb2233bb
% 0099330044bb0033ff4411ee22007711227700aa8800000044bb000000bbbb8888aa00880099cc11
% 4444000000bb33
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8eba6f59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959599bf3767676767676767676767676767676767676767676767676767676767676767676bfa6
% c6ffffffffc68585dfffffffffc68585dfffffffffa58585ffffffffffa585a5ffffffffff8585a5
% ffffffffff8585c6ffffffffdf8585c6ffffffffdf8585dfffffffffc68585dfffffffffc6a6ffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffcc3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000bb8800228800112222
% 998800bb4444cc441100889988998800000000880000ccaa444400889988998844cc0011bb001122
% 2299880044bb0000bb4400888800880088998899880000007788000000bb8800228800880000ccaa
% 4444000000aa66
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff7676767676767676767676767676767676767676767676767676767676767676769abf
% d0e1e1e1e1d0bfbfd9e1e1e1e1d0bfbfd9e1e1e1e1c8bfbfe1e1e1e1e1c8bfc8e1e1e1e1e1bfbfc8
% e1e1e1e1e1bfbfd0e1e1e1e1d9bfbfd0e1e1e1e1d9bfbfd9e1e1e1e1d0bfbfd9e1e1e1e1d0b8a5a5
% a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5
% a5a5a58b3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000bb8800001100118844
% 888800bb440066ee8800bb440000000000000088000011eeaa4400bb4400000000cc555566001188
% 4488880044bb0000bb440022dd333300bb440000000000007788000000bb880000110088000011ee
% aa44000000aa66
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000bb8800000000778800
% 888800bb44220011dd2288aa000055000000008800000033ff440088aa0000550077442200007788
% 0088880044bb0000bb440000bbaa000088aa00005500000044bb000000bb88000000008800000033
% ff44000000bb33
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767688b8583e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000033eeaa2200000055ee88
% 88bb4edd77447744990011ccccaa3300000044dd5500000066440011ccccaa3300ddbbbb991155ee
% 8888bb2211ee8840ff7700005566000011ccccaa3300000000bb000033eeaa22000044dd55000000
% 6644000000cc00
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000003366224444660000
% 00000000000000000000000000000000000000000000000000444400000000000000000000000000
% 00000000664400
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d97d77a59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 5959599bf37676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000009988112266330000
% 00000000000000000000000000000000000000000000000000005533000000000000000000000000
% 00000022550000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d37676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000001177887711000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d6a5959595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595959d37676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d8eba6f59595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 59595985eb7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767691d7643e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffa07d7d7d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7da0ff8559595959595959595959
% 59595959595959595959595959595959595959595959595959595959595959595959595959595959
% 595959b2ff7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffe5dcdcdcdc
% dcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdcdce5ffde9b5959b2d3d3d3d3b259
% 599bd3d3d3d3b259597ad3d3d3d3d359597ad3d3d3d3d37a5959d3d3d3d3d37a5959b2d3d3d3d39b
% 5959b2e9ff7676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767688b8583e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000757d7d
% 7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d7d5c00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e64ced0d0d0d0d0
% d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0d0e1f7eed4b8b8deececececdeb8
% b8d4ececececdeb8b8c6ecececececb8b8c6ecececececc6b8b8ecececececc6b8b8deececececd4
% b8b8deecf37676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e710000000000000000000000000000000000000000000084b3b3
% b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b3b35600000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e64d49176767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767691d7643e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e5c7676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e5c7676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e58b38876767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767688b8583e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e7100000000000000000000000000000000000000000000294f4f
% 4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f4f1500000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767691d7643e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000006b7171
% 71717171717171717171717171717171717171714f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e5c7676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e5c7676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4b877f76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676767f8f4b3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000001100000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000bbbb88ff9999ee000000
% 0000000000000000000000000000000055ee88000011aabb33000000000000000000000000000000
% 0000000000ff11000000000000000000000000000000004433bbbb88ff9999ee55ee88000011aabb
% 33334400000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000660000ff440066000000
% 0000000000000000000000000000000000aaff550000444400000000000000000000000000000000
% 00004400000000000000000000000000000000000000446600660000ff44006600aaff5500004444
% 00006633000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ff9a76767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 7676767676767676767676767676767676767676767676767676767676767676767676769aff713e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000110000ff440011006633
% 77223300224400002288660000000000008877ee3300444400228866000011556611000044446600
% 0066cc44005522224411003322002288660000000000bb0000110000ff440011008877ee33004444
% 000000bb000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e5c7676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676767676
% 76767676767676767676767676767676767676767676767676767676767676767676767676673e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000000000ff44000055ff66
% 9944bb0000ff00227700aa880000000000880099cc114444227700aa8800bb0077bb2233bb009933
% 0044bb0033ff4411ee22007711227700aa8800000044bb0000000000ff44000000880099cc114444
% 000000bb330000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e548fffffffffff67678fffff
% ffffff67678fffffffffff676767ffffffffff8f6767ffffffffff8f6767ffffffffff8f6767d7ff
% ffffffb86767d7ffffffffb86767d7ffffffffb86767d7ffffffffd76767b8ffffffffd76767b8ff
% ffffffd76767b8ffffffffff67678fffffffffff67678fffffffffff67678fffffffffff8f6767ff
% ffffffff8f6767ffffffffff8f6767ffffffffff8f6767d7ffffffffb86767d7ffffffffb85c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000000000ff44000000ff00
% 0044bb0000ff0088998899880000000000880000ccaa4444889988998844cc0011bb001122229988
% 0044bb0000bb44008888008800889988998800000077880000000000ff44000000880000ccaa4444
% 000000aa660000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e58a5a5a5a5a53e3e58a5a5
% a5a5a53e3e58a5a5a5a5a53e3e3ea5a5a5a5a5583e3ea5a5a5a5a5583e3ea5a5a5a5a5583e3e8ba5
% a5a5a5713e3e8ba5a5a5a5713e3e8ba5a5a5a5713e3e8ba5a5a5a58b3e3e71a5a5a5a58b3e3e71a5
% a5a5a58b3e3e71a5a5a5a5a53e3e58a5a5a5a5a53e3e58a5a5a5a5a53e3e58a5a5a5a5a5583e3ea5
% a5a5a5a5583e3ea5a5a5a5a5583e3ea5a5a5a5a5583e3e8ba5a5a5a5713e3e8ba5a5a5a5713e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000000000ff44000000ff00
% 0044bb0000ff00bb44000000000000000088000011eeaa44bb4400000000cc555566001188448888
% 0044bb0000bb440022dd333300bb4400000000000077880000000000ff4400000088000011eeaa44
% 000000aa660000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000000000ff44000000ff00
% 0044cc0011ff0088aa00005500000000008800000033ff4488aa0000550077442200007788008888
% 0044bb0000bb440000bbaa000088aa00005500000044bb0000000000ff440000008800000033ff44
% 000000bb330000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f000000000000000000000055ff88220055ff55
% 0000cc9988ee3311ccccaa330000000044dd55000000664411ccccaa3300ddbbbb991155ee8888bb
% 2211ee8840ff7700005566000011ccccaa3300000000bb0000000055ff88220044dd550000006644
% 000000cc000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000003366224444660000000000
% 00000000000000000000000000000000000000000000444400000000000000000000000000000000
% 00006644000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000009988112266330000000000
% 00000000000000000000000000000000000000000000005533000000000000000000000000000000
% 00225500000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000001177887711000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% 713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e71000000000000000000000000000000000000000000005c3e3e
% 3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e4f00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
% ac9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9eac00000000000000000000000000000000000000000000759e9e
% 9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e9e4d00000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 15.950000002980232cm,7.000000002980232cm tmpPSFile -o
%+ /var/folders/45/rt15lwvs41s06_d6c5bjdr6h0000gn/T/latexdraw/latexdrawTmp155889888810779952/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.05.26:2028
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE5BEEAF327694DCBD37D0F25A4455
CA1483842C7EC50271156B4EF9FCABBAB77FC44F0A45292B2CB9C7874C114F57
A185C8563C2D5E37C2128C874FB154C50F3E6E2CA996865878EBEEEAE799E3F0
B9CEB22C9CF2337EAB4F702119EA2B28A2CC54B4C09D2633BE30E90ECFCE19F9
E81212DD08638A4D291567D081D4F769B5CD39ED705848382A85282F79E181EF
F14733E3B857A5EC177B033F9B4060A18B6D6EE4E5D1A32026B5D6108845E0D9
57FC2B4F6DAFDCA3EA36017EAA8F1F4128512A8C9D7D1960C869B02BBC47434C
1FA9AFF94A819BD094842D0A31DBD42493D2DF8A406D54E7353D9ADEC689CBAD
DF0CDFA1B1504F28F2E2081983513109C189915E0CE863C36799BA1D959BF559
D2BDEF185DB88746CBDB5AE1ACB7E338371EA9E7010EDDCD6EAED3764694E07F
4B4DD8CB81852F3379F1C707F172ADCD6196E6FDF82F6D92A3F11C7EA1FEE81E
0E07991377B26AC761B1A938DB70C841821BEFA38DFED33218AB9B7BC8F7037F
433A0AB962F52147208D9B48B7F6C1FD5174F5EC78D1B2379918C8034B085889
36A5E70ACD844E3367DE4DB71312CBB85ADD21D5A1F059D248C6D982B908FDFF
6E6135A30D1F0CCA7F099B22B0E7C0F051896FB41AE2540A14A61AF7FE9187C8
84B0705AD534722FF10916C8EE47B1CAD4DA410E69C54243132A26EAE096714D
93ACD7F6542D3AC7389E3267A0A65667D196A0C8AD7FB7FCAF2CB706D6B35F11
05F188B286B21A6FA69542799204EDADFF6EAF5E398EC3C64878794BEEFD8F3C
C8AE4E8129F49519DDB944636A3ECA4FAAE0996226F56EB666E9920E5D068834
4B48CC15AA4A254AE13660D5360139F38775EBAB53F758648FB82BC37BE81D82
5F1372C73DE5B5348DB0B4782BA6D48AEE80D379CFEE11E4F1CE4FA1D1327C3F
8AAAEB5790D9DB3C8E9EED4DDD03EC7F387486129299A31E2083E4DE5A410131
B866B55C6E256E4AC6D819088D50C66063FFEC2811B93E04BB2B9470EEC62B03
337F0CA3C59EE43951BFAD362AEB9C65A133D00285C4FD7E49FA5D2FB569061C
AE94BBA4195148EF85AE8B996ED2477421F6A82CA1E71C3B77002BECA5A8A171
A4A419CC0A8E0068725315DAF353D27F511B1F01835DCA3FA88A475ED04DCCE9
4CB4C415283E72EC447BADD5BD58B053A11BD770399E341E96E3A389F5AEE311
E7B3B067EB437C6101AF5B454FD99CA953C721060702EE12B0D8EF16982CAB28
3DF04E258967689F4606651E5887FE8A7D0EB869E3FA1B3C3155C4C2C929D8F0
17737231BBFC06C0EEDE302CE296784FBF1DFA083880FCE3E70E8DE62B6B1331
DA7E81AE0E602AC9EF13081DF372748CA30B95A742B0C3FBCA70F0D39090FA4D
7D5A08A8D1B565421D09F5F6E65E89CB5A320D781E65ED853EDBC5391D91576F
084F19F6BECD1F0EEE90649569F08576B22044376A52ED664ED311882FA04F03
2540A53A22CF7C554C01361759CF6314FCC53BE27CEEE5696F68966ACAA484F9
7733E1206B17216756AC75CB0A6B8FD43C58490E5807F0B584E6404384CB7070
7F4F0F088114534F6D36E4D76A562FDAF5B71B02810FC3BC4404EFFB1A389A34
2094AF8485F01346CB8E17CD12A285205B2D5D6FBC1E82A312356BEB75F128A7
3B8F4371E90FA42E1529406EA44AEFE84130BD4D15BB2EC8597057E4EDEBCE79
E16872A5C2A3AB701369C9C627C4A31F0982334E7C7373EF64D457FFCBE41CAE
0129E9F3CB9D1D32F1025382DF5CBD3F1D0E9D0D05DF4C44D23C067C14FA4ACF
6F398EDD7583FE4BC0A3A38D51AC2871CE391556D402980351572F41285EAB47
20FA13E7FED9806976AA4D80E4FBACD4BC0A14836DBB4E44D6287E9A8700D904
C85392E7F56CFB6FDA12DD94D50824751EF6B625DF336FD68FE0405D523BD800
AA8E0077DBA29EA131D482990C4543EE80715BFB38D1B7378EDFF2F43965B0AB
37DAF5FDF708963DF6958FDB5AB802188D0C53BE5812C353C91468C816761BD3
FEFB23792302EDFA3A4C732529B3CDB0A0081FDAB6BAF8D90EA63E5821FF27A6
678EBB743EE7B1D1FF664133DA8677589C334F5B35A969EFCA00BBF6A73BCE98
BB5A1D230F7240BCC29C59A4D831D17BAF6B79F790CAF157308D2AE7BA9F3BEC
6CFBE152CF08C99F6AFA1EB6C11FCCB97085652D69F440511DB1F64A49241287
D41A520875F1980F7083F7F2615D1CBE114281D58D378A8092C409277FCCF929
E0D0A857D45F196072BDA02CD6731AFD05A67E88D3217B8574EB78EBAEB87EB0
B0DAC96A40338DFA1DC328A6398AF0E412335F92025FB76996212BEF9E6158EC
CFAC45BCF51CA7198E87F09476ECDA65BC035327144B153EA7313133DF49A031
282BFAE4DA1821BCE41F9876BB694960A7E341A5CE1DCBC03E939EF88A522A8E
E6FDB6827637A8042EE3556C1C1EA94240333902BD7DDAB1008573D95DA4D540
CD29233AB4FFB0432DF191F11B0D57194CEAA3CF90E2897662A5A47C82D235E6
99A5FE7477ADEC3800693DF0F087F0D7AC63A56C8F43140871BC3C06D1AC07F3
A853B237C2C893EFB4CE7D6AA97BB8EB3492D7CB171B88E5A3F4297F9E1FFFC7
3A794BEAD2848BF7DB976A5024A91688CBB2183365A4791A17CF78376F897FAA
B0BFA1F4484A0F156840F734FF38FD6C5597950508BA414FE7A36ABA3FDA0AB0
C6ABC03B91FFB1970A7367CC0C408D08658043780122BB27EFFB3D682032425A
76E6E190E929C04FAFAA990BF0EF079B0C712F7D2C8DF98D4830A9D8C8B70A8C
5D5069C63CCCC7D4581D1D357E52311AF227B3E316B42E47D999B464B9D99643
7C978A252CCC767AD09AA9ECD7B289B760B6851EA1A9D31C01577A0026C7929C
87157F6C7A104D3408735BB8ABADFD4F58075F2E4A735C637A6D15736C339C5B
FB43AF47577453FF94AE6677262BE5CE7D28E72B129E947AD593B48B3DD05D09
D0F858CE686804C3F119899F5BB3DC8DE39690B5980AE32BE17425D2AE291D57
D9B1C9248333FDCA65C72B808145F1A193C6E5216DA88EEAAFE10A6CB470B3C2
4AA50054344805A5CFECCD2A1B04883C54FFCF543FE520D15AB74BEFB402FBC3
3EC087639702C9995E358A369EA42204B350F84338E567A237748CFDCF12BFAB
15E7C7B592D605D74D02758DB39457BA581E7207A071E11D3F168D1CD6842962
F7BF0A301EC9F7A07DEA1D0391B73F69D03C451A8C4ECBA4CC50F8131D570FF2
C9540CDE769503AAC12509A49BD69E7E6736A1BD7072A987295B3F42450E60DF
7A27D153F5B5FAECE0ECB558341F4CF2448FEBFDAD510D721956F7200EAE8F93
ED95AE429D7CCEF884BB311DB67D0136E0984ACFF19D2AB6FD302284885E5753
843A42942A17ADD7ED20E5A361F1507C3F02E0F8A0DC033E93B040A6121DA499
CC2DD64BDF021D419689E7F2ACA8DA3625DBDA1B37558100D7CDB83A2EE3D973
19A0009DA311F4899F65E76D6828EC814FC4DFC75455A2200DBC805F99EC797F
49979E2083B09EF5B081D3EFD3D8CF64D8F619AE619F5CF7C0B1DE07897E90CC
693374507079E391BA7F787FE4A2252A2D2B9451ABC154BEA826E96D955CE6FC
83336504E06A82A1944DA1AF6F34171BDD354E8662C911AF08BA10DD77F1024B
1C53AF1802803BAFDF633515DD1E707437CA2E23D485799661E8A945F29CD256
1EEF396F36AF15007AF95C4CA14D63742A84A198ADB0555C4F62C6D0767EF9F5
9670F469C6352D145B6CE67641BC3BF78D51642D1263CD8BA3EAEDBEA3637772
7A3D64A7B99E2ADC7CA4DDB1A935D8F04A09BA44BDE4073830EC104222C34352
D7801CEB38D2DFB29681937CCFC7A1329DD05DE30B406502017F9FEE03EFF627
4178BA5FBAA3F6A4123FE86E6C93B35A1C548170673704783F5CFA6A99012652
61390740F03087FB7ABB9A77EE4CAA9FC8F553D48888AFD8D23944A6B4526668
609ED080F8D65D9C5486F9A4E798B706A8EF106093EA39091D559673798435CE
532956A864B66EFEAED5C16287F5E1B37B8AADD3CBB1CE596A0A4D093163E531
B3D50F2EB89D66F8BE7ECBC8A6F5489B0C17900AF38B219AC1F9F4C9503149E5
514B919B0C7D8C0E74CAFDFCFA1645EE94D1CEDF1E2D29BB43864AB5B770A14C
98A43D4C7E876D3A2E7E499D9D4104762FD19BA0526D38D905B2E16BB4CE6D14
1283ACB0BDE6E688A19294211DA84CB3FB1C511225CBE26522F716B09B512A59
1D614A72B4F375F6E1027AC6FD3B3EE3A3C0572F13A5AE0408B8107BD17C259B
723F956B5B147E7C0D6AACE0A81BA9FE140A414756618D7F00976F9C9235A7D5
5C1F54066661038CF2C93BEF8D83E143656B00CD2186E8AAA21208B5CDE5E910
DE7DF368CBFBAE8B109F402ACCBAD7D004F8F0EDFC4ABF84F6030D887AC6A641
EC9D5A4C763EC2A172263718D3C0B2DC97F50E034EAA1FBF10B71D8253E6F8FA
7AC8DD1F4DA7BB92EE841CC8A4216E4DB5EC85E5830B36D54688036EE18D0760
98C9E80B5C4C24C03B8EF5E00BB3C640A57AF7F52A51C0E570C9358686071FF4
5FF489BCA0F4BAA4D5D965566E5A1F2B0E800320CE9D1388EB08F9A8303DAD8B
DEEE81693608193772BEE2854B571F9A985507EF4ABC1A7FF32D6B82BF37C372
6993CE2E3BB3F4CDEBAC6A13D24C0527D08A086828FF39B59D88927C77F382AD
E823A63A25A45B490DB1F404016CA237842D91C888C0A5ED64B8864A31114F6B
B6EB3FD6B61A3F9DB81A13342AC3BDFA5DAA16326C43C1C98034FF48647989DA
1575270200BD7FF92DBBCE2B1A5198DF14A0973141A8B21AA9513174441C7C39
6569A7C1464440E94E8C8FFF11CEC85C40A0CBC5728470F61121F8DF2D042261
47F3DCA998C35A20C9363A04A38EB0371641791FB352198FCD203D4094F98FDC
929CF28A26C7D34160D4022FCAD9DAA18077DED5083963DBE72532C2593550EB
0DF54DF41CB97FA4ACCE1DB888D62E4193A078C85A8400343523ADF3F8F0E803
BB5BD4820116371AA03AFAB80C5EB281EFEAE6C9A7CEA474FA9101A31DF18195
E51C6EF032973C660F8A88A1937592E08EBA9CB3660B392EE5D648F34BF550F5
379383B675497B70C092A5E0B26548DC6C58F45419B13E5E8FA3271891B6915E
C9C7A3331F723FDE3AB76342C3C602218800E2D98F68FCDB34504F03DFB89904
A846BEB906269EF691B4B66A9FBF2F42FCA76CEC85842AF50BBED0BBE3BAFD20
7DB1220E6C4048B8655DEDE439F834C4393035499AFCBB728DD29B9469C5AD1B
7495C1BC9B158578B38270497398D5059866AC6364240D2CA9BB9910B05463B4
9FFD8EA7AC9660D7403C21E9BE0AC55C4E24DDAD25658850AD70AF668EE30EC1
BF882D7A22ECA93AF0A8A9901C82B5A6E7746DDA070EF8283D8B43DD0A921201
472C81AC5A18E297C43D0E8EA0380811858BA57A263572ABF5D407899B0F5249
4C2E3E4F7BCF56BBAC3440FB215B3775E04C4AB00323F8BA1C1251384E5A94F7
899F271E872B94BC61EF4557F171837217ADFCD072EC8BE5493262863BAA72A3
996E281BC4870EA713993D9C7A7D438AE920307DDD113BDAE776CDFEED3CD0D1
6750BF723DE8B7A3F808E890D1582BF14A7763A3E714F7C2A423A6835071464F
3057FB8029DDC4006CCD94C3F0934765641CCC6100EB759CD73B3741C0AC1152
52D468CCF773F3D5F482480A69070C62EF5D61F8D9FB4792BD162749C314A925
BB2B568B4FCB89C24A65BD957BFBDF8F399F62A325714D3FE8C3465B0894FDDF
19DCE7C1DF4FD1FD329CDE3EABE6E440CB1E214FB9E23408B28BD69813D251D0
61F6839BB254F668BF6185F07A6DD53AAB892ED473527B23AADD1182FB0F4303
42E9A29F7FC1652CAD2B53DDDB439470332127FAB871F7AA5A5FCC57FDDDD0B5
9DBBB61011C47808B58C390145FBF6D258F56E13FB598AC480CCB85DCE8447FE
03894A3B85F9A0F8561B7AFBFDA29D92D8AD16C411C393B08115319756A5BA4E
DCB73F8270541FD0149237EFBF960E46497AE14477F0A73AA3378920981409E5
BCA0A0B4E8496E9ED8CC2652D81FBAB79BB44BB8012BCCAF8BA98B7E5E0C277E
C06FC91C453699693980CD572F464DD4FB83FB8D0D20B81967E58ABF55416529
5F1BA13D098832C58EBBBF32DBE73BDF4B16CDFB09DBC413D72C05BE360C1779
5C1B29AD7F7F6954FA295542292682C61AD2BB74A4454DC000F3F41847CD5B80
F874779F6AA8182F067515CC906885AB05948B3370C5763BB7D3096AB2F6E1A8
35006F1BAD394692F6589AC0086F205415C83F3223178394A917C85BCF3DA380
5EFE072D29F9FA78CDB32A00E0BB3603B344066C103F6BAF5BDC32AFD8FB3226
EBC7C43C31276A3946D954445D8074D0649A40BCB8F03D5FE98ED79EBE355E0E
926ABC7B5A699EC52D8EEB653C8135B8CF11DEA849CDF080B3EAAF4263D0473D
7215DEC39DAAF0D7D27A6EE39E14EB015BC1AE74FE3D37FBD965CFC04F2F279A
112AF9FEFEBDC48F8E503BD8B016259EC5EA933D1A469A390397B00B062B1BF4
F116E9CE38CB74A34719D07E1ACF32D0C8F256C1B832D55382E122B1708F7483
36338503F6F2BFCE27819A25291292BFF6EFAE3F2D5D8DC929C750FBF2545CF5
6C90BFA493EC6B11CA8EFBBE673AF469F086F988CDD9EFD4AF398B968C9DFB01
34E385A92FDF16A986F7F79DC3024B52A09BAB0AABD08877F4E50B6B2B1E9877
D715480BA027EAA90EB53B675728415AAB552728EF630E233E74DD4FB17F6E1B
DB67B9AAF1B194B661D5BAB529999E95BFB073B5FDF264AEA0701B2A6F582688
AC080E865F0FDD66135DD6A5E83C02F440896810C758889ABD1214509BE29322
CEE18BB21D9A2C1ED6E594A6000CC30C12EE9B8B2BD2FBB6CA5F657F32D78828
2B978A4BFAB1D828CF9662E4D8F67001AD7B4E649073F95ED95DB35A559C255E
88261D890D06A2158724AC4352EBBD4BA07439157A6DBD2F81AEBCE53A2B5DEF
7197954D8BD5C7623F38D58A7C524CE5851CC83DBE0891D0F79B13B4E8100844
CF77E73B7B02A4018ADB15BCE78F8DE2775962534C8864120F5EAC9AA09148F4
B1118179748A71127A57E99C50B78FAC6A62D7CE3CED36060BBA2543BB109C8B
0D59E6CC257CB5621933DC5929F623CC2170D7F4E8F2FA31E9C9379F2B3440AE
B83539438BB83563DD62A943C15CCE64A657C543DA764A19610D5364892FD767
385FA53C5341538CC03D6313DDD2AA0DD56EF7F81C7348F7EAD0EADD41FF95ED
850E34EA24030F6670C4C2F1EDA5E1FFDF69557C922A954BFB4A7E3C421EC91B
233C05C2761E1EF109B36DD4226A16A782A4EF9481BDBABA8AEC274D5A5ED5C6
E03EE8CF0E20E7D2C8CB2CC71FD579661F3E2FAA545124489C198D1CFB1E0292
704DABF60091C4361BD3A306119CDD7E614BFFE78D620B16808382A0918D2879
A96CDE8162141FC59518780C3B54A7F97FB71177171B11D628905E13104062FC
2701BC2E713721762E31F1BDE3828D06AA015B887F142270495D7667288FA850
EBF93E25D24EE845B79B4BA1FEDB0EACCDDCF0BC20950017FE60FF5670682AD5
08BD53378B3E4574D9034CA6865940CA0CBA130921110EE6136379140DE5FC98
4C54F9302EA55BBB16E9FAF87691AFE304CA7B586F198C426A71DFA8CEDBE3D9
46DB0C074064AA534A2AF512C1F2BC5BEE9F218015107391DF335D0DA4FFDB85
EB2013C9C2682963466334F43D5BA418B0253C4D08382BD6D9D3EDEFF445A861
8D91B15C38246FC103EB63B58F306B37B0E94864DF4D44198440FCAADCE33CD3
1F2C6CDEC647427127EDAFC2B53FB0392AF86205E89A7B698F02D8D99746099C
8E3C67EAB72E4034AE2A2783A9B6AC18E5772FC9CF4D1A5F32B6E67A33FCC0EE
AF427509A017AEA91394ED682BD0D744DC93E60DA6ED4BD6582E09AFA20E8EB7
29B3B434BFCED7C3A7C56C899507685463B5EDCA650BC7B94A33650BA62E2F2B
FFDDF14F213CD7CD76A4ACB210B49686F7A2BF06B51FB2F5F1D7A28B989F044E
6F7DFE5F2A884E20E391F7EED726069910DB5BC75944BA31EBBABC3607BBF7D9
19FB547C6E34F7B179E22F32A854E4D40051AE458456EEBB573A1A325D45D49C
B12B6C93D1A71108E67F518FF94E637189D45A4CBFE14610F054A18E11BFC8F0
677F7473BBC8F898D0459DD17910994FE998985E08F174464F63F952998C3ED8
8620975B40A13AC25D5FB37CD18C66727A37A358B1683FBD08E7B25433212B4E
4CA2D203D5E732FA02797B386F2C69DCADA10DD79E71C527867BB83EC8516C6D
3DD8874B0343D41E551CB2D3F55CBFC8CBCFD7F9AFB62B4BC36E01542ABB1116
532AD67AEFE0758C051241E301C7E13EC40F4616E8BE9BA7E7041A0DBA006FD9
963174FF8638CE33A18369FB3E983597014EDA4FE2BB6704E49C95301C038900
38BB100E2332B0264C617D7B27C8492D7B6D566166D278DCD15B4C783C1A33DB
B537E0E982897579E239036354C6BF79126C436F4C14079CD216A6C58ED7D239
11F4AC44FA5358837F7CC6ED863F0FCCE5F790668787C30EA9BCF8ABEE772BF8
AB008463B09B4CD634C6940D6E62753E97CE1C0B152D66E148E1C5883A9EA151
378FA7BAF7DEFB9CEC1E1B34631245B0CD0A89C7B57A74AD40360422F59F5062
5FAE9DD08A8BB3C39D282B7FCC8D9998865C8B6D7EE450BC57C3C08497B28DFC
782B3E7ED9A8D1BE060CB343627CC5EA64D47B8012CEE0906D18D2BCF947E22E
A79D2C8F57868E2AAB61A3C1D0EA8296F3EC0D75EAD569E7BEF81B02994E8C52
23459D18721914C132340B0D30B506FB4737BF696E508D2DF746F9505BB13D88
57E4002B058B3A4F9B7B12407BB9BA16F9E60D3EBEFB84096C4F8F376C400DCE
97D3384A06AE373CB36B5667A488C79D5CDB649904499B09CD8F1266A3FFC61E
84B1C1EFA0C90B254C1F2903E365FB8120D2C09627E4E636DDD749286B80A5C2
2474B49FC5C093A82154150B060D472889E553C988126096DD343532E74B5C63
6F6A64F8BFE75DE0BE2B368F46AE001303C0A8AC1105AA6634B8E5E2BCEF8282
ACB06F53D5E9AB73CAB5CDC8B51236E42B64F1DE8F7B8246C840F68A08DFEB68
B6157B099BFD6576ACF2CDF306EEE9E7630EABC9D0D922D5E7411AAB9A60C2FD
F1D3759ABCDA9DB4FFB4CF7054127EC02B32BE0179DEBACAC5A6DFD51F6B5047
857682DC388F5339306A9F79BF2523B16A083F710C102E07B54D31ACE4F3BDB5
3EAE667C420CE57717C29FEE0A4E363B2DEA419D1F6A957DAFD77599C504C8B2
B7A6A708FA6D15029518A84A313834E9E3C9722947CE7159296450FA680893D6
3E46E357EABF76D495C37A0C293FC52A650FC1834BE0148CE4477D83A4E385C6
4EDA6ABDC2BABA111186A0F38F642261843011FB3389DD9449620C5E0C505FEB
4BE079BFF6445E99220994DA27E80A9E3E4455EC59EE2D2E9CD54169CE006477
2230610C8D83F4C905EA5554B871C20EA78FCAAA7219B8C2F3A90F92B2E66949
020D83C8A590AF058D242DF7690D25DF904AB13682009A73FB4BECABA9A20AAA
B50C18893D2CEB5B7C391AFD5E90F0F2133D75491688153C095C301D76FEB3B8
88B94D75A3CD33A50ACBD8789840538DFC9B1866DE5CE69331A7A0BD3B5188BD
DE7D9B52991CEB2EA15CCBF8BC6D206248FA07BF7F3C5C11104D04599B636C88
B1A57308FA151BD30234288470099DE06954D4EA3713A80F6FF9BF383D4AD303
A10869C78F535DF7ED3AC5351A9DB989D1429B691D3551D251B33745F630B394
8C7BE6C12950AC81529C9167DC9EA479F1BA132655A210FCB74F1B7DAC8D1B8D
7F0C721298D6037138FB3A6EDB408063F1E8A9292428B93682847107FEFB18EA
00D7D57DE3315D5161C89CE67A66D43F797C02EA83067897543709FDB6C2261B
C4E1238A065D5C31AB3FC9257E6028FCE80FD44B49B895696F8727D4487277C7
EB40A734C964D44749FE3DBAF57FD3F4EB9AC07D6AD9E5940647BE45616C1FF8
05E20A61FEA3EE29290E8FBCF3C31D814E39A7AF6D63E560BF33DAC2704EB06E
F87E4D5F345B438ECA16CA570CDA7AD873F8751C6B62751EC239262B3E0E30E9
274648A3DA394E0874762AAB12E99DBD0534761A3A836D856FBD276E197A6C98
DA8C7EF7622AA28F9621DDC6468417B87F28E6C6EE888DC2C6948F97CA7B0FB9
FAF97D4D2E34C53096A7777AC47A9D2F4A10FC641139C246B2E6075532C1F9DC
9342A9FF62958AD41966D135E09A46B054586C5297F79A507E60B71CF8C86412
D89C60345811FA5C9924056F33EC73AA4B3239F64E3F892A1E914DBA0530EB58
E299D8D0B1A01C9D5785358049372E5A6333E7D135622EB95094989C075C4308
2F35DD1A1E92D27AEE0923C6D15BCAF2C96771206120DE0DD1A327381E61D991
794F62BB1A827919FFE46292E89CA2D9C951CC7D35F54DFA80EB6CEF2DBAF515
4656F4EFF1AB88DCB4491D5E387D95EB37E64B83ED1CB9FF5EDD443BEA82A1EB
7210A3472127296DACBAEBDAEB9BA2099139F591D67F9F2C92BBA52E3F4CD615
2070A8FF52B00B40E528B129325F88C58CD3DD8349894FB974A517306B1C104B
1DF495A7FE087147BA2C960E84EE96E48EC2FD3BC96DD2D519D0E8EEA22F43C5
E2495E7CACB61BEBA223C318DB88ADBECDD67DF886769F61144C11F82922746C
6DFCC83699752B7280F572128CBF26086ACC86EE2917C8EA0629E116E7477922
2B338EFEBD4EE7684D7335408780927BF3EE269F82C6A37571A20E02696DE8D8
C200A1BE17576DC912B01815CDD31E8CAD99F0F08BBA858FAF5022413AC49A3C
64E3FACF41E19DF3D10A60B86E5B38578ED948A2B99A66AC6207D5DDD920FA84
80DBFD9C68DE82D4EABD1B68D2C5520328F7A0B2CBDB5E0C03AE37BD7E6816FA
7E3CEC2A5A45C4837C936592883C4964D8EB7FB486DA3870B38E4100D67A54CC
DBCA9078756F81A6570D834B59D42699C9DEB9A794D66DC383AC1097DBF5F327
F5443596FBEE840ADED048C3CA13857D29BD415516BCE147A18BB0C0E96BC154
546C595FCE9BAE381D0EBECBCAE8CDBF36AB6F9CB13F427C3C8FC74BC4AC8A5E
76C45517D279E00C81D13BD71A5EAB49A5984F918EDC67D2F0E1E333EF6C7D6E
706D36260ACF318045273E707B06ECE5265BB0B0F071EA59C1E6CDCFCB3FD930
F40BACADB468E076FF5F23564E412F9C1314538E33D7D7AA13FDD13235C6645B
2AC0056BD9821599FC08242F6886780B2BE9553D87F873E0210C1A54B4461A78
E9FAC488576257F0FEFF7B9F2AB28C457C8441C63490E98E2B1DD10F21A0EE0F
EC2E7B2532C4878DE7F7F3FDC2D8C4DCFE950B27DC410469120CBEABAB5F8157
590DC0C6775A7D850BBD8C9BFF3CE9CB44705DD4BF7CA8031EBA537D4A23CAB7
09370902FFA2251D2E109EB7251696C8F8C2C5E89FD2CDB1F2D3FDAF77C3D5B5
95833E1EF0B25E03458D791D19BFE8A48F97F76C922665826DCE0CA0228B7FEA
8D2DEC9DA28750A41CC8EB0BDCB3960C8547936EEE18E133E8E539FCEE55D69D
C9212141AAEEC06D583C96F69F2204B3B4CDEB05F2740A5233FB9F50B5F54A98
87B975C4C660797810CF69A3E5B9902DEDE70DFB72080D049970FAF1A5D665B0
DAFAF0A845B35FBD85C4C0305819BC457539F07D13BF904E9A0DF3C23570F78B
C137B12C1FB52B85053185AE6C72680866E2E59D505200F88EF451620AC7F4F6
0A4F1C08A4451BD3863BED9B88BEFC6BE6D387242056F059B9C1AF78247252B5
12EEB3C01C1C67EE5492DB9C7C6CEEF8A963581BBA6A314E28759615EA8CE831
C9DD16FE50F3145D1CA37A52C361309B09C86B6138FB2939A76F6DE2301C9196
9A5A1E6EEB904293C2CD069291D513289044725160C71F985BA467E482C2C9FB
A00CF93F8CB09BE50CCDF132F5DC685457CA98263D65BC360CF563764D7E0D8F
66F5AF728303F8213F540D0CE2064D23E4DC2BEB8D989DB2FC0A26CBE801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
TeXDict begin 29741646 13052760 1000 600 600 (tmpPSFile)
@start /Fa 137[50 50 28 39 33 1[50 50 50 1[28 2[28 50
50 1[44 50 2[44 12[61 1[66 1[55 72 72 6[72 55 2[66 25[33
33 40[{ TeXBase1Encoding ReEncodeFont }25 99.6264 /NimbusRomNo9L-Regu
rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 1030
a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end
 -595 1030 a -575 227 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 341.43292 96.73915
318.67064 73.9773 .5 Frame  gsave 1  setgray  1. .setopacityalpha 
fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha  
0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-575 227 a
tx@Dict begin { 351.67592 81.37486 } PutCoor PutBegin  end
 -575 227 a -1 x Fa(Ground)25 b(T)m(ruth)-575
227 y
tx@Dict begin  PutEnd  end
 -575 227 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 341.43292 62.59595
318.67064 39.83366 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial
-575 227 a
tx@Dict begin { 351.67592 44.95538 } PutCoor PutBegin  end
 -575 227 a -22 x Fa(OCR)h(Output)-575 227
y
tx@Dict begin  PutEnd  end
 -575 227 a -575 227 a
tx@Dict begin { 351.67592 11.38092 } PutCoor PutBegin  end
 -575 227 a -18 x Fa(T)m(rue)f(Positi)n(v)o(e)e
(\(TP\))-575 227 y
tx@Dict begin  PutEnd  end
 -575 227 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.05687 SLW 0  setgray   0. true 341.43292 28.45274
318.67064 5.69046 .5 Frame  gsave 0.4 0.8 0  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.05687 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end


@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.05687 SLW 0  setgray   0. true 341.43292 -39.83366
318.67064 -62.59595 .5 Frame  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.05687 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.05687 SLW 0  setgray   0. true 341.43292 -5.69046
318.67064 -28.45274 .5 Frame  gsave 1 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.05687 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.05687 SLW 0  setgray   0. true 295.90836 96.73915
0.0 -96.73915 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.05687 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 239.00287 5.69046
68.2864 -85.35823 .5 Frame  gsave 1 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 102.43004 85.35823
11.38092 28.45274 .5 Frame  gsave 1 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 273.1465 85.35823
182.09738 17.07181 .5 Frame  gsave 1 0.4 0.4  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 125.1919 73.9773
34.1432 -62.59595 .5 Frame  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 284.52744 51.21501
159.33553 -51.21501 .5 Frame  gsave 0.2 0.6 1  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 125.1919 5.69046
68.2864 -62.59595 .5 Frame  gsave 0.4 0.8 0  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 239.00287 5.69046
159.33553 -51.21501 .5 Frame  gsave 0.4 0.8 0  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 273.1465 51.21501
182.09738 17.07181 .5 Frame  gsave 0.4 0.8 0  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 102.43004 73.9773
34.1432 28.45274 .5 Frame  gsave 0.4 0.8 0  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinecap [  5.01881  3.01129 ] 2 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  0.05687 SLW 0  setgray   0. true 341.43292 -73.9773
318.67064 -96.73915 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 0.05687 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -575 227 a
tx@Dict begin { 351.67592 -22.76227 } PutCoor PutBegin  end
 -575
227 a -18 x Fa(F)o(alse)i(Positi)n(v)o(e)e(\(FP\))-575
227 y
tx@Dict begin  PutEnd  end
 -575 227 a -575 227 a
tx@Dict begin { 351.67592 -56.90549 } PutCoor PutBegin  end
 -575 227 a -22 x Fa(F)o(alse)i(Ne)o(gati)n
(v)o(e)e(\(FN\))-575 227 y
tx@Dict begin  PutEnd  end
 -575 227 a -575 227 a
tx@Dict begin { 351.67592 -91.04869 } PutCoor PutBegin  end
 -575
227 a -22 x Fa(T)m(rue)i(Ne)o(gati)n(v)o(e)d(\(TN\))-575
227 y
tx@Dict begin  PutEnd  end
 -575 227 a -595 1030 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 1030 a 0 TeXcolorgray
0 TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
