%!PS-Adobe-2.0 EPSF-1.2
%%Title: tmpPSFile
%%Creator: dvips(k) 5.998 Copyright 2018 Radical Eye Software
%%CreationDate: Sun May 26 14:13:26 2019
%%For:zyc zyc
%%Pages: 1
%%DocumentFonts:
%%BoundingBox: 2 2 480 153
%%HiResBoundingBox: 2.988000 2.826000 479.213985 152.261995
%%EndComments

%%BeginProlog
%%BeginPreview: 477 150 8 1800
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000001199888888bb4455ff00000000000000
% 00000000000000000044ff0000000000000000119988000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000001199888888bb4455ff0000000000000000000000000000000044ff0000
% 00000000000088ccee66000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000001199888888bb4455ff00000000
% 00000000000000000000000044ff000000000000000088bbdd550000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000cc77000000774400ff00000000000000
% 00000000000000000000ff0000000000000000118888000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000cc77000000774400ff0000000000000000000000000000000000ff0000
% 000000000055330055ee000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000cc77000000774400ff00000000
% 00000000000000000000000000ff0000000000000044110055bb0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000066ee00000000005500ff22883300223300
% 22440011661188330000ff0011441100000000008888000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000066ee00000000005500ff2288330022330022440011661188330000ff0011
% 441100000011000000ff000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000066ee00000000005500ff22883300
% 22330022440011661188330000ff0011441100000000000055660000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000099bb00000000000000ff6655ee0044bb00
% 00ff0044ff6655ee0000ff0077330000000000008888000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000099bb00000000000000ff6655ee0044bb0000ff0044ff6655ee0000ff0077
% 33000000000000002299000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000099bb00000000000000ff6655ee00
% 44bb0000ff0044ff6655ee0000ff00773300000000000066dd330000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000aabb00000000000000ff0000ff0044bb00
% 00ff0000ff0000ff0000ff8811000000000000008888000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000aabb00000000000000ff0000ff0044bb0000ff0000ff0000ff0000ff8811
% 00000000000000008811000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000aabb00000000000000ff0000ff00
% 44bb0000ff0000ff0000ff0000ff8811000000000000001177ee0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000077ee00000000000000ff0000ff0044bb00
% 00ff0000ff0000ff0000ff9988000000000000008888000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000077ee00000000000000ff0000ff0044bb0000ff0000ff0000ff0000ff9988
% 00000000000000553300000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000077ee00000000000000ff0000ff00
% 44bb0000ff0000ff0000ff0000ff9988000000000000000000cc3300000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011ee77000000113300ff0000ff0044cc00
% 11ff0000ff0000ff0000ff11dd440000000000008888000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000011ee77000000113300ff0000ff0044cc0011ff0000ff0000ff0000ff11dd
% 44000000000055330000440000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000011ee77000000113300ff0000ff00
% 44cc0011ff0000ff0000ff0000ff11dd440000000000000000aa0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033bb996688770077ff3333ff5500cc99
% 88ee3344ff3344ff4455ff4455ee550000000022aaaa330000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000033bb996688770077ff3333ff5500cc9988ee3344ff3344ff4455ff4455
% ee5500000066ffffffff330000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000033bb996688770077ff3333ff55
% 00cc9988ee3344ff3344ff4455ff4455ee5500000066bb5566330000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001144000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000114400000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000001144000000000000000000
% 00000000000000000000000000000000000000000000332200000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44fafffffffffffffffffffffffffffffffffffffffffaffffffffffffffffffffffffffffffffff
% fffffffffffffffafffffffffffffffffffffffffffffffffffffffffbfaffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 00000000000000000000000000000000000000000000bbffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff44000000000000
% 00000000000000000000000000000088ffffffffffffffffffffffffffffffffffffffffffffffff
% fffffffffffffffffffffffffffffffffffffffffff9ffffffffffffffffffffffffffffffffffff
% fffffff9fffffffffffffffffffffffffffffffffffffffffffffffbffffffffffffffffffffffff
% fffffffffffffffff8ffffffffffffffffffffffffffffffffffffffffffffff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 69ffb2a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5e5da88888888888888888888888888888888
% 888888888888dae5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5b2ffffb2a5a5a5a5a5a5a5a5a5
% a5a5a5a5a5a5a5a5a5a5ccf688888888888888888888888888888888888888888888888888888888
% 8888888888888888888888888888888888888888888888888888888888888888888888888888bbff
% 00000000000000000000000000000000000000000000bbdd88888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 8888888888888888888888888888888888888888888888888888888888888899ff44000000000000
% 00000000000000000000000000000088ff8888888888888888888888888888888888888888888888
% 888888888888888888888888888888888888888888ffcca5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5
% a5a5ccff88888888888888888888888888888888888888888888d7e5a5a5a5a5a5a5a5a5a5a5a5a5
% a5a5a5a5a5a5a5b2ffa88888888888888888888888888888888888888888bbff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000033884400338844000000000000000000000011883300000000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000ff000000ff00000000000000000000000000884400000000000000000000004400
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000ff000000ff00005555113344777700004444994400444455006644227722779922
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000ff444444ff006677449944bb11bb33555500aa446655008855448800bb44448800
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000ff000000ff00005577bb44bb008844aa44008844bb440044aa448800bb44448800
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000088bbdd55000000000000000000
% 000000000000000000000000000000000044ee0000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000008888000000000000000000000000000000000000000000000000000044
% ee00000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000088ccee66000000000000000000000000000000
% 000000000000000000000044ee0000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000ff000000ff00775544bb44bb008844aa550088449966004488448800bb44448800
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff000000000000000000000000000044110055bb000000000000000000
% 000000000000000000000000000000000000ff0000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 0000000000000000000033bb88000000000000000000000000000000000000000000000000000000
% ff00000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff00000055330055ee000000000000000000000000000000
% 000000000000000000000000ff0000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000033ff550033ff6677aa66dd84cc22cc6633bb88bb55229944881122cc88cc5533cc44
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000005566000000002244002244
% 110044000022557711000066337700115555ff0000335533000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000011778888000000002244002244110044000022557711000066337700115555
% ff00003355330000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff00000011000000ff000000002244002244110044000022
% 557711000066337700115555ff0000335533000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff0000000000000000000000000000000066dd330000000022dd0022ee
% 0000880022aa0033dd2255ff669911aa0033ff0044770088000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 000000000000000000770088880000000022dd0022ee0000880022aa0033dd2255ff669911aa0033
% ff00447700880000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff00000000000022990000000022dd0022ee0000880022aa
% 0033dd2255ff669911aa0033ff0044770088000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff000000000000000000000000000000001177ee0000000000bb5500dd
% 4422660088880000998800ff000088660000ff0044cc4411000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 000000000000000055330088880000000000bb5500dd4422660088880000998800ff000088660000
% ff0044cc44110000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff00000000000088110000000000bb5500dd442266008888
% 0000998800ff000088660000ff0044cc4411000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff000000000000000000000000000000000000cc330000000066996677
% 99770000aa880000888800ff0000bb660000ff000066ee88000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 0000000000000000aabbbbdddd66000000006699667799770000aa880000888800ff0000bb660000
% ff000066ee880000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff000000000055330000000000006699667799770000aa88
% 0000888800ff0000bb660000ff000066ee88000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff000000000000000000000000000000000000aa000000000000ee8800
% dd77000077aa0000886600ff000088990000ff00220011dd220000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000008888000000000000ee8800dd77000077aa0000886600ff000088990000
% ff00220011dd2200000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000055330000440000000000ee8800dd77000077aa
% 0000886600ff000088990000ff00220011dd220000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000118888778855660000000000000000000000000044880000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff000000000000000000000000000066bb556633000000000000883300
% 8822000000997755880055ff550011cc9988ee5544774499000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 000000000000000000000088880000000000008833008822000000997755880055ff550011cc9988
% ee55447744990000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff00000066ffffffff330000000000883300882200000099
% 7755880055ff550011cc9988ee5544774499000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000011dd3300009950880000000000000000000000000044bb0000000000000000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000033220000000000000000000000
% 110000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000110000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000110000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 0000008888000000115d887777006644227722334477770044bb1177331155660000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 000000bb8800000000449900bb33448800bb4444bb11bb3344bb5533007744220000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 000000aa88000000004488008844448800bb4444bb00884444dd99000033dd770000000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000055dd000000005088008844448800bb4444bb00884444bb9966002211996600000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 0000000088aa55666677aa22aa6622cc88cc5566cc22cc6677cc44dd557755774400000000
% 76ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 000000000000c0cc3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e71ffff713e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e3e3e3ea5ff00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000088ff
% 00000000000000000000000000000000000000000000bbbb00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000044ff44000000000000
% 00000000000000000000000000000088ff0000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000ffa53e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3ea5ff00000000000000000000000000000000000000000000bbcc3e3e3e3e3e3e3e3e3e3e3e3e
% 3e3e3e3e3e3e3e71ff44000000000000000000000000000000000000000088ff0000000000000000
% 00000000000033000000000000000000000000000000000000000000000000000000000000
% 69ffb2a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5e5da88888888888888888888888888888888
% 888888888888dbe5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5b2ffffb2a5a5a5a5a5a5a5a5a5
% a5a5a5a5a5a5a5a5a5a5ccf688888888888888888888888888888888888888888888888888888888
% 8888888888888888888888888888888888888888888888888888888888888888888888888888bbff
% 00000000000000000000000000000000000000000000bbdd88888888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 8888888888888888888888888888888888888888888888888888888888888899ff44000000000000
% 00000000000000000000000000000088ff8888888888888888888888888888888888888888888888
% 888888888888888888888888888888888888888888ffcca5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5a5
% a5a5ccff88888888888888888888888888888888888888888888d7e5a5a5a5a5a5a5a5a5a5a5a5a5
% a5a5a5a5a5a5a5b2ffa88888888888888888888888888888888888888888bbff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44fafffffffffffffffffffffffffffffffffffffffffaffffffffffffffffffffffffffffffffff
% fffffffffffffffafffffffffffffffffffffffffffffffffffffffffaf9ffffffffffffffffffff
% fffffffffffffffffffffaffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% 44000000000000000000000000000000000000000011cdffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff76000000000000
% 000000000000000000000000000000bfffffffffffffffffffffffffffffffffffffffffffffffff
% fffffffffffffffffffffffffffffffffffffffffff9ffffffffffffffffffffffffffffffffffff
% fffffff9fffffffffffffffffffffffffffffffffffffffffffffff8ffffffffffffffffffffffff
% fffffffffffffffff8ffffffffffffffffffffffffffffffffffffffffffffff0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000dd99000000000000000000000000000000000000000022
% eecc0000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000000000bb
% dd000000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 000000000000000000000000000066ff440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000011dddd00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000011ff7700
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000099dd000000000000000000000000000000000000000000
% 55ff8800000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000044
% ff660000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 0000000000000000000000000000ddbb000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000aaff3300000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000055ff3300
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000066ff220000000000000000000000000000000000000000
% 0088ff55000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% bbdd0000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 0000000000000000000000000066ff44000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000077ff770000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000088ee0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000022ff660000000000000000000000000000000000000000
% 0000ccee220000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff6600000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000ddbb00000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000033ffaa000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000000ccaa0000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000dd990000000000000000000000000000000000000000
% 000022eecc0000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00661100000000000000000000000000000000000033bb3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000066bb000000000000
% 00000000000000000000000000443300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011dddd11000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000011ff770000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000099dd0000000000000000000000000000000000000000
% 00000055ff8800000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000aaff3300000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000055ff330000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000066ff2200000000000000000000000000000000000000
% 0000000088ff55000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00002288000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000005588000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000077ff770000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000000088ee000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000022ff6600000000000000000000000000000000000000
% 0000000000ccee220000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000044ff660000000000000000000000000000000033bb3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000066bb000000000000
% 0000000000000000000000ddbb000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000033ffaa000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000ccaa000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000dd9900000000000000000000000000000000000000
% 000000000022eecc0000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000bbdd0000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 0000000000000000000066ff44000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000011dddd11000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000011ff77000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000099dd00000000000000000000000000000000000000
% 00000000000055ff8800000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000044ff6600000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000ddbb00000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000aaff3300000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000055ff33000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000066ff22000000000000000000000000000000000000
% 0000000000000088ff55000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000bbcc00000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000055ff4400000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000077ff770000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000088ee00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000022ff66000000000000000000000000000000000000
% 0000000000000000ccee220000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000221100000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000330000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000033ffaa000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000ccaa00000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000dd99000000000000000000000000000000000000
% 000000000000000022eecc0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000011441100000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000002244000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000011dddd11000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000011ff7700000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000099dd000000000000000000000000000000000000
% 00000000000000000055ff8800000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000099550000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000aa44000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000aaff3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000055ff3300000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000066ff220000000000000000000000000000000000
% 0000000000000000000088ff55000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000bbdd0000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000066ff44000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000077ff770000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000088ee0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000022ff660000000000000000000000000000000000
% 0000000000000000000000ccee220000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000044ff6600000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000ddbb00000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000033ffaa000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000000ccaa0000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000dd990000000000000000000000000000000000
% 000000000000000000000022eecc0000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000bbdd00000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000066ff4400000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000011dddd11000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000011ff770000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000099dd0000000000000000000000000000000000
% 00000000000000000000000055ff8800000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000044ff33000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 000000000000aabb0000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000aaff3300000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000055ff330000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000066ff2200000000000000000000000000000000
% 0000000000000000000000000088ff55000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000002200000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000220000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000077ff770000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ee000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000022ff6600000000000000000000000000000000
% 0000000000000000000000000000ccee220000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000033ffaa000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ccaa000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000dd9900000000000000000000000000000000
% 000000000000000000000000000022eecc0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000066dd0000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000066dd11000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011dddd11000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000011ff77000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000099dd00000000000000000000000000000000
% 00000000000000000000000000000055ff8800000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000044ff6600000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000ddbb00000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000aaff3300000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000055ff33000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000066ff22000000000000000000000000000000
% 0000000000000000000000000000000088ff55000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000bbdd00000000000000000022882200000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000004488000000000000
% 00000066ff4400000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000077ff770000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ee00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022ff66000000000000000000000000000000
% 0000000000000000000000000000000000ccee220000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000044ff66000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 000000ddbb0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000033ffaa000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ccaa00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000dd99000000000000000000000000000000
% 000000000000000000000000000000000022eecc0000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000bb88000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 000022dd440000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000011dddd11000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000011ff7700000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000099dd000000000000000000000000000000
% 00000000000000000000000000000000000055ff8800000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000aaff3300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000055ff3300000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000066ff220000000000000000000000000000
% 0000000000000000000000000000000000000088ff55000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000110000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00110000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000077ff770000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088ee0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000022ff660000000000000000000000000000
% 0000000000000000000000000000000000000000ccee220000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000022ee6600000000000033bb3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000066bb000000000000
% 00dd8800000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000033ffaa000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ccaa0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000dd990000000000000000000000000000
% 000000000000000000000000000000000000000022eecc0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000bbdd00000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 66ff4400000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000011dddd11000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000011ff770000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000099dd0000000000000000000000000000
% 00000000000000000000000000000000000000000055ff8800000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000044ff66000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% ddbb0000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000aaff3300000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000055ff330000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000066ff2200000000000000000000000000
% 0000000000000000000000000000000000000000000088ff55000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000bbdd000000000033bb3300000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000066bb000000000066
% ff440000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000077ff770000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088ee000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000022ff6600000000000000000000000000
% 0000000000000000000000000000000000000000000000ccee220000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000044aa220000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000077
% 99000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000033ffaa000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ccaa000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000dd9900000000000000000000000000
% 000000000000000000000000000000000000000000000022eecc0000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000011dddd11000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000011ff77000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000099dd00000000000000000000000000
% 00000000000000000000000000000000000000000000000055ff8800000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000112200000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000003300
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000aaff3300000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000055ff33000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000066ff22000000000000000000000000
% 0000000000000000000000000000000000000000000000000088ff55000000000000000000000000
% 00000000000000000000000000000000000000000000000000000088bbdd55000000000000000000
% 00000000000000000000000000000000aadd00000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000888800000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff00000066ff33
% 000000000000000000000000000088ccee6600000000000000000000000000000000000000000000
% 000000000077ff770000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088ee00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000022ff66000000000000000000000000
% 0000000000000000000000000000000000000000000000000000ccee220000000000000000000000
% 000000000000000000000000000000000000000000000000000044110055bb000000000000000000
% 0000000000000000000000000000000044ff66000011441100000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000033bb8800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000002244000000ddbb00
% 0000000000000000000000000055330055ee00000000000000000000000000000000000000000000
% 0000000033ffaa000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000ccaa00000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000dd99000000000000000000000000
% 000000000000000000000000000000000000000000000000000022eecc0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000005566000000000000000000
% 0000000000000000000000000000000000bbdd000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001177888800000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000066ff4400
% 0000000000000000000000000011000000ff00000000000000000000000000000000000000000000
% 00000011dddd11000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000011ff7700000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000066666666557a88000000000000000000000000000000002288000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000099dd000000000000000000000000
% 00000000000000000000000000000000000000000000000000000055ff8800000000000000000000
% 0000000000000000000000000000000000000000000000000000000066dd33000000000000000000
% 000000000000000000000000000000000044ff660011441100000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000007700888800000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000022440000ddbb0000
% 00000000000000000000000000000000229900000000000000000000000000000000000000000000
% 000000aaff3300000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000055ff3300000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000066008888006622000000000000000000000000000000000022000000000000000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000066ff220000000000000000000000
% 0000000000000000000000000000000000000000000000000000000088ff55000000000000000000
% 000000000000000000000000000000000000000000000000000000001177ee000000000000000000
% 00000000000000000000000000000000000088440044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000553300888800000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000088440000
% 00000000000000000000000000000000881100000000000000000000000000000000000000000000
% 000077ff770000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000088ee0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000008888002255003366667711885500004466220000002255003344777700000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000022ff660000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000ccee220000000000000000
% 000000000000000000000000000000000000000000000000000000000000cc330000000000000000
% 00000000000000000000000000000000000000000044ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000aabbbbdddd66000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff000000000000
% 00000000000000000000000000000055330000000000000000000000000000000000000000000000
% 0033ffaa000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000ccaa0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088880011bb0044cc11886600cc00662211dd00000011bb0044bb11bb33000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000dd990000000000000000000000
% 000000000000000000000000000000000000000000000000000000000022eecc0000000000000000
% 000000000000000000000000000000000000000000000000000000000000aa000000000000000000
% 00000000000000000000000000000000000000006644ff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000888800000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ff442200000000
% 00000000000000000000000000005533000044000000000000000000000000000000000000000000
% 11dddd11000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000011ff770000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088880000bb0044bb00884400bb00bb44444400000000bb0044bb008844000000
% 000000000000000000000088ff000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000099dd0000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000055ff8800000000000000
% 000000000000000000000000000000000000000000000000000066bb556633000000000000000000
% 0000000000000000000000000000000000000033ff8fff4400000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000888800000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000088ffddbb00000000
% 0000000000000000000000000066ffffffff33000000000000000000000000000000000000000000
% aaff3300000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000055ff330000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000088880000bb0044bb00884400bb00aa44001111000000bb0044bb008844000000
% 0000000000000000000011c8ff660000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000008fff8844000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088ffa4886600000000
% 00000000000000000000000000000000000000000000000000000033220000000000000000000000
% 0000000000000000000000000000000000000000c0f2ff9b00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000033c8ffff4400000000
% 000000000000000000000000000000000000000000000000000000000000000000000000006688ad
% ff770000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000001177bff6110000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000022aaaa2244dd2266cc22998822dd3333dd996600000044dd2266cc22cc66000000
% 00000000000000000011ddaa77dd8800000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000044ff8888ee550000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000ebc977dd88000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000daffffffaa000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000033ffffffff7700000000
% 00000000000000000000000000000000000000000000000000000000000000000000000099ddaae8
% d0000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000cccc77bbcc0000000000000000000000
% 00000000000000000000000000000000000000000000000000006688330000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 008888888888888888b7cc000022ff90888888888888888888888888888888888888888888888888
% 8888888888888888888888888888888888888888888888888888d777000066df8888888888888888
% 88888888888888888888888888888888888888888888888888888888888888a8dd000022ff888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 88888888888888888888888888888888888888b0ffffffffffa08888888888888888888888888888
% 88888888888888888888888888888888888888888888888888888888888888888888888888888888
% 888888888888888888888888888888888888888888888888888888888888d0ffffffffef88888888
% 8888888888888888888888888888888888888888888888888888888888888888888888a0ff110011
% ff988888888888888888888888888888888888888888888888888888888888888888888888888888
% 8888888888888888888888888888888888888888888888a8ee110011eea088888888888888888888
% 8888888888888888888888888888888888888888888888888888b7ffffdd77220000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00ffffffffffffffffffbb000000ffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffff55000055ffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffcc000000ffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000
% ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffcc000000ccffffffffffffffffffffff
% ffffffffffffffffffffffffffffffffffffffffffffffffffffdfffffffdd770000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000022ff662299cc00000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000088cc4444cc880000000000000000
% 0000000000000000000000000000000000000000000000000000000000000022ee774499cc000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000022eeffffffdd000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000066ffffffff9900000000
% 000000000000000000000000000000000000000000000000000000000000000000000000dd884499
% dd000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000011ee774477ee1100000000000000000000
% 000000000000000000000000000000000000000000000000000088dd883300000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000055ddffbb3300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000088eeff88000000000000000000
% 000000000000000000000000000000000000000000000000000000000000000044ccffaa33000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000055ddffbb33000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088eeff991100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000033aabbaa
% 22000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033ddffcc330000000000000000000000
% 00000000000000000000000000000000000000000000000000002200000000000000000000000000
% 00000000000066000000000000000000001188332288000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000011ff220000000000000000000088440022000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000002244004444000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000224400444400000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000007766990000664422772200444499442255000044445500000000000000000000
% 00000000000000000000224433110000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000011442200000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000001177dd5544dd880000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000001177dd5544dd88000000
% 00000000000000000000000000000000000000000000000000000000000000000000000022443311
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000114422000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000007700ee1100448800bb44555500aa4411bb006655008855000000000000000000
% 00000000000000000044aa00aa220011110000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000776611ee00001111
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000088dd000088bb0000111100000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088dd000088bb001144
% 220000000000000000000000000000000000000000000000000000000000000000000044aa00aa22
% 00114422000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000776611ee001144220000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000666644aa8800448800bb44aa4400884400bb00bb440044aa000000000000000000
% 00000000000000000077dd00330033cc440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000088aa0077990033cc44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000bb660000aa880033cc4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000bb660000aa88229988
% ee4400000000000000000000000000000000000000000000000000000000000000000077dd003300
% 227755ee220000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000088aa007799227755ee2200000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000088000022dd00448800bb44aa5500884400bb009966004488000000000000000000
% 00000000000000000011dd88000000bb440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000022ff447788000000bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000ff220011ee220000bb4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000ff220011ee22440000
% 668800000000000000000000000000000000000000000000000000000000000000000011dd880000
% 22000088330000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022ff44778800220000883300000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000005599000022dd8822cc88cc5533bb88bb5544dd222299448811000000000000000000
% 0000000000000000000044ff220000bb440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000077cc440000000000bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000044cc00008888000000bb4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000044cc0000888800000000
% 66660000000000000000000000000000000000000000000000000000000000000000000044ff2200
% 00002288000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000077cc44000000000022880000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000660000cc440000bb440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088bb000022110000bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000088cc33777700000000bb4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000088cc3377770000000000
% 88000000000000000000000000000000000000000000000000000000000000000000660000cc4400
% 001188ee550000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000088bb00002211001188ee5500000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000bb7744bb110000bb440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000022ee997744000000bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000bb5533000000000000bb4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000bb553300000000000066
% 11000000000000000000000000000000000000000000000000000000000000000000bb7744bb1100
% 00000044bb0000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022ee9977440000000044bb00000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000011003300000000bb440000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000330000000000bb44
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000ff1100000000000000bb4400000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000ff110000000000005533
% 00110000000000000000000000000000000000000000000000000000000000000000110033000000
% 00000022880000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000033000000000000228800000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000033cc771100000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000000000000000000000033cc77
% 11000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088ff5500000000000033cc7711000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000088ff55000000000066ddbb
% bbaa0000000000000000000000000000000000000000000000000000000000000000000000000000
% 55994477110000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000559944771100000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00331100000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000003311000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000172e170000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000222e0b000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 002e2e2e2e2e00000b2e2e2e2e2e00000b2e2e2e2e2e00000b2e2e2e2e2e00000b2e2e2e2e220000
% 172e2e2e2e220000172e2e2e2e220000172e2e2e2e220000172e2e2e2e220000222e2e2e2e170000
% 222e2e2e2e170000222e2e2e2e170000222e2e2e2e170000222e2e2e2e0b00002e2e2e2e2e0b0000
% 2e2e2e2e2e0b00002e2e2e2e2e0b00002e2e2e2e2e00000b2e2e2e2e2e00000b2e2e2e2e2e00000b
% 2e2e2e2e2e00000b2e2e2e2e2e0000172e2e2e2e6cac6c2e2e2e2e0b00002e2e2e2e2e0000172e2e
% 2e2e220000222e2e2e2e0b00002e2e2e2e2e0000172e2e2e2e170000222e2e2e2e0b00002e2e2e2e
% 2e0000172e2e2e2e170000222e2e2e2e0b000b2e2e2e2e2e0000172e2e2e2e84ac4f2e2e2e2e0b00
% 002e2e2e2e2e170000222e2e2e2e170000222e2e2e2e170000222e2e2e2e220000172e2e2e2e2200
% 00172e2e2e2e220000172e2e2e2e2e00000b2e2e2e2e2e00000b2e2e2e2e2e0000002e2e2e2e2e0b
% 00002e2e2e2e2e0b00002e2e2e2e2e0b0000222e2e2e2e170000222e2e2e2e170000222e2e2e2e17
% 0000172e2e2e2e220000172e2e2e2e220000172e2e2e2e2e00000b2e2e2e2e2e0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00acacacacac00002eacacacacac00002eacacacacac00002eacacacacac00002eacacacac7e0000
% 5cacacacac7e00005cacacacac7e00005cacacacac7e00005cacacacac7e00007eacacacac5c0000
% 7eacacacac5c00007eacacacac5c00007eacacacac5c00007eacacacac2e0000acacacacac2e0000
% acacacacac2e0000acacacacac2e0000acacacacac00002eacacacacac00002eacacacacac00002e
% acacacacac00002eacacacacac00005cacacacac97ac97acacacac2e0000acacacacac00005cacac
% acac7e00007eacacacac2e0000acacacacac00005cacacacac5c00007eacacacac2e0000acacacac
% ac00005cacacacac5c00007eacacacac2e002eacacacacac00005cacacacac97acacacacacac2e00
% 00acacacacac5c00007eacacacac5c00007eacacacac5c00007eacacacac7e00005cacacacac7e00
% 005cacacacac7e00005cacacacacac00002eacacacacac00002eacacacacac000000acacacacac2e
% 0000acacacacac2e0000acacacacac2e00007eacacacac5c00007eacacacac5c00007eacacacac5c
% 00005cacacacac7e00005cacacacac7e00005cacacacacac00002eacacacacac0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 007e7e7e7e7e0000227e7e7e7e7e0000227e7e7e7e7e0000227e7e7e7e7e0000227e7e7e7e5c0000
% 457e7e7e7e5c0000457e7e7e7e5c0000457e7e7e7e5c0000457e7e7e7e5c00005c7e7e7e7e450000
% 5c7e7e7e7e4500005c7e7e7e7e4500005c7e7e7e7e4500005c7e7e7e7e2200007e7e7e7e7e220000
% 7e7e7e7e7e2200007e7e7e7e7e2200007e7e7e7e7e0000227e7e7e7e7e0000227e7e7e7e7e000022
% 7e7e7e7e7e0000227e7e7e7e7e0000457e7e7e7e87ac877e7e7e7e2200007e7e7e7e7e0000457e7e
% 7e7e5c00005c7e7e7e7e2200007e7e7e7e7e0000457e7e7e7e4500005c7e7e7e7e2200007e7e7e7e
% 7e0000457e7e7e7e4500005c7e7e7e7e2200227e7e7e7e7e0000457e7e7e7e90ac8b7e7e7e7e2200
% 007e7e7e7e7e4500005c7e7e7e7e4500005c7e7e7e7e4500005c7e7e7e7e5c0000457e7e7e7e5c00
% 00457e7e7e7e5c0000457e7e7e7e7e0000227e7e7e7e7e0000227e7e7e7e7e0000007e7e7e7e7e22
% 00007e7e7e7e7e2200007e7e7e7e7e2200005c7e7e7e7e4500005c7e7e7e7e4500005c7e7e7e7e45
% 0000457e7e7e7e5c0000457e7e7e7e5c0000457e7e7e7e7e0000227e7e7e7e7e0000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000000889988aa660000000000000000
% 00000000000000000000000000000000000000000000000000000000000000119988000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000000889988aa6600000000000000000000000000000000000000000000000000000000000000
% 000000000000000088ccee66000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000889988aa660000000000000000000000000000000000000000000000000000
% 0000000000000000000000000088bbdd550000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000022ff000033880000000000000000
% 00000000000000000000000000000000000000000000000000440000000000118888000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000022ff0000338800000000000000000000000000000000000000000000000000000000000000
% 0000440000000055330055ee000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000022ff000033880000000000000000000000000000000000000000000000000000
% 00000000000000440000000044110055bb0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000011ff660000220022886600001155
% 66110011661177551166660000002288660011661188330066cc4400000000008888000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000005cac5c0000000000000000000000000000000000
% 00000011ff6600002200228866000000115566110011661177551166660000228866001166118833
% 0066cc4400000011000000ff000000000000000000000000000000000000007eac2e000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000011ff660000220022886600001155661100116611775511666600000022886600
% 11661188330066cc4400000000000055660000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000066ffaa2200227700aa8800bb00
% 77bb2233ff5544ee7744bb3300227700aa8844ff6655ee0044bb0000000000008888000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000066ffaa2200227700aa880000bb0077bb2233ff5544ee7744bb33227700aa8844ff6655ee
% 0044bb00000000000000229900000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000066ffaa2200227700aa8800bb0077bb2233ff5544ee7744bb3300227700aa88
% 44ff6655ee0044bb00000000000066dd330000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000000033bbee33889988998844cc00
% 11bb0000ff0000bb4400888800889988998800ff0000ff0044bb0000000000008888000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000033bbee3388998899880044cc0011bb0000ff0000bb44008888889988998800ff0000ff
% 0044bb00000000000000881100000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000033bbee33889988998844cc0011bb0000ff0000bb44008888008899889988
% 00ff0000ff0044bb0000000000001177ee0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000033000000aabbbb4400000000cc55
% 55660000ff0000bb4400888800bb4400000000ff0000ff0044bb0000000000008888000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000033000000aabbbb440000000000cc5555660000ff0000bb44008888bb4400000000ff0000ff
% 0044bb00000000000055330000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000033000000aabbbb4400000000cc5555660000ff0000bb4400888800bb44000000
% 00ff0000ff0044bb0000000000000000cc3300000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000006644000055bb88aa000055007744
% 22000000ff0000bb440088880088aa00005500ff0000ff0044bb0000000000008888000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000006644000055bb88aa0000550000774422000000ff0000bb4400888888aa00005500ff0000ff
% 0044bb00000000005533000044000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000006644000055bb88aa00005500774422000000ff0000bb440088880088aa000055
% 00ff0000ff0044bb0000000000000000aa0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000000000044bb6655bb3311ccccaa3300ddbb
% bb991144ff4422dd8811aa991111ccccaa3344ff3344ff4411ee881100000022aaaa330000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000044bb6655bb3311ccccaa330000ddbbbb991144ff4422dd8811aa9921ccccaa3344ff3344ff
% 4411ee8811000066ffffffff33000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000044bb6655bb3311ccccaa3300ddbbbb991144ff4422dd8811aa991111ccccaa33
% 44ff3344ff4411ee8811000066bb5566330000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000001111004400000000000000336622
% 44446600000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000011110044000000000000000033662244446600000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000001111004400000000000000336622444466000000000000000000000000000000
% 00000000000000000000000000332200000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000998811
% 22663300000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000099881122663300000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000998811226633000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000117788
% 77110000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000011778877110000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000117788771100000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 0055bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbaa2200000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000000000000000044bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbaa2200000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 22ffe5ccccccccccccccccccccccccccccccccccccccf2ad00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000022eeddbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbbbbeecc00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000001188bb8811000000000000000000000000000000007733
% 0000000000000000000000001188bb88110000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbbbb8800000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
% bbbb6600000000000000000000bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb00
% 0000000000000000000000000000000000994455dd8800000000000000000000000000000033ee44
% 000000000000000000000011996688eebb0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000055ddbb0000000044ffaa
% 11000000000000000000000000000055ff00000000000000000000000044ee000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff0000000000000055ee88000011aabb3300000000000000000000000055ddbb000000
% 0044ffaa110000000000000000000000000055ff00000000000000000000000044ee000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000004444444444444444444444444444444444444444444444
% 44444433000000000000000000004444444444444444444444444444444444444444444444444444
% 44442200000000000000000000444444444444444444444444444444444444444444444444444400
% 000000000000000000000000000000003311000088aa00000000000000000000000000001188bb44
% 00000000000000000000006622000066ff0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc00000000000000099ff2200000088ff44
% 00000000000000440000000000000000ff00000000000000000000000000ff000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff0000000000000000aaff5500004444000000000000004400000000000099ff220000
% 0088ff44000000000000440000000000000000ff00000000000000000000000000ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000001144220000000000000000002244004444000000
% 00000000000000005555000000000000224400444400000000000000000022440044440000000000
% 00000000000000555500000000000022440044440000000000000000002244331100000000000000
% 0000000000000000000000000000000000000000883300000000000055550000000000008811bb44
% 00000000005555000000001100000044ff0000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc00000000000000088aa9900002277ff44
% 00004444660066cc4400001166771100ff22883300002288660000115555ff000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000008877ee3300444400225577110066cc44000000000088aa990000
% 2277ff44004444660066cc4400001166771100ff22883300002288660000115555ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000776611ee00000000000000001177dd5544dd880000
% 0000000000000000aaaa00000000001177dd5544dd88000000000000001177dd5544dd8800000000
% 00000000000000aaaa00000000001177dd5544dd880000000000000044aa00aa2200000000000000
% 0000114444444444444444441100000000001188cc22000000000000aaaa0000000000444400bb44
% 0000000000aaaa000000000000000066990000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc0000000000000008844ff22008811ff44
% 0033bb00993344bb000022990077aa00ff6655ee00227700aa8811aa0033ff000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff0000000000000000880099cc11444422aa0033dd2244bb0000000000008844ff2200
% 8811ff4433bb00993344bb000022990077aa00ff6655ee00227700aa8811aa0033ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000088aa00779900000011110000000088dd000088bb0000
% 1111000000000000000000000000000088dd000088bb000011110000000088dd000088bb00001144
% 22000000000000000000000000000088dd000088bb0011442200000077dd00330000114422000000
% 0000114444444444444444441100000000003366ccdd00000000000000000000000011880000bb44
% 000000000000000000000000000000aa110000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc0000000000000008800bb88118800ff44
% 00112222998844bb0000884400112200ff0000ff00889988998888660000ff000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff0000000000000000880000ccaa444488880000998844bb0000000000008800bb8811
% 8800ff44112222998844bb0000884400112200ff0000ff00889988998888660000ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000022ff44778800000033cc4400000000bb660000aa880033
% cc440000000000000000000000000000bb660000aa880033cc4400000000bb660000aa8800229988
% ee4400000000000000000000000000bb660000aa88229988ee44000011dd880000227755ee220000
% 000000000000000000000000000000000000000022ff33000000000000000000000088554444cc77
% 33000000000000000000000000007733000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000880066ee882200ff44
% 00118844888844bb0000bb4400000000ff0000ff00bb44000000bb660000ff000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff000000000000000088000011eeaa44aa880000888844bb000000000000880066ee88
% 2200ff44118844888844bb0000bb4400000000ff0000ff00bb44000000bb660000ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000077cc44000000000000bb4400000000ff220011ee220000
% bb440000000000000000000000000000ff220011ee220000bb4400000000ff220011ee2200440000
% 668800000000000000000000000000ff220011ee22440000668800000044ff220022000088330000
% 000022888888888888888888220000000000000000bb22000000000000000000000066888888dd99
% 66000000000000000000000000553300000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000880000dd990000ff44
% 00778800888844bb000088aa00004400ff0000ff0088aa00005588990000ff000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000008800000033ff4477aa0000886644bb000000000000880000dd99
% 0000ff44778800888844bb000088aa00004400ff0000ff0088aa00005588990000ff000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000088bb00002211000000bb4400000044cc00008888000000
% bb440000000000004433000000000044cc00008888000000bb4400000044cc000088880000000000
% 666600000000004433000000000044cc0000888800000000666600660000cc440000002288000000
% 000000000000000000000000000000000011000011bb00000000000044330000000000000000bb44
% 00000000004433000000000055330000116600000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000044dd550066330055ff88
% 1155ee8888bb31ee881111ccddaa3377ff3333ff5511ccccaa3311cc9988ee550000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff0000000000000044dd55000000664400997755880011ee881100000044dd55006633
% 0055ff8860ee8888bb31ee881111ccddaa3377ff3333ff5511ccccaa3311cc9988ee550000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 000000000000000000000000000000000022ee99774400000000bb4400000088cc33777700000000
% bb44000000000000bbaa000000000088cc33777700000000bb4400000088cc337777000000000000
% 88000000000000bbaa000000000088cc3377770000000000880000bb7744bb1100001188ee550000
% 0000000000000000000000000000000033ff88557711000000000000bbaa0000000000000000bb44
% 0000000000bbaa0000000044ffffffffff4400000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000033000000000000bb44000000bb5533000000000000
% bb4400000000000011110000000000bb5533000000000000bb44000000bb55330000000000000066
% 1100000000000011110000000000bb55330000000000006611000011003300000000000044bb0000
% 00000000000000000000000000000000002244000000000000000000111100000000000000000000
% 00000000001111000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000000bb44000000ff1100000000000000
% bb4400000000000000000000000000ff1100000000000000bb44000000ff11000000000000005533
% 0011000000000000000000000000ff11000000000000553300110000000000000000000022880000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000000000033cc77110088ff5500000000000033
% cc7711000000000000000000000088ff5500000000000033cc77110088ff5500000000000066ddbb
% bbaa000000000000000000000088ff55000000000066ddbbbbaa0000000000000055994477110000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000331100000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff713e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff44000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 44ff7e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3e3eccc000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000044ff55000000000000000000000000000000
% 0000000088ff00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 11efffffffffffffffffffffffffffffffffffffffffff9b00000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 0000000000000000000000000000000000000000000011ddffffffffffffffffffffffffffffffff
% ffffffffffaa00000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
% 00118888888888888888888888888888888888888888770000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000001188888888888888888888888888888888
% 88888888770000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000000000
% 00000000000000000000000000000000000000000000000000000000000000000000000000
%%EndImage
%%EndPreview
save countdictstack mark newpath /showpage {} def /setpagedevice /pop load def
%%EndProlog
%%Page 1 1
%%+ CMR10
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: /Library/TeX/texbin/dvips -Pdownload35 -T
%+ 16.990030673146247cm,5.470000002980232cm tmpPSFile -o
%+ /var/folders/45/rt15lwvs41s06_d6c5bjdr6h0000gn/T/latexdraw/latexdrawTmp155888000577478211/tmpPSFile.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2019.05.26:1513
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

% $Id: pstricks.pro 698 2017-12-30 19:08:50Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.28, 2017/12/30
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian (origimal)
/PtoCrel { pst@angleunit PtoC } def % Polar to Cartesian with \degrees[??]
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
/AnytoDeg { pst@angleunit } def 
/DegtoAny { 1 pst@angleunit div} def
/AnytoRad { AnytoDeg DegtoRad } def 
/RadtoAny { RadtoDeg DegtoAny } def
%
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
%  x1 y2 lineto 
%  x2 y2 lineto 
%  x2 y1 lineto
%  x1 y1 lineto 
  x1 y1 lineto  % counter clockwise path
  x2 y1 lineto 
  x2 y2 lineto
  x1 y2 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    Helvetica findfont b scalefont setfont 
%    is set in pstricks.tex
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
%     /NimbusSanL-Regu findfont b scalefont setfont   
  /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

% $Id: pst-algparser.pro 446 2017-04-19 11:40:55Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.06, 2017/12/03
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/concatstrings{ % (a) (b) -> (ab)  
  1 dict begin
  exch dup length    
  2 index length add string    
  dup dup 4 2 roll copy length
  4 -1 roll putinterval
  end
} def
%
/reversestring { % (aBC) -> (CBa)
  5 dict begin
  /str exch def
  /L str length def
  /strTemp L string def
  /i 0 def
  L { 
    /I L 1 sub i sub def
    strTemp i str I 1 getinterval putinterval
    /i i 1 add def
  } repeat
  strTemp
  end
} def
%
/concatarray{ % [a c] [b d] -> [a c b d]  
  2 dict begin
  /a2 exch def
  /a1 exch def
  [ a1 aload pop a2 aload pop ]
  end
} def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

% $Id: pst-dots.pro 446 2017-04-19 11:40:55Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

% $Id: pst-node.pro 395 2017-03-21 09:24:38Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not alowed!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-Regu def
/PaintType 0 def
/WMode 0 def
/FontBBox {-168 -281 1000 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E152A40E590419249F2E4
C36159F8E54B532468E36965A38646781AB0B7F6A3E851FD10CAA49ADFC1E546
2FD2EC6150DC6E19523050F6148348A561AD8D2E2721EFF8A570CB33460A745B
926C889304C09753C2D78FB0CA95DC6DE5B8C524752C83601E7E9F73DF660674
F05AD83A166DA9BE89F22FEABD4B2665960F6FB5BC32928E1230C212E5D69CEE
0B3311A1738A11747AE263106916D8E95F25B25B4BC6AFB03B79ABB95DDA518B
41A49458111D2A1433C043627EF9460D324FFE22935F4F6DA88B8B91AE95B34E
08408A34EC8EAC3F65B6AE3E3E2524867EE9D29068F81E4372F4470BEEB4D6BE
EE4DF956BECC0CB77F8490117B22B2FB75C938ED0A5E208D88BC38B2AB8B9CFB
F1D53084B6F43DF336481ECA0AA2D5317BC83FC0E1D4DB01D0B7707EEF217E94
A7F985102DED27D8E8B009F7EF6DB91B91E78BFAE7BD688E10B3DC9AC77CDEE8
47AA4DC8EC78241E593D26EC7A60696151A2AE5325D736E99E01BDCBDE69579F
92EEEC224B6757EEDC64A75455BB665DF42A0E4CE7B99BF3E7D66F8FFC8C13F9
D7A1FF7A9D5FF7AC43396779F11C9B008C33A2043D48B61B88B03104B1425F09
675B559CA4302C001EE80D2B739CC0FD1023BF4F1FF9C01E892E59CCA7C26011
B8E0B6D29CC29FC72792FDA5E7D5D88EF98F9DBA960C96534C399C54865EAB86
0FA2E0D6C7C44B553EAC1574D55E7970744D4792FFFBDCE6FB4365BDBC2965BB
2E9EDAD9E0EBF0B620DB415AD98297F5AE83D9C710436657E74D26E83957C745
89834337035A7501803947F6880B70E56A3A404C62D57B849D28804CBE0F5884
435A0E12DCC9BA414ABB732BFBAE237001F557DEA5E972BA0838A3C7C9EB75AA
4A050DA0A529BDFFBF9011C360564FD17A02C18860AF6B86EFD4E2C125686C9A
5E114E95C71FC89A5DE9C589BFE5AC0480CFF716345265D2435EDAE67CFC4801
5BC08E7A48D683ACDB91E05F469C0C8919D73A5D07A1CCB173E30E76680ACB09
02A40A3E11916198BD69F1A26E88330F50692D0D5917E99E7A01B327413E24AA
E98EA484E45897E6AE4D6997B6E8BBF61C9406E916D56985CB2BD297E8ACFC6E
CF2D2281AD84696B7C6CB584BD85CC20BA14ADD3BC3E25DB91124C0ACF22E902
3CFBF04CC40DE331991E9075D22AB5EE0E849B340050E6C417C664A782D05549
DB2EF572F193B1C12B4635C2B358747046DE585DE98B96A3F7E36CB37CE1EB1D
11E2CBF99F15F7C116DB632EB22A6C7A3C921FF716E9753F4068CD684517F327
58E8F5D1A42D40CCFB40C13249D90B00E1FB1F743CA143C191A39BA398B920B5
F25683596AADC66BF831DB6A5435937A0B37B5F1BC381AE33AB09D8ABD419796
3F202DAB22C5ADD53E1979F1FD4055BE54E443190F0B83CDEC05289F6CAEF4DE
993C3DF9529F70D2124CEED9B6A3A92E75CBAE96AEAEEA95F4F09D5BEE9FF293
7160F2F6D19148599764E40F3C987DCF2D54A6ED6A88CD83397A495E5D088133
9C46EB7DB901892BF6EADC07EC02FEE76893046510C08FDCCD6EFC18CF45295B
B55337B18A132220F582D459481333D2107D819094CD8E14744B571776B1D9BC
9C544040AA673B923C90011C705DFDC5FB8A786B1A04B76CADD1BDED4F258F2D
AC9F55447F8CC88BD98AF59EEB7C1D138047E9722F77F39C29EA6F8251D45202
45382FA077AC8473A2197ADF015326BBB45A5A17E69BDF168EAB3B30CD4F9330
4E9E0DB55DD4D849730B879B2580B2EA1F1F89CF5B195A9F164AA3649D1BCE1D
71F65EA74CB0A90A62A05E0E6853A89537F386FC1E640D484E5F57C00B1336A8
F61DE8919B9F5A59FF5B2BD27C335C645F76D0874A07DCAA92EA63C2A3C27C93
E29D4217A1FA558FEFF0485CAF90627DC9C330953CAEE49A7DA8ECD98509EF76
889F27EA5A327BD6D91FD3F5BC32979FF087E9104E689591F1B5267569B751AC
A01F7DF1FBC7452B5D1E789929A97CE2DD544DA406E77FC5F480C8F303F91A00
FAB90B9F340D1F2F1D1B9114ABB6758C443A4BD9CCB5093D9CE3EB8C164ACBA6
FAA199CF571F733A599E21A851EB92B3F449AA43749D3D895A76221E6D592436
E400132CE840B6192CBD23E5DFAB0DCB896AC37763AB023CB9DFAD9B8993F576
0679AF8A826D2D2DF793EEB6A3A0F5804A3B4F0EDB9E87F0A7944EC51BE51A35
6DF18A3E104EB5D1F90344A9EC4316AA0B9939BE70A2E7538FBC9C6EC91E8358
3ED5B0AFC5B2DD38B9368C02A5FD1B158F1DEEFC669CE697CA332B58B295832B
4E682EAAA1C54F2F501AA172055892C47614A9035E7A67FE19DD066DDFCA49FD
3906B7D32C787DE06908B1DA7633D312A996791F48BFF3535DFB0D05AEA2DECE
B917B1B56997FCDE6343BCF09C5B5F5940EF2F716CF5D3B48E76DC5386F71635
41D0C4B93E527C3FDBE3E9D7DB1B31BBB1B9E3ADBD7EAD8C3F5C8375333B014B
75154A8A07D01FED1C412FA9813664082503DA2F88391D52AECE76F5BBB786C1
96CCCAF13DD4617C9FB91A13100AB11746A2053E0C5E6E8EC7D1D9B54A57315F
AC5F9BD1CB5BB79186C655E85757137873AE8AB552445E1B41B3CDC4136A300D
DD4F45B8572E9CE9BE754E07D88DD634787FE1DF52B38F3EED60778911EB0FE0
D7CFF77658880B3935EAE20F85DC71090280B1790F1889DD54EE0164A61D924F
7B17D99E1679B71970E10DA34D207E2D344277E00DEDB53F6E2B4D060B66B407
6AAA04763FB71D6C28247BE7CE7E7206C219F14E701BE121A6E3C832FDC31C15
46BF0855A6705F8FD2082183D51A95456A761655D006138CEA62A0A6C3E17FC2
7032E69A65588CD61115FC966FCFE51F027892630923CD601E96E722DB1BE432
987A61FC08656A90905DD3ACA41690216DF0AE3DDCA1D950E0F72638B4353277
79649370B565AF4AF38BEE8E5AA5EC7942439B9E292B3B57E1F7A9706D8C7BA1
7A1C0798A4FBBC70496B43D0BA5E147326863E5A41131E90A5EED0AA43FB1166
3349CCF9D83188CEEA9D14037F8800B4FCB1C59CC168AE63B11D15A49BE54FD5
7F4308F21C60C3F0F6E9775A927F2EE0CACDC2B31F8E0DB5CA45552F889461C8
4E7B5C67F3013CAC2039972BCE4F1EDB47A06D81DCC9ED8D150BDCC012F05D42
3A80D7785CC75FF79F12DF5235920B3C59FC168B3D801459A6D4F98EA451FE24
417888F081DEBEF9B7266B20C1F0C49A230303197E2F73D5B37243A3AA949B93
19D1A0750F72B2215AC37DD287FA96E36DCBB7D9B3874138C7E04994CC74D544
3843F1A6D6B729C752771EB050A697558AC6062ACD9C0C1E624A4E4DAD21BDB5
FD900A5C7E66942BE868212F8ECDF6B61EFFA0E0A37F242A86EABF81AA379231
DB5D3C332E6D9F4BE1514FFED49364D2E81715E78DF8DFDCA5854F3C3B8DDE18
13A84E326E34C67DE72985041253E32FF082B1108DFC32842C77AEA2D65DF9F6
492435785F60310791E2C870B30F3A59CF56E1E2E8C1C9EA3E3535B7A62524C3
113CEF9EA7D568684DDA7044E0146ACC516D7F07600976EB8C7FBC9D510CE8CC
A4DAF7D623EAB472E59EF74CCFA54911ACD0FF96BB9218B3961A77DA38F6D2B6
3116814C0F70A26692514C249535659573BC26D38EF63956572DE5DFB5D02994
FC0468B2D448A840F738DF15427E8F635D7C1D238E430AD22C923E0A70754F17
F8BB5AE39EC23CE84CFC9A078537E53F5CC3B783D3F56537A1FCF1AA32BB6350
B312F54549628D31B2E3FA68EC169C52085ECF76146D8C085AC2D1BD7FA27C42
983DCCE5EBA935024154629861E40D5113C65F483CB8FDE1E7D19555E981AC0D
C261400BA7DE595D1AE5896AC89CA451BD72723DE84031E077D880977F5F24F0
77CF52D738E87594554E25480A9494466F85D2063211FEF470C689CEFBDD2C96
E8C1BBEBFBE83F605F9B81BB9F60DAFE12589D767C4A5C46A1425D45A02AC552
A2130F5E79D444A503871F7E128E6F1B423E2C948CF1656FA97A05A937A3AF22
EA39978F1D74939BE9C7B80968AD1178A8DD3F44BC9CCF5F55726E1CB84C5C1F
84907B95A2F94DF1C2F2A41E1070870F50E292A88FF7B420AB4E82F5F3DD7B29
563C73EA5D7BEF397773ED373C51F67C268A23B73DA28B6BC0E1B2F6C78EBBE7
FF87519D0756D3F2849657C36CD9566516F2D46DAE8DB4F9D93CA5D5CEC13C10
254E3B107E483D79EF92C346805F09AE5B3ABD6A5E52B07A1D5F943353457EDC
3EE66D99783029CD583F6405828CA8C05E7325F9077349C963FE0454B439AF27
02915B9949193F3BDE186465B79025FFB8367445B690245E81AE0A38693F0318
A61A091E099E419B99BBB377C5F8148B1CD606419D43D12BE117942F71F70C30
735423F6F13DC7F5015DA904398A56DDC31E3C30CC36F3BD12FDBD8233796A98
5C09A248F9AC90ED7B624CD4E5EB652F778F7942165178F4FDBA6E4F0859AFD7
4E72167A3D3BD86F381ED2C22D173C9382A085A2924AFA002FA83DD86D63E9FF
54FC641B74BF8864CC28D7AAD8EA3FBBBB407E0ACC579C47382DE885B0C370FB
1049461E4F38E19D26A749A16052A16CC06279077389A2E41928468F12FB68EB
A35735503BFAF5006F9417D29C7CEA5B49A83970B2B20819C87E8CA83732F131
74A3A0E6D64A6B37CCE936BB4B133F08B2B72268C40F772CFAA6CA5B6D04FE12
8F2BDF005E9BBB0A870C3BC993A93F8169F93C1362FD1CA6F3B5AEE2C6673186
B5EFE8719277FAF74DEEDE0B7199BFEA3AFB5F2BF0AA18CAC1A8EDF3E257129A
5B479D38A8E8C55586F8F8E7D64175CB4214122CD76AB8924D28F929B1C57F3C
BBB5ABEFC5E9448B569FD0D02CA400510BDFACD144EEAEEAFA6EA74B684376C3
8D89BF39976A9018A2C97A97AE25DE92A211465895A8FF1B0C0B7EF17CCFE592
3FEBDB1CC01926D0F794A85BB532E1CB59919118F64E7898DB409706F14855B5
386B6A6CF374F4F108D4A238423D44956DC89904494DB57A72365F47ECD6437A
E7EA27FB65ECCCAD46169EDAD3DCAA1172A04E445A281AF2607DBFFDFABDFCEA
3AFEF1AF35C45759E9D71ED8DC943D2297325558077DCB06520983CC6741DE80
3E5B6EB1E7F5517A860B661FA87B9A81A3249FCD0540EDBD9496769CD6DF3B85
FB696C84881BBECF840080C51CA6FD9C78AC2A30963B33A45B38CD6A223B219D
9978D3B9FA37E805843E62251D029F7F2F3CAFC7DD736BB0C4879624730EB4BB
18317E3AF85EF0E05ADBB822FA6AE823D871FD8BE13B19B08630E5B4945F61D0
9DCBD7E32C0027A5A21F9C139DC715445893B54729A788C762262751CAF8B005
6987A9C8301084AE87065001A8E03F79D068AB00A00D64680648F8DCF47A989C
23AA8A00773A637E0625A4E70B6860AA9ABE07CE203B29AD861D424E68F8DBA4
52AD22FF83BD861FCD07E1302D6A3AC10E31A79DA117BE5648B03E79CB24C30B
17AB03262A05C5C15A52AA3ED07EAB1A36B2C7C8A9740DE89761E99C0B217564
A3574A9C02A9899CE0C16B339B68A2AE149DBBE52B4088D4779DF1D884B36A67
F024A5C4D409216470E8C15B2A44CA18B10CDD9DEDB81C4FE7F3D742A31FECD7
EFD4976ACCE231CE2D2D6F869F5847C0D82F0E8663420C9CA45D912001AAF189
9238ACC54C344B7899520E86A44A499A2781F7979E1CBE73832BC88CDBB76E7B
156E0C384EF5E6C8589A98B74ACCFCF1CC3DDBB349ABAC8DFC478A0EB5CC5A02
1461673661F5691AB73787C54A613816BFCF3B6D89B5E598CEFE581529073A5E
8853C55486950EB9D5F22FAF42427BA60815F29576EB055D5841C302D0438F9B
603E8DD15D844ED20773638CCF687B19FC38604899C3293028237DB85F544A47
03557B39BDBFAFF8DD613E1E982256082DFDD520209E05336B543AAD90493950
01D3348CFA322C45AF8CF1A11C0E49AE2B6260EF500520A9B278EA8FAF5ECC0B
331F313D84809F19DD2A0EC70F52E8DAD416262A1F4B49BB80DA2AAA2D699CD6
41A2B981B9BB153987B6709AFCD849AF4E70E8FBCA74D2448BA974825C68DB7C
42E44A2C471A0373B8D9B96CAA434541BD0A30AC10E0ED4A588B743FC5E5088E
22766724692E464DE4CD3E76C93397F7998AFD5A64D6903F28DACD77FDE3CCC1
C812E9FAC3BBADC4E239A3C2A894FE1D4EBB9491D96675544E9FE8408663179B
3FAB830E1EAA9224E6F83109688406679E9D5601300887062861A3AB36E8DBAB
042D1533173A252F7E39062339F047EA580B95ABDBB042804CEBFB785F2CD72D
7CB0C43B29EA7267E27ACF2D5EF321FA5B9BC31757B520363EF00F1F6679A9F8
3D7E1F335DD1116C5CB9AA731D19B47E7C2FE360AE79DACB95856B01E8720210
80D77E83CDF905D1B86622EA8E04ADF2EEB0DFA97D294DF40D6FC753FC99F5B0
CE5BD9927F4ACBC8C7AD40D487FEED355714261AC9C7F9D7BD135D366B6614B0
CA2709E86E3676DC5A4F4DC5C2CE6D6B441DDAA50DDD67CCD74086D0508F3900
F826B431F7AB7E11147BA01041124BAF9346BE2EB40E01C6744538103C653BCC
3AE4F90DC8C9F4CFFE0829BC67290DCA63A609CE060FD4852DABA024472A5D9A
0FC5EA62A5AB1310A73E462404A29858F3F05614A7EE68BB3237B9B4A452C9C6
9FE0FE80A1565F5B6EC8DEC79509797AFAE73CE8056753FA4D998023AFBD8C5E
E985D40D36C45FFCC25D8BA96D9D2CDB2F893A0EFBC998B5365D8BC5FABC0B10
94D1F8696888E0557C97F3DD40012A5D867376543A4BCEA5CD5454A0F0B1DF01
9A4CA177E48365DFDCC4167EADCF5EA73CCCDF2721E8C240B2D22FFCD960B94C
55460A557DB6EC4805338A531A7A874DFB11A5F1CA109CE8784A5B2BDC2708F7
2EC8D2A2347451F3EFA021D02B02DB6D08325081F23485DD79C77BD0256D6B5B
7FCFA5E7F8BDC7A646A25EB2A191A117BE5648B03E794B672894C4C105A43271
4DDEA015B4EA7CCC0E74977CCC8364E6474E2ABC9F127F79622FEBA07BFC1706
25CFD74B8DB142551BAF1010D057FAF4B4EEF9DB1EA0C296CFEBFE57185DDD36
74B0E9F8EFEF3A96C5ADC4EFE721665CD96379A3FBB0BBEAA7F3A6F87AADFBCD
B8D4C497F8B91520689BED54DC9B37138777DAECCFEDB18BBD944B9307982A33
2442743E34CF238CF8C958F506D363D9D1048DC87D9F8BBFB0D1A963916B3861
17D35018E92A7B9CB47D6A72839E73CC77D1416FC6EB6939B4B36C66C3A50304
F42AAEDDDA6E274B92F9917139A8A2EE4C2098A63272733C3ECFAF84F5B867AD
52F1C66B3C409081F952F0161DDC3CC9BC1652880F4020FE8BA77111908638FC
C2FD5B04E534DF6F992B460A7114E13F2287744CB89B862CE68A42098056DB43
399E6A6918A887A64B2EEE98060E47C0F37169253B17F6F69DBFBF14DE59C7CA
77A2A6EC387A7E94E1BF770C0BA6C712219AD28F36411FA444491570EBF1BDB9
671841E74CF8C43B54436FE2E47874E2DC9EFF3E7222AB73979CAADCD1821190
CB3DDDE68854466B26299F80BA09D7E0A698F873DAE3BDEBCDC75CB31241A81B
A783D0AC78D171EF510BBD5F612DA3B8ED8A6171038D9E9DEA582740E49F0B2F
4A0B7A43A04BA972EC6DC7C917ADE914A6F65FD9DE70F9EBFE6EC028F5308158
9E589E8F501F1B0F125261DA0DA5821D38FB6E5F5CD31F89936AF9B13198D61A
361165182ABFE6B27E511A043B25D4477BF1FEBFC505708B3E96DFF95026527B
2EF907D73C3B143E56DA4D95BF116C42EE5A808CA6FAF05BF6731B5CADA5FE2B
0CD59F19CAAE0B28C34D4E895706723580D78094F93E53251ADF2450F964A294
BCE4969273E50FC21DCC37A4281CED520C79DBBA55CF3669F5CF567BC752ED59
72E446CFB6F4E5F85CA00196DAD2169A1513AF1DEA4BE0B3CF055BEF50C4D965
0AA17880E6C8C00B240EA53BFA904FCD65B069EEB3DD0D9815E2A1B3C10DAF4A
E72075E7C96BF1FC6C6E8B33298E3012A53A7EB9B5A30DBB2C1A481168264D12
8DB45035E3E1F26A696E299EB263AA973DA15A858ABC933BD6B79085BE0B5CB4
6CD90F2644914E1531F0AED1621CCE288B42F92DDD085985EBDB33A01F848793
2A162CCCA0114944A1AC1E57C135473C54B911D61724EA6C5F87CD37B3ED9960
F3EB9FC19BA3191D04A56EF39F058FFCD7E189206F6568173B0119AA361965E1
876B223B74553E18AE14EF37FC9FBD289530DE5AEA07A6EC2C658547487FC2B6
84430837093AD54A2F6F59FC689CBA73699AD4804910ED7B65C500668BC0ACCE
C903E9ABCB6ADFA4EB07AC36443DC19A5902A49D33A60EA2A8F3E6D5BBA1116D
0E3799F3DF1CF26871235DB546DCEFE11EA056CDE8B4F7AF466136460A8ABD4E
293DE39C1AD9295FCAE8C57C6AA50FC852B07E15D4B19C66133D80B8CE62255B
AF0145E3F2C055BBE219AFBFC14630B51F2A193BC60FB9D2AB7511C7DDA75FD3
33DD6A1DFD3F3C7B02D11E0F07990C0CCAAE1D5EACB1484FBC1F37A3B2C7CD75
F65BD4D4F1CB3CD45B7192FB8A537D531CAC99352582CAA91367E2ABBF67B032
7C4E5D93FF349E0EB15B445C8AEC5098694FA56D6BB32C5DB30F50CB24E7AB37
3B7BB89E9CDFD29273098F7D789DD58713E22232739470447B065DE00193983F
CA89F6A57EA1EE2192D22EF7C3F2C9386CC5DBDD2A9E1A3B3DDAE182E070DA34
73DAB283233504C127444311964F88706BD4BF54A5A216F2EED84DCF2527A424
073F982C9EC093D7F96770C73499AC0AFC3D7777676002528C286AE8F24B4C1A
C770D3C56ACF54552719F8BC3F5BEEB210E4A52724E729C277E902195DB149FF
76308F252F0C80EBC0102FAB664D9F523C86263C4B5A2A1FD13C0751886DE019
616FF8B5ED66F92F3918E329A3EB0B7DD267757EB969D468B32B9C059D3B5FAC
17D3C990C973462254BC1B158BC27F4D5E1C27732C0864686435CF22A8AC8BC6
E6126304B56E93483B35288221D2F373C4417B26FD688881E237DEA8C980250C
0976B125B1362A3AD1F83A14BA1E287766696C526FE5D985C108172CD2FFCE07
9658E809D363B116E904B71922BC94889AF6852907AB50D73AF9FCB156A6812C
049B275FE7D22E44B013B179845C447A1A58F778E9A17C80A99093BD8D5553A3
2EC4FD183F8AA6FB3A9DCF23D5FB8D82C90951561F6FB9DA9217C33D8499713F
075E7339D5A141BE4C208E9FAC359284BA36EEDC241B7E60ACD14F147009768D
9334996DDCB190243F80929599A0F81B43C52F5C88CA3242F20984B44BB11768
400FC6E144DE4B3C6620EA882A24362888BEE489106B44C5809F6CCD8766C637
911F443221C09FD5F3D6756CC8ECCA81ED1DCF67A9FDF30E56B2338BACA1A1E1
79F13CE7BBC6FAAAB085EB485CF8DE5B1B9BEC7EE6BA5638C8CD1D57B007F192
BC1F9E50AECD6E9A8D6B99C67CBF151B0268A41CCBA16321295D4A734F4C7E94
2E1C41EB5F9C8DA9DF5AFBCA6BE1B8931A9AA002FE7D5FC40DAD245009059A5E
2FA7535A2BF5EDE8D52A68C0E7DD557A4A00D65CDFFFF974CBA7F1E4E6280157
EA3F0FEE2C0095D5677F11E02E70971CEFA4DE3A352DE4F49F522E484AFEF77C
B10155AF019B99F92E8FF119E470A70DF3EA7E4118FE0FCAE935B200E8E56243
E31E69A8781036D46DAE8DB4F9D93BF24288BCE1FD1B1BF12FB534F7899E4912
EFE1B93D0E4A05AB4F4962A697CA30668A1809DD72B71A4BBF6C63630CA2A1EF
97E5B5E4C753FBF42C1F976B0446A60F16BCB40CF4FC2640AD8D14A49BB0D8CC
557888A81813559080FF2E6998F2C4B4F5FCFCBA5B07B79B87015A90D41C1740
B0571439E5AF3F9C520E811EDED8DA4E014B8A5111AFBC99CE983EA462DBC29D
FBA80E389786A0EFB0F6C06F9DE29DFCAC798130C0CE5C49E1C5FB11EEEDDDEC
64AD877E9208260AE6AF24100E2B365BF89C5B679186AE4067BA511DA13FA80C
3856ABEF64B5B130980FB0D21DA08469A82C7A8E07AE34ED232229CBF2016245
672E1C848614C5B184B42EA51452F540CA75E18B3418B6E50A0A15769A525886
47510A48CC6E0EFA905AD64819364BFF68E997B6F7BEF0C52DB9469CFC0E9E9A
6D795B7CFB03A0FD7DCC0F4E58304AAC2D9AD27F8A67E78A438B469A6FA654E5
6E66BB882E67632F78E4EA659F5CDD236729F308EF10EDC419BF3A54256E363F
1E05B58EBFCF3FEEE6E26212A073EC154B21A663D18B4643E66382B323813CA3
CC5D0893049E666977E1AC513F8E680C0E1D91C479F86CD53E8CC9DE6B2DDB14
8E81B1F6B9E2B56B1139CDB24429E459A0E4F7E359E0C58EA928A31F29452643
2A967E4FD41CDD60D6E413059A58FA556EF3376E780103698375727743A699E8
72FEAC505B3B456859829E4085E7065FB50E28631D2A286B9862B0C69172AE1D
F1657C5EB7F326F77E7D2DFA11F16944AC9979EBB53936BF45339CF66C5C2BAA
A51D9353F5CABF827F49504E3A474AEAC4F83628E491CC03F8398BA941BFB2EF
E67D8026D9404B73183A99D3D180D6413CC7E2969191D659A26EF8243F6CBE4C
91B219D17F468A024BEC22223D91CA7C62913054F9FABFDD9A08823E4FE32710
DB207BAD43EB64B347FA8D8E2EC2BE15B328C28133CEB35FBFCA2DF8B0F9712B
F10F0E84B76390DD9AA792ED67907DEEC3588B74A13E142F6BABAB0A3073E0D1
7031D34C652E1387BD302832DA3B044A853EB94D553D5422442836416DC50F73
33505B8BD1C756361BF7F77450558BEF1D7944260036DD3A639A660A25A88E5E
C19575B1FA0515793A51CC50822E4C68A807C1A3FBC4EB639ED312492FBEE039
B2FD87A31B428501DFE5AC0E7921B8A70ACBBF11C6D4E691AA899C9E6F9ABE2E
2757402F944A595D01187EA7029300C9E75A27E5BC8072ADC6E6D5AD92D6F4EE
EE809BCD936FF4B76DDB821EFFF0BF941F8E54B14F45269C5224AD15BE8F1A80
D39F1B836E50F9DD1D7ED874D3948549355B2C66E26CA8608765C46EB006E2FC
4BE55ECC5BA2A7A3C5BB32EEF0CABB86087F2C38E1DB6D9AA6689BBE293616A6
176B8BD6BC6579118917EA30C9C000F6505A7C5AE95D9E3450E72C99406ECB33
A2B3F48D274A1B0AD7C2DC1207469EA9A3543EBB5C37BA594B85C1F204B6509D
5201534954EAF50FBA122E9BCE91AA7CB06D15F07AD79D6C0ED1A722A10690EA
376A005FCCC3F5D98ECD3DCC13EBA3049418E59C5418E2405ACBDB6DB5D9F6C1
45821B54D85BFD37B48C0297D8BAB2D093BF3060E9CAE549DA3C98644440F348
449C01E85144B3EBD51D24EFA81AFB3CE0554537B76F853355744505665985DD
857E61D5476FBDB1FB7EC4535FD5A26D5ECAF035AE8F33643057FB807A58F755
3E80181717F742FB1344156DE7712AD01457D512BDA6DFD1C1EF413BC16E80FD
D4CBCD8CED16B267CF579743D33A22D8A2B7A8A641587DABBB5026FAE7F28D1A
D502D77A20FF9AD7A658A8AD9B1440CCBBA4A1394929E3B59213D4757C3B1012
077B429CCD8292BCC787CF187098934E5E82E778E8E6E15F862649CBFBD96371
AC5D037C9438BB6AF246CFCD5AD61791C429BDA5068B9C09073735EFE14EC202
51FA31B25886BA6EBEF208D6036AA1661F8F498114E70B11233AA583150AB859
57DEAD5C0F9C926BB1ACE8EF8457CC7B537CBCEF266204E3B31FE72C2ADECBAC
1F0D917721B06B41476A172C314324DA03DEDE301D5CE05F62D888835BF098DB
F66BED5C446E38FC6682605AEC95686AED57B5C5BCDD71DC5AB24F9D9DFF0F39
3A5D99A0D1178BBE0C631219146ACED11C564714BBAF9AE09A1C06B7390D1540
7EA16CAA18A4B3AF3BD5D114FEBB9F3CC7A624F9425839C5E168F40E9E7835DD
5BEF94DF63E559A167C09E35AAAC5D40825CB7C31DDEFB00A48F2E282B339FDB
1534BB3387633AB7C5257F0F663D4947D74FFE8061683D72D4DBCF3B200C12E8
43104349B34ADC89866BEE8BD538F61B786DD67D20E3829B2D503398F9B314A4
8BBAFF3AF352F62A2CD5CA372502CC51A92E8FA7B37351987E3442485CF2E497
1125EEFCAE19A2C0E1A66F689CF850484A31682EE68AC3DE5937D4545937FC12
1CD8D5FAC3A51F9B61AA8F43C3D4C070AE382B32152EB582AC94ED5BBFE8AD89
A6173F471A74BE62D578F9C08A4453229401F074377BC9C4511413098F5F4A12
72D546317AFA2615E935716108105EBA5A4924DC68A9F64B95A6FBA4BC1666CA
1B8AC4960681A08BF8CE7759900A545E30497B8102BBD13D2018C1802CA6FDA0
518A5642FDC197A548329631F72AEA832841AE10E67442911AA6DFDA144ED5F4
9F383D20FBC360C6A5283EBC0569A72482D402EF006168957F6075788A8F8694
E55F6777A221949359D0E79DDAE49EE1BF0B21984A457A3DF915C31AF7F63D75
F8A87DAA10066F0497A23689E18F83C3A8A5DCCA101A6859F5D295D30EFC66F9
9161E1419F959741C8C62BC8CCA091098D2F905EA868FA07352F834F71625C2E
44C7C71A494E7BD33B3DEA124E5E6ABA939AE8791A8748D9089691233E8EA8C3
64C995C529FD22253E35E1D003BBC45C36038C81A7CF961B1CAB1383D09061B0
29B1F7850CA1B0784E9865B00EE8B402AD6F7ECC6F8A2464144382492AA1AC2B
E683410EFE325B3CE3874702EE51D1CB34A1553B48B0548572DAC5867D1AFAFE
25548F3D0ED6748FDA29E29EED7D43F383A71BBD872C65EE75B5F734776A6560
FDD3B6A4EF40FFAD130918DEF0CB67CF18E18ECDCB466BF76DA6A080A5C15C9A
6DD5CE556FDD2A1F12F84888AFE63D8C86A66714FC95F355DB36DBAD347C581B
F3CAB0FF90DC388EB77D53790AF9856F2EB1BA7E99C594F3DFADAA29F6C472D3
DA98CD308B7B73207640875A633DB9AEFDC382699166E534AD3A1BEB9352A9B0
9010A7FAF0F088B7A6B69B71D537AE5BD8EE1F7C654340A2DAD2B7F770C903FC
7FE3836ACE81211B7940480F6938D2349151D9AC7A20E8BAD8D74DB6E96984FA
5FA33871817226197F3D8C802FD7FE187B153C3B24D51A0919C81067D754429C
67C1370C95BD0E352A1643D56A427F05279931EB713B0A0CBBC22A3CDE08E350
CBF947CB9CC95E6B02AD2242938CFF42757B2D0FCD36C916B976049158401D52
2029B4F53689084FC1F5C3BF1F04692EF8B3A0FB55090163A73F6EA328E4DEB8
A122C43521C0D5D32B0C3DB76A0E2DD47765E9CB4DAB94729DE9FEDEFD67E382
4236D971FC7A826E39D3CB6FADEC4C261C68D02087B132FA493F74A41518A83D
15553852EEF607F69E48B968493B3C7329522147E042F6E94EE98A53AEE1E913
2006355DBCC98ABA28AB5AE9EA4C2D8E9CD8B1BF1F2B681832FFD6369A98CD25
FF4613B10BA749E5BB4A462B27E33F2138220D39B4AEEDFE1F8A9D2F47225917
7FEFC81769C6BD683548C633F0B3DE1A8CC1916CCAAEDFDC2D7012AC3FFA8375
8FDA4EA9E40BFE2357D2F4D2B4AB9EE501FDEF78BD5B80F9D760E9CBB2CDAFA2
04031A9140CFC12DEF1EFD6B1D34CAF844E7805537693F9F2003C264190ED92F
96D42F26F43FA6D573E5928090BDCE8A0BB59D6D191583CC8D1A629F7557F5D1
D3EE862D8902746CD40DA3580E30228E5000913C356219ACC2A70318578646EE
6F6FC15EBE4155D833064F7EB24AB793948E7ADA5DB3F15B913B1E2931BBE97C
9C947778826C20C42B82E55B329B00EF9574CC8D040C773FA9DAEE8D55647D59
C7B17E180868841477FFB96DE3AE1E2C192C2AC487B5475A46CEE3DCDA095230
76F8F5B8CEA2A7F12DC77067D46F251BE1D956E1254970C7BBDDD7215E818C94
D6E408B5B191B89753F6FCAC1F6EE6EB0A09F93720FD9D5AC61CF8BC05D52E79
396DDEDE1CEC028907791C7952CBCBCC751D76A30A2BD9DAF78C39292E6553BE
45FBE8F1D597721433D1068E67C74D995F316E4E5818A69DA2D4B22745A7ED0C
921C6148FDA92DDEA175BE69F5DD1EE570F32FA2A3DE7EFCA4385337F7D5DD81
2C0FF7389F7A35BC9B075F431C7B490E1FE57D5D4CD93C2D0045817F9FC6AB8E
0F22180DD693642478A0B7F6B14DB315C4ED276118C48A5CFEF21AA3A9976BF5
CD0788309C85E64C9934857A61F38B3613D108882B11AD8FC76D3BFCEFC488EF
E6DB6D067D8CA800253CE751D736487F3AFCE7832E74243FEFA934578A780463
8D44322502D5782F609CFF9BD0037EABEBCBBF15BE2233406D973811F4B206CA
62FF5502C16C49F0F75EB42F9762B59A27B07EDC935D486BD75C3E3A79099921
03896C6C01A2AA7D28B29DAA826E25942F820390AB14CD756C4CA372FE45CF6C
8FC15580EA418295597AE11EE903F7873FA23B4D55EABF6B26186A275AC77068
8F183F22AD06E6CD85C35C1FA1A363ADED2905D45658F92A8C5C02EF6BD43A6C
ABEA018F8CC7A0BBB576DADC3A661CD7D825AC4963A8FC1A4ED819235C75D765
844AD4059751812C
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%Version: 003.002
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMR10.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
FontDirectory/CMR10 known{/CMR10 findfont dup/UniqueID known{dup
/UniqueID get 5000793 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMR10 def
/FontBBox {-40 -250 1009 750 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMR10.) readonly def
/FullName (CMR10) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 61 /equal put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3DD325E55798292D7BD972BD75FA
0E079529AF9C82DF72F64195C9C210DCE34528F540DA1FFD7BEBB9B40787BA93
51BBFB7CFC5F9152D1E5BB0AD8D016C6CFA4EB41B3C51D091C2D5440E67CFD71
7C56816B03B901BF4A25A07175380E50A213F877C44778B3C5AADBCC86D6E551
E6AF364B0BFCAAD22D8D558C5C81A7D425A1629DD5182206742D1D082A12F078
0FD4F5F6D3129FCFFF1F4A912B0A7DEC8D33A57B5AE0328EF9D57ADDAC543273
C01924195A181D03F5054A93B71E5065F8D92FE23794D2DB9B8591E5F01442D8
569672CF86B91C3F79C5DDC97C190EE0082814A5B5A2A5E77C790F087E729079
24A5AC880DDED58334DD5E8DC6A0B2BD4F04B17334A74BF8FF5D88B7B678A04A
2255C050CB39A389106B0C672A1912AFA86A49EFD02E61E6509E50EE35E67944
8FC63D91C3D2794B49A0C2993832BC4CDC8F7BD7575AD61BCDF42E2E421AA93E
3FF9E4FAD980256D8B377043A07FC75D6169338028692CCA8CD1FE92FD60AD26
D57B7519B80A8F8DCE9CEE5CDF720AF268D3C14099498A843D76E3B6C0328F24
D36EFE7F5C4E5B5C612786200C8DE3A41EE5F1FFAF4097653CFCDC8F4FD32E0B
03EDB3E413283B9EFB0AC33B055617005BC9B0057FD68C52D1B0E67F0C571685
767F2AA85ADE4E0104A1C777733D5E318A22A9944336E5B98D965E50D31F357A
8B6EA5A0EA98E1B027CE68C2EDB149EDDD04ED74A1B3D206D471A0C11C11449B
DE190BBFEBC08C9E1B7513B43DA3134D6B11A2516E6E86B67F68C970A320D05E
94FEC57FB347606DF89989C33482BD09D011C55AA920319E7B26A205D3D0F004
22466F09C0482A164CFB27EF6ED2B040ECCC3DCAF345B5A73676F193D43123B7
72FD6CFC5E37930E61EBD5A6307E4DE70194E6384EC0D79DB6AD86D3B319A31C
8B0589D0FE28241D8ACE280D0530EE99C80723E560BB72AE9D53F4713181F491
344B06D3027BA4E9E94D4305BE1D817197C54C8FF56CD6964165F6448ECC8A8A
64B48B4F0FD69299A137589E2491A283509B21A3A5772F75B7602A9F60AE559B
07A58436D04222C73EAEA72DE9A5A441F88D27C11F4F91255EFE280E91A4ACAC
1E98A4E5E6C57B9AE86FD218C3CD8F24A4104156A80F13821384E529783C52C8
78B94AB3A0096090867ED32E8A30980E737922037F75F062BD83BF4F5929BC51
CC22AEE2DBBAAA001CFFBFF41D258424FAD888FFF1BEAB796A44E3126159E120
7E4025C676CF94888A1971AEF8B6764B3AF4A92D36FAF6FC56FD049710EE3782
BC2CD84FE2473F133BE03C1346B875463F126DCAB15C7A9BCC9A727D23611462
4E8D2BFD2466600285D79518712B8681ABCD69608E6AA9578F7BD771EC36E01A
5A17BC17E375020ECA59B43790ABEB9DF5F4FBBEF807E5699EFEAC563E1ACC5D
EFA336E75DE6D8248E9381BB110884FDC89C2F9A41EBBC9A8A1F98E6A41F68BE
EE30E25CA148C1EFF42DFF8C214A6537AB11F260B8C329A4947B5FC8DC9C5622
4DF7BF4FBFB00380D47BABB03BC30627AA74103E553F55278F538EDD8C1E64CE
0F1398CA0AB5A86630139B4A7E8FC02804CAFF3830114640AE50D2FDA3B561B5
C63AD7EE3347804CBB40FB1E77A6C89735DD870351C3A1811591AB493251B904
314F65791963C0412377C1D02362C5E9655F1C3D4803CD379A8EF24C48218C2E
DF1165840462BF37DDE1B8D5FF09FA2C3B261E2F1A65ECFBE5D4EAD43B52C029
EEB3948CB8A252CBAF545C8FA1C31E920E23A12DD7222CEF2D2A513BD758EA13
DA33BF5FBF1D734653EB83DA2D374A5B9A0CE316F24EE375D6DF6BDA49954C2E
DB25A88821193636119D469BA66E5DAA9C92520FD4F84426A4E54273FA469084
7517817A6EE3E21176D333825E88046F50B3CF6938AF9BA79A2F51398239EB91
1A2D07F7FCD948427FF62F40FF95E39FE1A1AA8451411563FD5388472251C155
69BDE9283B41900B21EB1190D06E6B13B7794FED020D2C1BDD205AE77B084BCE
EF628249398B496DE85B406FC2E1939EF00DFC84C07E26CF72EC401BAAE756E5
7F6673216E7560D1C2A723CB405EE5CA474A07F61B81F8836482F73DC9516D67
CE0CB770EAD755B6B356198B4B97EBB29C63456953270CCC8D5650C1D006E69D
38DE2DFEAB27DAD50A817F0D645D30AF5B75A7B53CBD3D2B8D87BD0A7E525AF3
22F7ADDFCE31716914C2318260C2E2B4664893921B68C5A93334A361D94A759C
0D7B146D6FD94F0442D672BDA0F6432E18F3C5DFA37ADA378D95B75F413C9ED1
BB5C606A3EC7DFB3F796F59B0478C13FD1900381EFE0BB5242D5B5D34D03AF1D
4BDC93EAF8020E26CA23C8B0E7DDEBBC6762A557067A4CE05A524188A8F02E2F
3625DA38DFCF381727887F5646A3995A8A38A5FB1E5D5EBB395FDD0B7C8E71AD
B48EEDB62AB2CE99D121435EFBBFCEEA69AE9ED8238B60CC7288DE33C766CDFE
15B767B4AE2E6CE0965E77272AC9F86023DA620548CFAC85BC751C44218A29C9
849F1C2DCBDFAD895B54E51A569952ED50F82DC8A19F367E7E44643854EFD6B3
FCAEB04E55E4661C82D31E2932611748480EF61FB2FBFB0CFB940BEA81AFCD84
4C6A6332D7A600170E38A8EAFCD4F93DC153C43175434C86BC747348FAC61B76
1FEC9027C1A193E55C80F1F20B5317AA0A05AAA36AE235F6E49F06E570FEE798
84857D7552EA92EF3EFAD52DE39C2F8F43C59E3A957B7B926FC95FC4B60186DF
7F3523EE2AB74E294C8C4BCD8B4975E84849E0FBDA6C0B0F24A636DFA578B122
CF97BC5089E21E9F5298D1C9F30CB8BAFF6A3A11BB4D9A0A5CF2B18D055C44CA
4FD4D8FE1AF3630907DE7E585AA811F9CD11FB2C8FC791851D651009FA5DF20B
3C33FD2FF848A9E3F5652BD294965A332DD3F246C91B0ADA34017FF2451D1394
F9C3C95AAC6EC8062BE98E8914D51DA6A164AD13938693D446044859D03A949D
F9AC5DF4A000CDA98BB516D762CB9F6D44B5268FD0C26E88BC4A760C0F75A140
DEBDECA4F511128B7D2805872160C55236F0A0FA7637FF0D4E94AC079CD3C8A7
D03A5A56F26B0438B577C46011A10532FEBCAD14FBD6032E224F45691A726886
56F305231EB2FCDF59C8BBFCB5DBD2D093A0E84D62AC93A2312CA69295E937C4
8DBA1802B85F54B5E7E6D6216A918F911FF705D3B5CF055F1D873B96283A0B53
59344D910CD396D883F6F7836BA65FAB4393A773A8F6BC298069E5BA38210EED
49C9D920F718E3FCE692527DC7CCE6963BF744F2C91BC5952564196D60574E86
87A0FAB21F2DB2BD5A51D7FBD8FC19946D24E5A228462C4772F978E650ADCE3B
8D66B9C21279C531CA1C3A8ECE3420BB65837287A7222CC3673A2A5F8BBFDB60
C719CD073EF9A23675198462C7C87B24CC92D6AEE5C25AC63855CC3281494342
D28F3D2FDE0C183486769A4FD5B0143193D31FCB2C2A14E487BBD96D0BADBB64
D1B56021C363A795BF10E2DB448261C363A54A4AC1182B470C457AA82DF3F5D1
F4B329806141EBD53CAE309319B94133D7EBDC2D0453A905ADD207364371E178
0A95C2686E3B34C4A978BFC0EE968C39ABA00889BC5149162C2B54483D44FD3B
5CFF41F611C7E03B94945F414560E874D7CF27FFD0630890D7D7EA66CBD15448
229059E1C436BB33D69552B5367AB5D53591C4678D0C704DD3EA23F5D9E8A7AC
17D003C19E333E726FFFA2961F33C70F429085F7BFE3E2510F59B78F58B19CB4
01B48E184BAD9020FECCE3AF52048A056981DAEA02AE78197E65855DDB170616
F54278395D9EA50DC83761AE759F9CDEF9E1948E7002414FC05286ED793E6662
3347F2A9AF8917493D7305B92CF93E8E9185F70015F5594084298A6C2F9FD3C0
689F262AC9FEDC9B89577ECDE92F08D3142209FBCE7B5C0A840CC767BCA56C20
4E4E545E2BE4D21C53855CEE4CD0AB35D1A604C0FFFF77DBAE4289752276559F
A05FEE65F45ECAF44E95E23FAB6052195C7948AF0B1126482D4E02D72BF8AB03
DE0F1A632F7672AD9DDE70EDC82AA993678A82BEAD0BC2649C4707FD8509810D
364B5C6FE0E10772E95288C622C2F06C634F4DF8C7FD1432BC9310D5F24FEE3F
7AB324863D6DABAA1576E70643CA79EF4D7DF4105093D66CEE0F3B87D2164A7F
26EA05F5C4645B22D3E1BFD2219657712C168FD90DE801FB0F32759E80DEC1E1
43CEEB19FED12D757205043FC98FEC62D6A8D8B97BC083B4A0E985AF7850D6FD
8716B9957C1C35A0675BC53DF672C425C79F43FDABAEE7D63F092CF271C9A9D7
C41F40C4189510987887942E60A412B3EEC84C9A6E1AC7D54D528F5604B72C08
94B7882621A5BF1F325B92FF96B80878CC550D1AE4D8196E41CB1251856609A5
C4D3BD05A922D0D45E039D9450DEF8490A3E924E41434194910BF60BA1B08BE1
B41824345627745541A4F1703E956328F6227D11C74946B38CFB096139979E56
4E723B889B44C6D78673868C89912F8B4F0B4B485F1587A637B630F92E6072D5
7F3B44EA6FD96BBD4FC28A6C1D90805E3BE3E42A7BC9C880762966C55BC04E01
204D083AE976FAE6F37C94F27E68F8C0F28D52B17F6C0FD7C9150701FD78F8CE
B8E8DC9260E3974005EB5CA728171F482D765016C94D4ADFE4A42EF42212BC56
7E4EEEE8B0D2A7856CD4E44F55C0BAB762F92CB8D64C17022D4BF3A47C12F5E6
279FC23101FEE93753653CE8CEDC3B75C9CCB29BF1D4554C6120DE8EE750FCBB
E38B5D915206974962E320362E59B3F21B3AB1875703191043D03284D4467346
CFF2F98CEB4845B73ED8E003E0DC94251B73E13A9B51A3F1430BCF6A21EB9B7A
65E17FA411F53BE6432F1506232B8159E008FA257F884A4A01AC53BE91754D78
BF14A5B0FBFB9C31BF4908355F8A762052968DF526D118708CCB0B7CB5BEE285
6DAB6CD2E3934178E60BECB11AAB5478623CF6C50C92F8BB5D1A583609028FA7
B8A53B791BDC9EF76A124F3F7641857E4BEA0837CB36176EC9A522EA7F41B8D3
63C37D1145367BD300F17B54522A834BBB74DE12BF9EB26ACE6F24A046D58F89
4D4B7DF74875F1A0C1C9D97BE0849593D7B398EB4B00BEBC8C8D1497B6EF831A
A35380FFB7F1AFA4D888AA52C9482E8B1755CC209905F98F40D95B44D4DCBCB6
67423D1BC2F3560FF0A8B4F0CAC352A4EE2C1D946E45AAEC8A6AD40303F3382C
DF0756BFA3B1ED64C169E56ED1C760F2FF0E24DC5C9F41306EF8D2628153D30A
5DCB0791126BEFD4947D7EF08301FE015F2B0008DFFCBF9F2D4D859FD43EC7D9
C5BE237E9BF6665B7B1BEBB362F0C0C3A8D86010B9C97FA741C97C2E0513386C
9C26C235B14DD2A58BFDAC7B5F63DB4DA6D5D37D0098175A9071590E1DF66A3D
B8173A047C29D7D35557F06132CC920B5460B8AFC11D23D09A4E45D089F5EB51
963FA1A6256E359D485107FD143B2BF21FDE9DA5744BC2615E86C31C89470CF0
D06C6397D9FCCB316EA9989430240759D2C4945D941F159FC02327F34B042BAB
B5C3A47C78E8C1A6FBCD396B1A51CC4B020B8AD401841EDABACECDB482D6EC5B
72D2BFEB4556720FADD49D07307C8B22ACB7E310CA4151A85C71EEF70E8D15DE
B3B00F26E0E166C14647A65ADA228A3D1C89025BE059306565DB1B1EFC37D358
8C1EB024254AFD049BA977BD4C2C605050E17940A89D0D4C5D963E792320F5DB
3706682E03D25D9E02487247819551465092CC22B6B56E93F3AB528038FEC3F0
668F866707A19B0463BE706EC729D2EE1653AAC7E29BD25BFB3241D4792F5152
ED415B4E7FA92C2EE5A22E27E8B75542C492E56D811C192E95542A6FE0BFE5A5
69273C2ABED4300D491B92D2AECDD278404CB84B1BB1BD7AFEC858215837D118
C0E928BE7E07CFEEB51A6D21375B772B8248C994564014015232A0DA4BEA1754
3274F407FED0837A236371F1A32056240F2015B1E7F4B2CA72C6B58610A66F13
407CFFBA5E0A2893C1F572D50F51286E9133B5A84239C9493B0574E77D281D01
11D00683354A000C9700EAFBC1FD104EA19DFCB87470190E7E2CE26E3A6FD0FF
2620B87B82AC8686B6206B530F17E9348BC7D04B948348802CE53A312443DB87
4DBBA5313A6A2A8DAB8A1CC9A594FF8C299281C0A261C8CB2226B732FBEEDE40
2C6ACC74A1A61379E2E1CD5548CD908268A32FA83D8504C442EA0E183ADBF7FF
9FD09C037AB03516ECCA93FF048235BD11A25DB07F164512A079C5392AC7F889
CE96AE5C8D9580BCAFCC087C35E76EED1A671E87C12E3045E15A687134736DF8
DA984772AFD189D68571A2ED7256F1E204230E41D3D9DD876F938951714A3973
0CA9310489F8E807C1C7A4E51AEA5BC030610A5D7263FF7E0F9FDE3E5E37A362
5B919000BD94D978583B942EB79CF2BEAC33FEBC9A67272EB10865BA8FB75FD7
9D280AB59F91B96C16C982DE848D76D8FA8620DFD7C80B7DEAE7264350D6FB3A
EF04794DA3305844A7CF718F6D1A4A3AFF6826173A076A1372ABFC54ED3AC6C2
09C9287FC830556CA694E21CA5342ECA7B10C90AFC4783D841D7B1E34FA3DB7A
2B706F3E21B0FBAB23E7257962FC3BC309CEA2C7239A9D6B44CC96825115ABD2
AF9A2566D2F3382C01569FBDB94C8D664A5DA0F7DC3DD140CA77C743D7BC1420
324ECF9E4780280EB119885E96A6C619CE3C0C8E1E264E2DEB137E5DC8149786
486D65667ECF47B1A1E20E9E6E4FC8323E0BC8E61BDD3BCDFC6575C69C03E31A
EFFC290472CBBD049DE3F840AEE37A2486034240F80E75D8A79E0762377DF660
52B12EAA16D678990B11A9BFBC03C1D4FCDA9FD4FFBB3E88352438102F10B7C5
9F04C013B6575B5E948FAB58EA691984A0E54E6B9F3F505FFFEF74D06FA1CDF3
4B8A95904C8A2763AA8AF5B71D00F5DE09DC1CDF87A08B6D181453063E14C12D
B7BB3775A6E2A901636273D9EEB833EA8CF20FD83AE899E28DADE10EEEC20BD7
BD93085A4B1AC80AC1AE8280C14767F1A487BD066007A0D050317BD081131A14
6EA0898ED59E46DA7B6254BDCCBC660686E2EDA0E77A705A653733BB5C5497D0
B130359F866CF293FB6EF0C2AC5BAA2DB0DED045E2DED3A2612D078333260359
16CF0CCB272D34767EA069E0F0B0D42327A18529D72E890EDA6195C2688438ED
E9ACDBEED41E81CA8EB5E43C2B09CE266EFCA03F2D7FF57F12B06F9E54FCC6A6
546676F6FFC5B8B7D3F0982B6FF0D21D949309F0C0B175CC1D0976F8C55C6AED
6E821C39041E22D91AB30922F2B2EC2746BC7DAB484991542FBC82D87B487507
559AB466F73EE23C2D3194DC5CE4C9AE66D3164613AC5CBB3DB501B64DA7C91B
C7ED2EE9027FC0906820B35D4F2CF66C4F9CE4A884B7C07155BCA884ECA5EB3A
ABB83F84DB1F5639599DC7D3F51241AB5D95C3BCB7AB1EC90B4BC989F74FB354
04B2D7366A34D335A47B8C00C05CB423482BF6C7970A95545424A08AFF9A035B
7F83F52B65A9799CE76E303B85664B624C65E9CA58184C7BE2BB9D9C86A4DE5A
8165EE3DA2E652B5022EE7893896BABD88931DE1D538F615787645DF5ACBBA0B
A8E5B899A37321AA7D4B283AC9234978C2DD81813A1EE5DB6EC170DAC1B6EF02
94892635B498765C07A38D2E9DB0B7581B11056C28278F89B0E60998379C07EB
C0EAEDC32AA69B8B836F92A61AFD35688315B2C3F860632FC13E4BDFB63214BC
41CC6859EAB3AC3034449213CAB99FA1D216563419CD6D6CE4E1B56F33E6C654
7AA9DCB5B05FC068DF02AC32408C8010AD004F6CCA9887830927F8CBCD49CDB5
18CAC1EAFF815FF2F6F527F936948201565003022C6C7390B4E3C2B219FB4F76
9F12BD25CA7B3B61D1A2F8DFEE795D04D5428B42FB66E0C254AF7B7A10CEF7FD
E0B5622DF6FC4BF52147208D9A91EB49B03BB40DE7F8FBFB566F251942C8FFB1
1DFA50465919400C21CE4724D12E4EB47AA5F392BA927329DBCA28A78FC1DF2E
6FF27F4E4E3F8971D7BCB5F3FBF8F30C214A26E5E32E0E8CBC71BF20AE573BBB
163DD66E89F2C4E2B1A1532AE81C060146F755A1ABA3F1365FEA30B403DE7B22
76F43EDDF7CB0C5D3E3F2B9043D33654BDE23221D16CABE4D559575AC8D01281
379FC2AD33242EDDECAABC38D94B5261F13375D63207B3EEBFE27697FF9C6A98
08A260CE1264FC647AA4F80E0A2EC2EEF124A38C35F829B03305C61CF9F26DAA
1BC0457D1C7FA65DF52C453AA851A791E6993CB4BC0C0A449D6F0C01D2217330
5336C0A329988AA21A0EAC50B8762A97226A8570C956800D2BDA5431EA9CA3FB
64186466DA95E5EB4B417A2E43A627BF3874A2E20F381285D1D430D5C2711222
7387EA17E909D6BE064690A19C443A90C245E50B144E2C2143F4D5B3AA1A20E4
FAFC09B269E6CB0B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Roman No9 L Regular Italic) readonly def
/FamilyName (Nimbus Roman No9 L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -15.5 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /NimbusRomNo9L-ReguItal def
/PaintType 0 def
/WMode 0 def
/FontBBox {-169 -270 1010 924} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8E134D4CB5ABCED39AC635
DA001E9934C198A7F9B9ED0028A85E9AE00421DFD8EAA3BB3B4B4CE45D209303
237BD51809FE4D880900B1EEB236ACA87B9FF6EBE6B994A60AF5D67CCC42BD56
77295C346EB4C62BDC1EF22EE07DAAD928DFB73455F091F32408ED6430B97417
683AF27A03718A156E3F6E7B6E4F2E8177503CD82DDBF4557A3CCFF4C858AE7A
F7EFED6CC521A28342436B953E4650B5792BE85EA2F989EB6D986905A61FA38B
96E1BBC830B74469150FB0B598A794FD80D10870084A877273A9502C3456E5EF
74350E6E3BE5863E8BA185EB59FB87B36566AF71200B6ED389D1287D4E925E33
B2383ED05D87D48586E698FBC5D562ED9D8A09EC3EAA1B1F300224AF20C23F26
A2EADC74562571DA84B3914D1D80B127C6FF4706C7046BBB372A0013E0AB94F0
C27946583871D272BF4F20FA84E89D745DE7BBA885CC09BA72E0F530ED4EF7D1
864B3C67007ED98800284235372F0A70C912E21E851AFBF812165B8DF912CD1A
013E271F0B347967876C68AE4C4107EF8AD1F170916210034C66394A9D971B68
FBFC1131E37FC178EB97C1B2A0F573ADD9D7C0BF944E6529734DF8A7EF54485B
A3375CC30E9E328943733CBD352BC15B06C85BFB4A96994291C72A0EAE84FB01
0F1B24D0125FB8C16D60561DF8BB7AA7DDFE9549AFB70C1E89424214609FDE41
9A142892E30F02754FD234CEB3C59A2A04C06BAB7AE40E8FDEC50559B8347684
391C750987802D5452C47C1E0B5F222DE9A0EEAFEE19D796FF375A1E1EF0AEED
1BCAC4F485FCAEE18AEC585D1A9D80F41871DDA45FEF1EAE82C5893118987BEB
4D9E345C27C7419FE65E4853B40537D822E34FF1E0BD2819D21EF607981259E8
9F1040A2D708D7463858AA5381759AC49DF4DDDEB209A278FE60BD2508ACA0F4
6A249A05B652E4C7BF1B676943CDC463B1AFEE36C1C3B9E85BD54EB70431575E
BF28ECC41A6A0A5E89FD2B68A2F70C638789E364846C907E143CF1D3FC1360C1
D342C94322EEC1547E7ADF123582F655B10A77CD82EB3C0FB8C09606DFD022C0
BB2449CFA284AB052240413FEE760A8C80ABA4CBCA22DADA1349ECC4A9950C85
78B6D7B384C4A037A848A335E8D451109CAAE2811E499C038D545584A870538E
2AE9A38C509097D2E55E6C7A52C3C7106FE2658CCCC0E009FCD0D66C0F9656E4
7E98A214318EAB91191B962D6EDBB5B03576BE188F8A87EDCC0E550DB1D88A78
A306ED8D2DC700CB7782113A1C2469DDB654DD3B851D01B563FB3A21150ECB02
E34FB17C3017641863900200F291B2E624482DCAF786C10BEDB739584F60DB12
106932087FF4370D1C25711478FD4AC8E03BE4A2885A935A1CB7E6B2B198EB6F
00A9B4C5CB1FDE6F0DE21DEA2126F3A9076269B99888609B62B7CBA5C6A21609
CB4D90B6068A5235A94489F21B514032F3FBAC45690A84EF3A2C0D17C269633D
AE67C713FEA091BCC7C6AF76A0DF223531C12CDEC349D2325D6FAAC3C1EBA008
0CF4DFCACEE5513EAF3E903BAB38790E8729740D29D27C8018BECD829ACB6C3D
9129E976A242787A0C37B62D3D1BF8537CFCE40CA18283494E800D98DF7E1AFA
EF792660158797BACFBD7CD6FBB41FF7BB607868D480DF6C530C83A874B32A4C
E1F47F0B7609CEC5EE646AE2E2DF81E278A3AB9359A878A64E913E84134B1C53
AF1802803BAF5597570A8C6B0B4A5E0E827FBE0C3CFF9C5CAD1CB5BA1AF1B6A8
D13F6A0D3FC382598F6790F69D1C986A64F25CE29C161D1DFED4E056C49EC385
0D88DBE34BE839D3F2F36EE30695E71BBC1DDCDBC1B006CFE5A032B95CA40F19
FE0EEEAD466FE804591317688C32F948B47DA046070E46E4BA1A3FD355B1DE1D
32145D39243D0590A90F1C4EC2C69A385600773A0ACAE6D25FAA0A36D430519C
2A613E030279B44188897585385A1BD3C350F31F6E61A7345E056E01C1A481E9
45FD890AA23745900DF0B0C182FB0A973DDC9DB6DE7E7596528D2582B82FBA9F
E336EA62CB55BE2301E115BF38D18AE8461F466E2076146451C2AF25E5EBA344
D34F8CDFBC3BF32EBB01BD69C0C8F8C4FCBCE04F3C65EA91889541467D451A5E
A81586D2E91844C22A3CDE0856BD8640D2B9B1844E01CD39ADC11FA69DDC5020
CC3C14EACE61BCE6EC7A9934BE9DF8E2797BB52CA05603870FE7C734D80223EB
23468A199E5E7725983CFD34457404F15BA85E1CD860E7D74A4E73C9B32EA493
E60787AF090ECB75DCE07F74902F732C9E1B3968F594AA5479AB954F72A540B1
BEFBA37CBCC7A0DE20F697627A5CB22BB3868497D46B779C8609E85E4BCFE843
19532B3AC9D62BD415A25B68882F9207ED34F28DFB622BEE85BFEF35A03C057C
572BA8BE7D6136C56B289D8E66A4AD0D7458BD45FC3FD89AE09FF322EB01B122
2EF05EC89BF7023BCE3A87C3DE5937D454593751EDD711F21B6DCFE6A1DB13D8
60842BAEC5EB5C217FC685C06C5AE447C9961E1030F6CC9B504E1FFFCCA35243
1A0D5BFCFCFAD4393EF292A9E582B78DD2BBE4BABAC7DD277FC23AA04E5B6192
2DC4A068F35B9E7EB17E895A9862CA1C88661E11898952F1317E3BC8F70579EA
CA82C64B7ABE1ACE4ABFBFA159B07ED5C93D976CCAD20691B072DC9825E72438
0AE722EDA58756E4FA9184D9C324D2DBBC3165BB4DE936CC3A4BF19EA1C5D6C0
D79F9DB3B3B5C8C868FB6AFAADECA9158EC9419109D47C0ACEAD4681E28A7E1B
43265201F1B4C49A4EE76448D1CD1B73EA13910335910CA61F5B4984C9A127C4
BFEF9A390D3C95A9938EF236F4147C250F6D7F8459AC97D8256B54704294478B
4C661D4A4E9FA155F8AEC542E986811C3A1053C9A032767CA766CC888BB33D40
9B06DAD10E52E08CFBF052D1DB422D245201FBD6463F31D42D64C0D7063F30CA
EE917F0AF9AA32B6AB21FF4CEC183963E8A9EF7165583B1AE09C3F12BAA82365
202F0415EFAD684EA2927843B2F5BAD762873DA182659D73D6C906AB9675F371
970948CD728899E17FA0F906097F360422F59F50625FAE9DD08A8BB3C39D282B
7915AB2936FB2FC5B96B4DBD2887DFAFFDC16ACC01828F9C7F90C99D1F049A3D
2DB0551C289422591AA1BD4AE7A04965F292B0C09FAA9B9B21285CF0544EE7E1
72BD7D555403B83025FC259D4ABAD69050D64014F76E93A2B631360664A35CE2
BF47D21F6A7D4E95C2B710B3A1FC467F98A7E2F4511DEB9FBAB2FEDC321C73F7
2392A08E129B014465B50CD7EF528214F30327AEC7B0075FAA6FE3D21E5C1928
F4167F45530C20E87B8406B811C05B6AF2EBF80DD90786B4C19754DFBE077816
64EC5561996C797412E8EB7FE362AE5F0C086F5BC7EAABE035F2A19ADAE898B7
F06CE566B5620FDC1AC05004B25B3433DB6921D7696DB969049031B0C248B08D
70E5C8DEF0073B297683F806A2A2C038FAFDB85461241002CC42F60DAA610BB3
944222C01F0BA2705924E9FF4B42159E5978724D0874215B49AC3C17312BBC0F
0F89FE477C2413903A61E139B0D0A1F460ECF609047DB5AB1D11EF4A587E569A
48CB41939045764304941D884646C328C7B77E1C3FD22A147E3E4F8C65DAF13D
26C24BC276BC5F72AC1343EE49D70EC1043D8EF7F37CBC224FCC922D1C39AC96
7B02ED9D8943984239EFBC4A36C40D9A406871E2FDE9D7A8A0D4E11DD6435FC6
A7C2B91B672FA23D9F875C001E76E6E28F3D4072572E95531C63E1E76AA34EE0
AC72369B7871669DCA948F18341306C3422922BCF391BE9C9CEE1C4282CE515B
E82B5BE1AD1B0A75A2EBC9CA264513ACACAAB6FC8441F843626D9DB311E1B668
468AD648DF75630D16F2754D1C6BA2F11C822413620727639DF2C967A47F8CEA
06FAE0E2C99877356A30E56A5A8A8079192A7E33391053008E9323769CA9A44A
40D6876DC7D2DBA68AD2BA8E4FF32D6E960E3F9D8967C35CF7943369B5DC830F
7868C7191EAC5BB67EF2D84EB630D529610944338E20680DC1F1C80CBB6EE018
47A6A323AB6C18D6544248F253F9761EADA629C840F5CA06A5256DB1C454FCDF
55D0F95F11AE5AEEE3F822BE9AE47BAF81C8F356470C31B4F54AA5E59A524516
7922B29CC828ADD9B2582CF6C3178700E56D15B3A9206557952E53E9B9A49E49
DF90A6AAE92EB1B2F3A2276520B1F62A556CAD6F0F434CACF7361CAFB8E0126F
B1217896DBC5AC368A2D56BD802AA6ECE817EE83CF1ABCF9ADE8B24223F5B502
5384B43478A75304F3BBD86B374D7B572C44DC36C236272FD4CDFC8923B80543
E5C5BABF549621EA8FAEEAB5E745E5CAF9DD3087C4764D41F93274BF21FD5DA3
E9FC028BB07396B6A021CEA623CF71B844323CC083D9D5F0CC23C7493D971C8A
D739BCEB41DA8CF495BE97E6FC940B9B2F00EF3607EF9D22EBAFE0C36BA8988B
30444C01F6B9196CE303564392765BEB8DDB698D153070DF96140E8F4963F51A
4AEF8D56EBBBC25069D0F27E87B2186D931D624120B81967E58ABF55422C8DD2
09DDDB0964A51388B669C597141ADACC7696FD07A97451C9296C2100009D54C0
722BEC75EC3DD97F90EB834B271794C994A3F9821E4E9B9023B08C7CE8D31EDC
B4C4E35656CC9F8DBC6622F6729EB829951D2913ACEB2B14670BC7B94A33650B
A6A72BD21BC915155E3C3F6A00131DE408C2B7E24DF6346AB5A763F1BA3386E0
5130E782B9C751421B119CE990766572502B25155B73D6D3BEBC168D68429C3E
4C9366A0323E3E5D9CE9B39BD1B7C3409268D941942E0742E7CA8CF4315BF207
A7A6C9DD70F516B481C4022B8C6B7D7378193E5B52EE3D603BEA4173B2E20D8F
E73A21D3BF187695B9223A06997A142EEAD929525049912D5BB38991F7DCB810
53FECA06B75E37C98FDA675AA6BD58969B6D38F3CDBCE5DF8A9B2507085A185E
95780E061F46427A91E4BA9462E15C0573A1964B6E0B43BACF9F6D255B545E9C
6E9243D496C925E4BFDC76491589CFF7701059BBE3670626A483427FC8B91D0A
2C6D939EBEC80A28AC693A5E2150035B038B16945864B6B55E8A28CCD9F49F6E
8A2B7DFBC64B919B1892AD2AB3528E7F851C7566BA81164918688A7AAE717F25
625D53DCF0B9E2386BBF0900E0E011E8ADFE1DF7B3114E113AC272E689268C29
81DD9B4631F1869D3AC29F6967E3623006F57A08D8D6D7F4C72073F273A71F31
61CF0E201F176560F60EC75E745EE1577A6E0BB79BB7476F2EF2991878E11F38
FF36D1F1D67E0A154F283FA4E46E91402D5E8C590CF59FDFD8BB1CC5A9F32DD6
E6211A9F1C30D13BBBD899E1113DB8E9E10BBE2AAAF0F59A98030CAA21B527A6
04BF1433B97814C41B3C5B7221AC14750E89A9B75373FD9687F338923606C2DD
6B0552606218BDA22F6E793C31EBF5C89965E329D5452E0BD5FF1D07277FA98A
26B7A42CF88DACE64A3DC88377E16AB33C5F36ED01D8955E11C53CA69AFD1412
42589D04995CB3C8A312666BBF8BBFBD24D39377A7E86AC4896D45F37B4CBF6D
AA00B960B965E9C7F789DD05BC09454465E0632A92EC4DD041943F338126630A
D498EF8B3A9EB4595002B13BABBE8D07DC3F0C5D4B351948D03668F2A0EBE1FD
98697E21F7AD3CF2FB3897152B7E9F7C4C327C49FBC7B676CB4CCA7B5AE871BE
31318865A20F22115F2502A17F8506F5E212668F41F37ADD6989E85FCA21B9C7
22AF2F2739F6074B0FEAA6D8C2B1B137814854BE8DADFABCF0D09F4F55520E1B
0F1C348BAB432579CCA4630A93A43676F2786D00CD23C6C8A987B9724E973A66
B4009478654C8AACD179511A766B32D2B9FB28B1B957C8E014CB39164B65A06C
6F602FF3A2A62E9567386DA801BC0C895873C19FCFAB9ABFE3B44D21730DBAD6
65A321DFE362EF0450576CE48CE0709D1914D56A5142B2E5E61DA849E99BE972
80ED370D6909828DE61CA45D557DA64CB33C06F6E50CD5E02F0313BEEF1080B8
E63CC107FC82406A93FB015BB0543926AF00493392A0C673FC3153C76DF3F4C1
2C78DFA328149487BFC925D145BE35C8758391D2EEF34685543055837B9E66F7
7B747F32AC468F655EE054D549497D542111A2B2F67125F67E82F5A34C2567E1
8A432C66CC268FE18E1DFEE16D41D39F8CBE909E9D0F143540CA685AF2ED4B8E
EFB37E9C75924006977B767DEDEF6C0A8A233A8C945F31C26697A7A62BF1105E
162000E2F1E5FB891E3AD8BF1B3822370E67BC76F5D6690ACCA0BABD0DEA79A1
2469EDD9C3BEAEC89579F8F7913BA107CB05C70B64A710BF6024BAA5F6BA3DCC
A9FB3874C60C24031AD5E99126281F9CB8C29C17C6DB03A1C1AD8E771B227691
8F70C4DF86DEF11DA8D2FF6A2FD43BBBBCAE0BC03B4BB0970E8AB3124E4EC203
22FC4594CE5220CE34FBEB2490B33651B926FFA0E5BA70DE65D858249BE9BA94
CE93CD42B75977B9BD82B14377CE17AFFB0AFFECECC1CAB69E16356E21F3F732
A33490B8AA7F88604FF9BB30C2957490C8348ED94D18233AF3758CF85D8DCAEE
CE157114BD51556F7D59C23CAF77D430EC6A559F4E479C21D6A7DA9D971324EB
01D84352EB36E4BC40F85505964D158F0846FB569EE0C880A3A91BDB9BD8ADC1
1C1541DDA1C2D640181B76CF9951A9AC51379147C1B4AE32548E1EAF8A707D48
8B10D00C0C9CD4ED85E90E3F7B4EFAAB5727BA0547E87095D6B14E83971B7052
386F1C1BCAF059E2
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
TeXDict begin 31680913 10199800 1000 600 600 (tmpPSFile)
@start /Fa 138[42 23 32 3[42 42 65 1[42 1[23 42 2[37
42 2[37 12[51 11[60 4[55 1[60 65[{ TeXBase1Encoding ReEncodeFont }16
83.022 /NimbusRomNo9L-Regu rf /Fb 194[93 61[{}1 119.552
/CMR10 rf /Fc 197[33 5[60 60 60 50[{ TeXBase1Encoding ReEncodeFont }4
119.552 /NimbusRomNo9L-Regu rf /Fe 204[45 45 45 49[{
 TeXBase1Encoding ReEncodeFont }3 90.9091 /NimbusRomNo9L-Regu
rf /Fg 140[47 2[60 10[53 101[{ TeXBase1Encoding ReEncodeFont }3
119.552 /NimbusRomNo9L-ReguItal rf /Fi 136[72 1[50 28
39 33 2[50 50 78 1[50 2[50 50 1[44 50 44 1[44 13[55 4[72
89 9[66 14[50 50 50 50 49[{ TeXBase1Encoding ReEncodeFont }23
99.6264 /NimbusRomNo9L-Regu rf end
TeXDict begin
% dvips-unknown
statusdict /setpageparams known { hsize vsize 0 1 statusdict begin {
setpageparams } stopped end } { true } ifelse { statusdict /setpage known
{ hsize vsize 1 statusdict begin { setpage } stopped pop end } if } if
 end
TeXDict begin 1 0 bop 0 TeXcolorgray Black 0 TeXcolorgray
-720 -576 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -720
-576 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 -720 -576 a -720 -576 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 -720 -576 a -595 669 a
tx@Dict begin CP CP translate 1.0  1.0  scale NET  end

-595 669 a -575 46 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 159.3364 61.59999
0.0 38.83815 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 273.14737 61.59999
182.09825 38.83815 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0. true 432.48248 61.59999
295.90923 38.83815 .5 Frame  gsave 1.13791 SLW 0  setgray  1. .setopacityalpha
  0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 68.28728 61.59999
45.52542 38.83815 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 22.76314 61.59999
0.0 38.83815 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 91.04956 61.59999
68.28728 38.83815 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 364.19606
61.59999 341.43378 38.83815 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor
 1. .setopacityalpha  fill  grestore gsave 1.13791 SLW 0  setgray 
1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 409.7202 61.59999
386.95834 38.83815 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -575 46 a
tx@Dict begin { 105.84511 46.80487 } PutCoor PutBegin  end
 -575
46 a -1 x Fi(3)25 b(w)o(ords)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575
46 a
tx@Dict begin { 208.27515 46.80487 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(4)g(w)o(ords)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46
a -575 46 a
tx@Dict begin { 300.46176 46.80487 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(2)g(w)o(ords)-575 46 y
tx@Dict begin  PutEnd  end

-575 46 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale  false
0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED mul /a
ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L w neg a
neg rlineto gsave  1. .setopacityalpha  fill grestore grestore 0 h
a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
 false 0.0 1.4 1.50565 2.0 CLW mul add dup 2 div /w ED mul dup /h ED
mul /a ED { 0 h T 1 -1 scale } if gsave w neg h moveto 0 0 L w h L
w neg a neg rlineto gsave  1. .setopacityalpha  fill grestore grestore
0 h a sub moveto   EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  [ 0.0 -6.6864 0.0 -6.6864 432.48248 -6.6864   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.50565 2.0  CLW mul add dup 1.4  mul exch
0.0 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2
ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray true} false  /DS 2.00752
3.0 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray true}
false  /DS 2.00752 3.0 CLW mul add 2 div def EndDot  EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  [ 11.38179 38.83815 11.38179
38.83815 11.38179 -6.6864   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray true} false  /DS 2.00752
3.0 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray true}
false  /DS 2.00752 3.0 CLW mul add 2 div def EndDot  EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  [ 56.90634 38.83815 56.90634
38.83815 68.28728 -6.6864   /Lineto /lineto load def 0  setlinejoin
false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt
{ 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength
exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1
sub Atan def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray true} false  /DS 2.00752
2.9 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray true}
false  /DS 2.00752 2.9 CLW mul add 2 div def EndDot  EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  [ 79.66862 38.83815 113.81183
-6.6864   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 159.3364 38.83815 182.09825
-6.6864   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {false} false  /DS 0.87047 4.0 CLW
mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
0.0  dup 0 eq { pop }{ SLW } ifelse {false} false  /DS 0.87047 4.0
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { } def
/ArrowInside { } def  [ 273.14737 38.83815 273.14737 -6.6864   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  5.01881  3.01129 ] 0 -1 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {false} false  /DS 0.87047 4.0 CLW
mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { } def /ArrowInside
{ } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow 1.  1.  scale
0.0  dup 0 eq { pop }{ SLW } ifelse {false} false  /DS 0.87047 4.0
CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB { } def
/ArrowInside { } def  [ 182.09825 38.83815 182.09825 -6.6864   /Lineto
/lineto load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq {
0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul
exch 0.4 mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2
ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.13791 SLW 0  setgray
 1. .setopacityalpha   0  setlinecap [  5.01881  3.01129 ] 0 -1 add
 DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { moveto } def
/ArrowB { } def /ArrowInside { } def  [ 295.90923 38.83815 273.14737
-6.6864   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinecap
[  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray true} false  /DS 0.64297
4.0 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray true}
false  /DS 0.64297 4.0 CLW mul add 2 div def EndDot  EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  [ 352.81471 38.83815 318.67151
-6.6864   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { BeginArrow 1.  1.  scale 0.0
 dup 0 eq { pop }{ SLW } ifelse {1  setgray true} false  /DS 0.87047
4.0 CLW mul add 2 div def EndDot  EndArrow  moveto } def /ArrowB {
} def /ArrowInside { } def  1.13791 SLW 0  setgray  /ArrowA { BeginArrow
1.  1.  scale 0.0  dup 0 eq { pop }{ SLW } ifelse {1  setgray true}
false  /DS 0.87047 4.0 CLW mul add 2 div def EndDot  EndArrow  moveto
} def /ArrowB { } def /ArrowInside { } def  [ 398.33926 38.83815 386.95834
-6.6864   /Lineto /lineto load def 0  setlinejoin false  NArray n 0
eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5 2.  CLW mul
add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch def 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan def ArrowA
x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength mul add /n
n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt
{ /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.13791 SLW 0  setgray  1. .setopacityalpha   0  setlinejoin
0  setlinecap stroke  grestore end
 
@endspecial -575 46 a
tx@Dict begin { 6.82968 -20.91278 } PutCoor PutBegin  end
 -575
46 a -20 x Fg(s)-528 46 y Fe(1)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575
46 a
tx@Dict begin { 109.2593 -20.91278 } PutCoor PutBegin  end
 -575 46 a -20 x Fg(e)-522 46 y Fe(1)-575 46 y
tx@Dict begin  PutEnd  end
 -575
46 a -575 46 a
tx@Dict begin { 314.11896 -20.91278 } PutCoor PutBegin  end
 -575 46 a -21 x Fg(s)-528 45 y Fe(3)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 382.4058 -20.91278 } PutCoor PutBegin  end
 -575 46 a -21 x Fg(e)-522 45
y Fe(3)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 62.59682 66.72171 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(Chunk)g(1)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 209.41307 66.72171 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(Chunk)g(2)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 345.98633 66.72171 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(Chunk)g(3)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 177.54614 -20.91278 } PutCoor PutBegin  end
 -575 46 a -566 22 a Fg(p)-506
41 y Fe(1)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 268.59483 -20.91278 } PutCoor PutBegin  end
 -575 46 a -566
22 a Fg(p)-506 41 y Fe(2)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46
a
tx@Dict begin { 145.11003 -3.84096 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(3)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 224.77736 -3.84096 } PutCoor PutBegin  end
 -575
46 a Fi(4)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 293.06421 -3.84096 } PutCoor PutBegin  end
 -575 46 a Fi(2)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale 2.00752 7.0 Tbar  EndArrow  } def /ArrowInside { } def
 1.70709 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale 2.00752 7.0 Tbar  EndArrow  } def /ArrowInside
{ } def  [ 182.09825 -29.44868 0.0 -29.44868   /Lineto /lineto load
def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n 2 def
} if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4 mul
neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha
y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength mul add
y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy /y1 ED /x1
ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan
def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos ArrowPos
dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin ArrowPos
mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def /dArrowPos
1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add y2 y1 sub
ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse pop pop Lineto
} repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat } ifelse CP 4
2 roll ArrowB L pop pop } if   gsave 1.70709 SLW 0.4 0.4 0.4  setrgbcolor
 1. .setopacityalpha   0  setlinecap [  5.01881  3.01129 ] -2 0 add
 DashLine  grestore end
 
@endspecial
@beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
1.  1.  scale 2.00752 7.0 Tbar  EndArrow  } def /ArrowInside { } def
 1.70709 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA { moveto } def /ArrowB
{ BeginArrow 1.  1.  scale 2.00752 7.0 Tbar  EndArrow  } def /ArrowInside
{ } def  [ 273.14737 -29.44868 182.09825 -29.44868   /Lineto /lineto
load def 0  setlinejoin false  NArray n 0 eq not { n 1 eq { 0 0 /n
2 def } if () length 0 gt { 1.5 2.  CLW mul add dup 1.4  mul exch 0.4
mul neg add /arrowlength exch def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED
/Alpha y2 y1 sub x2 x1 sub Atan def ArrowA x1 Alpha cos arrowlength
mul add y1 Alpha sin arrowlength mul add /n n 1 sub def n { 4 copy
/y1 ED /x1 ED /y2 ED /x2 ED x1 y1 0.5  1 gt { /Alpha y2 y1 sub x2 x1
sub Atan def /ArrowPos 0.  def /dArrowPos 0.5  abs def 1.  cvi { /ArrowPos
ArrowPos dArrowPos add def x1 Alpha cos ArrowPos mul add y1 Alpha sin
ArrowPos mul add ArrowInside pop pop } repeat }{ /ArrowPos 0.  def
/dArrowPos 1. 1 gt {1.0 1. 1.0 add div }{0.5 } ifelse def 1.  cvi {
/ArrowPos ArrowPos dArrowPos add def x2 x1 sub ArrowPos mul x1 add
y2 y1 sub ArrowPos mul y1 add ArrowInside pop pop } repeat } ifelse
pop pop Lineto } repeat }{ ArrowA /n n 2 sub def n { Lineto } repeat
} ifelse CP 4 2 roll ArrowB L pop pop } if   gsave 1.70709 SLW 0.4
0.4 0.4  setrgbcolor  1. .setopacityalpha   0  setlinecap [  5.01881
 3.01129 ] -2 0 add  DashLine  grestore end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.70709 SLW 0.4 0.4 0.4  setrgbcolor  /ArrowA
{ moveto } def /ArrowB { } def /ArrowInside { } def  [ 432.48248 -29.44868
273.14737 -29.44868   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 1.70709 SLW 0.4 0.4 0.4  setrgbcolor  1. .setopacityalpha
  0  setlinecap [  5.01881  3.01129 ] 0 0 add  DashLine  grestore end
 
@endspecial -575 46 a
tx@Dict begin { 64.87308 -44.2438 } PutCoor PutBegin  end
 -575 46 a -22 x Fi(Se)o(gment)f(1)
-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 202.58426 -44.2438 } PutCoor PutBegin  end
 -575 46 a -22 x Fi(Se)o(gment)g(2)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 327.77658 -44.2438 } PutCoor PutBegin  end
 -575 46 a -22 x Fi(Se)o(gment)g(3)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 22.76314 -52.21097
0.0 -74.97281 .5 Frame  gsave 0.8 0.8 0.8  setrgbcolor  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
-575 46 a
tx@Dict begin { 29.59152 -67.57526 } PutCoor PutBegin  end
 -575 46 a -1 x Fi(Matched)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  1.13791 SLW 0  setgray   0.08 true 125.19276
-52.21097 102.43091 -74.97281 .5 Frame  gsave 1  setgray  1. .setopacityalpha
 fill  grestore gsave 1.13791 SLW 0  setgray  1. .setopacityalpha 
 0  setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial -575 46 a
tx@Dict begin { 132.02158 -67.57526 } PutCoor PutBegin  end
 -575
46 a -1 x Fi(Not)h(Matched)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46
a
tx@Dict begin { 257.21347 -70.98946 } PutCoor PutBegin  end
 -575 46 a -575 -45 222 5 v -24 x Fg(e)-522 41 y Fe(1)-463
22 y Fg(p)-403 41 y Fe(1)-327 22 y Fc(:)p -267 -45 237
5 v 36 w Fg(p)-198 41 y Fe(1)-140 22 y Fg(p)-80 41 y
Fe(2)-4 22 y Fc(:)p 56 -46 215 5 v 36 w Fg(p)125 41 y
Fe(2)174 22 y Fg(s)221 41 y Fe(3)297 22 y Fb(=)h Fc(3)h(:)f(4)h(:)g(2)
-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 443.29466 52.49535 } PutCoor PutBegin  end
 -575 46 a -1 x Fa(Handout)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 443.29466 41.11441 } PutCoor PutBegin  end
 -575 46 a -1 x Fa(Chunks)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 443.29466 -4.41013 } PutCoor PutBegin  end
 -575 46 a -1 x Fa(T)m(ime)20
b(in)-575 46 y
tx@Dict begin  PutEnd  end
 -575 46 a -575 46 a
tx@Dict begin { 443.29466 -15.79106 } PutCoor PutBegin  end
 -575 46 a -1 x Fa(Audio)-575
46 y
tx@Dict begin  PutEnd  end
 -575 46 a -595 669 a
tx@Dict begin  CP CP translate 1 1.0 div 1 1.0 div scale NET  end
 -595 669 a 0 TeXcolorgray 0
TeXcolorgray eop end

userdict /end-hook known{end-hook}if
%%Trailer
cleartomark countdictstack exch sub { end } repeat restore
%%EOF
